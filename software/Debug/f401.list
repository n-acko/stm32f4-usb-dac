
f401.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ad54  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  0800aef4  0800aef4  0000bef4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800afc0  0800afc0  0000c1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800afc0  0800afc0  0000bfc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800afc8  0800afc8  0000c1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800afc8  0800afc8  0000bfc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800afcc  0800afcc  0000bfcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800afd0  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000706c  200001d8  0800b1a8  0000c1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20007244  0800b1a8  0000c244  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012cab  00000000  00000000  0000c208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b99  00000000  00000000  0001eeb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001068  00000000  00000000  00022a50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c47  00000000  00000000  00023ab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001af41  00000000  00000000  000246ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000171a2  00000000  00000000  0003f640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096ab3  00000000  00000000  000567e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ed295  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049e8  00000000  00000000  000ed2d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000f1cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800aedc 	.word	0x0800aedc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	0800aedc 	.word	0x0800aedc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <getInfo>:
int16_t lastDistance = -1, distance = 0;
uint32_t *localFreqP;
uint8_t *localUpdateFreqP;
uint8_t *localBitDepthP;

void getInfo(uint32_t* buffer, uint16_t bufferSize, uint8_t* activeHalf){
 8000570:	b580      	push	{r7, lr}
 8000572:	b084      	sub	sp, #16
 8000574:	af00      	add	r7, sp, #0
 8000576:	60f8      	str	r0, [r7, #12]
 8000578:	460b      	mov	r3, r1
 800057a:	607a      	str	r2, [r7, #4]
 800057c:	817b      	strh	r3, [r7, #10]
	buffPoint = buffer;
 800057e:	4a12      	ldr	r2, [pc, #72]	@ (80005c8 <getInfo+0x58>)
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	6013      	str	r3, [r2, #0]
	localSize = bufferSize / 2;
 8000584:	897b      	ldrh	r3, [r7, #10]
 8000586:	085b      	lsrs	r3, r3, #1
 8000588:	b29a      	uxth	r2, r3
 800058a:	4b10      	ldr	r3, [pc, #64]	@ (80005cc <getInfo+0x5c>)
 800058c:	801a      	strh	r2, [r3, #0]
	tempBuff = malloc( localSize * sizeof(uint32_t) * MULT);
 800058e:	4b0f      	ldr	r3, [pc, #60]	@ (80005cc <getInfo+0x5c>)
 8000590:	881b      	ldrh	r3, [r3, #0]
 8000592:	015b      	lsls	r3, r3, #5
 8000594:	4618      	mov	r0, r3
 8000596:	f009 fd2d 	bl	8009ff4 <malloc>
 800059a:	4603      	mov	r3, r0
 800059c:	461a      	mov	r2, r3
 800059e:	4b0c      	ldr	r3, [pc, #48]	@ (80005d0 <getInfo+0x60>)
 80005a0:	601a      	str	r2, [r3, #0]
	memset(tempBuff, 0, (localSize * sizeof(uint32_t) * MULT));
 80005a2:	4b0b      	ldr	r3, [pc, #44]	@ (80005d0 <getInfo+0x60>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	4a09      	ldr	r2, [pc, #36]	@ (80005cc <getInfo+0x5c>)
 80005a8:	8812      	ldrh	r2, [r2, #0]
 80005aa:	0152      	lsls	r2, r2, #5
 80005ac:	2100      	movs	r1, #0
 80005ae:	4618      	mov	r0, r3
 80005b0:	f009 fef5 	bl	800a39e <memset>
	localActive = activeHalf;
 80005b4:	4a07      	ldr	r2, [pc, #28]	@ (80005d4 <getInfo+0x64>)
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	6013      	str	r3, [r2, #0]
	currentSize = 0;
 80005ba:	4b07      	ldr	r3, [pc, #28]	@ (80005d8 <getInfo+0x68>)
 80005bc:	2200      	movs	r2, #0
 80005be:	801a      	strh	r2, [r3, #0]

}
 80005c0:	bf00      	nop
 80005c2:	3710      	adds	r7, #16
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	200001f4 	.word	0x200001f4
 80005cc:	200001fc 	.word	0x200001fc
 80005d0:	20000200 	.word	0x20000200
 80005d4:	200001f8 	.word	0x200001f8
 80005d8:	200001fe 	.word	0x200001fe

080005dc <recieveData>:

void recieveData(uint32_t *data, uint16_t size){
 80005dc:	b590      	push	{r4, r7, lr}
 80005de:	b087      	sub	sp, #28
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
 80005e4:	460b      	mov	r3, r1
 80005e6:	807b      	strh	r3, [r7, #2]
	noNewPacket = 0;
 80005e8:	4b80      	ldr	r3, [pc, #512]	@ (80007ec <recieveData+0x210>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	801a      	strh	r2, [r3, #0]
	if(muteSW){
 80005ee:	4b80      	ldr	r3, [pc, #512]	@ (80007f0 <recieveData+0x214>)
 80005f0:	781b      	ldrb	r3, [r3, #0]
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d002      	beq.n	80005fc <recieveData+0x20>
		muteOutput(2);
 80005f6:	2002      	movs	r0, #2
 80005f8:	f000 f9c0 	bl	800097c <muteOutput>
	}

	uint32_t *localtemp = data;
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	613b      	str	r3, [r7, #16]

	uint16_t inc = 0;
 8000600:	2300      	movs	r3, #0
 8000602:	82fb      	strh	r3, [r7, #22]
	while(size > 0){
 8000604:	e01d      	b.n	8000642 <recieveData+0x66>
		tempBuff[currentSize++ % (localSize * MULT)] = localtemp[inc++];
 8000606:	8afb      	ldrh	r3, [r7, #22]
 8000608:	1c5a      	adds	r2, r3, #1
 800060a:	82fa      	strh	r2, [r7, #22]
 800060c:	009b      	lsls	r3, r3, #2
 800060e:	693a      	ldr	r2, [r7, #16]
 8000610:	18d1      	adds	r1, r2, r3
 8000612:	4b78      	ldr	r3, [pc, #480]	@ (80007f4 <recieveData+0x218>)
 8000614:	6818      	ldr	r0, [r3, #0]
 8000616:	4b78      	ldr	r3, [pc, #480]	@ (80007f8 <recieveData+0x21c>)
 8000618:	881b      	ldrh	r3, [r3, #0]
 800061a:	1c5a      	adds	r2, r3, #1
 800061c:	b294      	uxth	r4, r2
 800061e:	4a76      	ldr	r2, [pc, #472]	@ (80007f8 <recieveData+0x21c>)
 8000620:	8014      	strh	r4, [r2, #0]
 8000622:	461a      	mov	r2, r3
 8000624:	4b75      	ldr	r3, [pc, #468]	@ (80007fc <recieveData+0x220>)
 8000626:	881b      	ldrh	r3, [r3, #0]
 8000628:	00db      	lsls	r3, r3, #3
 800062a:	fbb2 f4f3 	udiv	r4, r2, r3
 800062e:	fb04 f303 	mul.w	r3, r4, r3
 8000632:	1ad3      	subs	r3, r2, r3
 8000634:	009b      	lsls	r3, r3, #2
 8000636:	4403      	add	r3, r0
 8000638:	680a      	ldr	r2, [r1, #0]
 800063a:	601a      	str	r2, [r3, #0]
		size--;
 800063c:	887b      	ldrh	r3, [r7, #2]
 800063e:	3b01      	subs	r3, #1
 8000640:	807b      	strh	r3, [r7, #2]
	while(size > 0){
 8000642:	887b      	ldrh	r3, [r7, #2]
 8000644:	2b00      	cmp	r3, #0
 8000646:	d1de      	bne.n	8000606 <recieveData+0x2a>
	}
	if(currentSize >= localSize * MULT){
 8000648:	4b6b      	ldr	r3, [pc, #428]	@ (80007f8 <recieveData+0x21c>)
 800064a:	881b      	ldrh	r3, [r3, #0]
 800064c:	461a      	mov	r2, r3
 800064e:	4b6b      	ldr	r3, [pc, #428]	@ (80007fc <recieveData+0x220>)
 8000650:	881b      	ldrh	r3, [r3, #0]
 8000652:	00db      	lsls	r3, r3, #3
 8000654:	429a      	cmp	r2, r3
 8000656:	d30d      	bcc.n	8000674 <recieveData+0x98>
		currentSize = currentSize % (localSize * MULT);
 8000658:	4b67      	ldr	r3, [pc, #412]	@ (80007f8 <recieveData+0x21c>)
 800065a:	881b      	ldrh	r3, [r3, #0]
 800065c:	461a      	mov	r2, r3
 800065e:	4b67      	ldr	r3, [pc, #412]	@ (80007fc <recieveData+0x220>)
 8000660:	881b      	ldrh	r3, [r3, #0]
 8000662:	00db      	lsls	r3, r3, #3
 8000664:	fbb2 f1f3 	udiv	r1, r2, r3
 8000668:	fb01 f303 	mul.w	r3, r1, r3
 800066c:	1ad3      	subs	r3, r2, r3
 800066e:	b29a      	uxth	r2, r3
 8000670:	4b61      	ldr	r3, [pc, #388]	@ (80007f8 <recieveData+0x21c>)
 8000672:	801a      	strh	r2, [r3, #0]
	}

	if(lastDistance == -1){
 8000674:	4b62      	ldr	r3, [pc, #392]	@ (8000800 <recieveData+0x224>)
 8000676:	f9b3 3000 	ldrsh.w	r3, [r3]
 800067a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800067e:	d131      	bne.n	80006e4 <recieveData+0x108>
		usbSegment = currentSize / localSize;
 8000680:	4b5d      	ldr	r3, [pc, #372]	@ (80007f8 <recieveData+0x21c>)
 8000682:	881a      	ldrh	r2, [r3, #0]
 8000684:	4b5d      	ldr	r3, [pc, #372]	@ (80007fc <recieveData+0x220>)
 8000686:	881b      	ldrh	r3, [r3, #0]
 8000688:	fbb2 f3f3 	udiv	r3, r2, r3
 800068c:	b29b      	uxth	r3, r3
 800068e:	b2da      	uxtb	r2, r3
 8000690:	4b5c      	ldr	r3, [pc, #368]	@ (8000804 <recieveData+0x228>)
 8000692:	701a      	strb	r2, [r3, #0]
		if(currentSegment > usbSegment){
 8000694:	4b5c      	ldr	r3, [pc, #368]	@ (8000808 <recieveData+0x22c>)
 8000696:	781a      	ldrb	r2, [r3, #0]
 8000698:	4b5a      	ldr	r3, [pc, #360]	@ (8000804 <recieveData+0x228>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	429a      	cmp	r2, r3
 800069e:	d90f      	bls.n	80006c0 <recieveData+0xe4>
			distance = currentSegment - usbSegment;
 80006a0:	4b59      	ldr	r3, [pc, #356]	@ (8000808 <recieveData+0x22c>)
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	461a      	mov	r2, r3
 80006a6:	4b57      	ldr	r3, [pc, #348]	@ (8000804 <recieveData+0x228>)
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	1ad3      	subs	r3, r2, r3
 80006ac:	b29b      	uxth	r3, r3
 80006ae:	b21a      	sxth	r2, r3
 80006b0:	4b56      	ldr	r3, [pc, #344]	@ (800080c <recieveData+0x230>)
 80006b2:	801a      	strh	r2, [r3, #0]
			lastDistance = distance;
 80006b4:	4b55      	ldr	r3, [pc, #340]	@ (800080c <recieveData+0x230>)
 80006b6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80006ba:	4b51      	ldr	r3, [pc, #324]	@ (8000800 <recieveData+0x224>)
 80006bc:	801a      	strh	r2, [r3, #0]
		else if(change > 0 && distance < (MULT / 2)){
			currentSize -=2;
		}
	}

}
 80006be:	e091      	b.n	80007e4 <recieveData+0x208>
			distance = currentSegment + MULT - usbSegment;
 80006c0:	4b51      	ldr	r3, [pc, #324]	@ (8000808 <recieveData+0x22c>)
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	461a      	mov	r2, r3
 80006c6:	4b4f      	ldr	r3, [pc, #316]	@ (8000804 <recieveData+0x228>)
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	1ad3      	subs	r3, r2, r3
 80006cc:	b29b      	uxth	r3, r3
 80006ce:	3308      	adds	r3, #8
 80006d0:	b29b      	uxth	r3, r3
 80006d2:	b21a      	sxth	r2, r3
 80006d4:	4b4d      	ldr	r3, [pc, #308]	@ (800080c <recieveData+0x230>)
 80006d6:	801a      	strh	r2, [r3, #0]
			lastDistance = distance;
 80006d8:	4b4c      	ldr	r3, [pc, #304]	@ (800080c <recieveData+0x230>)
 80006da:	f9b3 2000 	ldrsh.w	r2, [r3]
 80006de:	4b48      	ldr	r3, [pc, #288]	@ (8000800 <recieveData+0x224>)
 80006e0:	801a      	strh	r2, [r3, #0]
}
 80006e2:	e07f      	b.n	80007e4 <recieveData+0x208>
		usbSegment = currentSize / localSize;
 80006e4:	4b44      	ldr	r3, [pc, #272]	@ (80007f8 <recieveData+0x21c>)
 80006e6:	881a      	ldrh	r2, [r3, #0]
 80006e8:	4b44      	ldr	r3, [pc, #272]	@ (80007fc <recieveData+0x220>)
 80006ea:	881b      	ldrh	r3, [r3, #0]
 80006ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80006f0:	b29b      	uxth	r3, r3
 80006f2:	b2da      	uxtb	r2, r3
 80006f4:	4b43      	ldr	r3, [pc, #268]	@ (8000804 <recieveData+0x228>)
 80006f6:	701a      	strb	r2, [r3, #0]
		if(currentSegment > usbSegment){
 80006f8:	4b43      	ldr	r3, [pc, #268]	@ (8000808 <recieveData+0x22c>)
 80006fa:	781a      	ldrb	r2, [r3, #0]
 80006fc:	4b41      	ldr	r3, [pc, #260]	@ (8000804 <recieveData+0x228>)
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	429a      	cmp	r2, r3
 8000702:	d90f      	bls.n	8000724 <recieveData+0x148>
			lastDistance = distance;
 8000704:	4b41      	ldr	r3, [pc, #260]	@ (800080c <recieveData+0x230>)
 8000706:	f9b3 2000 	ldrsh.w	r2, [r3]
 800070a:	4b3d      	ldr	r3, [pc, #244]	@ (8000800 <recieveData+0x224>)
 800070c:	801a      	strh	r2, [r3, #0]
			distance = currentSegment - usbSegment;
 800070e:	4b3e      	ldr	r3, [pc, #248]	@ (8000808 <recieveData+0x22c>)
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	461a      	mov	r2, r3
 8000714:	4b3b      	ldr	r3, [pc, #236]	@ (8000804 <recieveData+0x228>)
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	1ad3      	subs	r3, r2, r3
 800071a:	b29b      	uxth	r3, r3
 800071c:	b21a      	sxth	r2, r3
 800071e:	4b3b      	ldr	r3, [pc, #236]	@ (800080c <recieveData+0x230>)
 8000720:	801a      	strh	r2, [r3, #0]
 8000722:	e010      	b.n	8000746 <recieveData+0x16a>
			lastDistance = distance;
 8000724:	4b39      	ldr	r3, [pc, #228]	@ (800080c <recieveData+0x230>)
 8000726:	f9b3 2000 	ldrsh.w	r2, [r3]
 800072a:	4b35      	ldr	r3, [pc, #212]	@ (8000800 <recieveData+0x224>)
 800072c:	801a      	strh	r2, [r3, #0]
			distance = currentSegment + MULT - usbSegment;
 800072e:	4b36      	ldr	r3, [pc, #216]	@ (8000808 <recieveData+0x22c>)
 8000730:	781b      	ldrb	r3, [r3, #0]
 8000732:	461a      	mov	r2, r3
 8000734:	4b33      	ldr	r3, [pc, #204]	@ (8000804 <recieveData+0x228>)
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	1ad3      	subs	r3, r2, r3
 800073a:	b29b      	uxth	r3, r3
 800073c:	3308      	adds	r3, #8
 800073e:	b29b      	uxth	r3, r3
 8000740:	b21a      	sxth	r2, r3
 8000742:	4b32      	ldr	r3, [pc, #200]	@ (800080c <recieveData+0x230>)
 8000744:	801a      	strh	r2, [r3, #0]
		int16_t change = lastDistance - distance;
 8000746:	4b2e      	ldr	r3, [pc, #184]	@ (8000800 <recieveData+0x224>)
 8000748:	f9b3 3000 	ldrsh.w	r3, [r3]
 800074c:	b29a      	uxth	r2, r3
 800074e:	4b2f      	ldr	r3, [pc, #188]	@ (800080c <recieveData+0x230>)
 8000750:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000754:	b29b      	uxth	r3, r3
 8000756:	1ad3      	subs	r3, r2, r3
 8000758:	b29b      	uxth	r3, r3
 800075a:	81fb      	strh	r3, [r7, #14]
		if(change < 0 && distance > (MULT / 2)){
 800075c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000760:	2b00      	cmp	r3, #0
 8000762:	da2f      	bge.n	80007c4 <recieveData+0x1e8>
 8000764:	4b29      	ldr	r3, [pc, #164]	@ (800080c <recieveData+0x230>)
 8000766:	f9b3 3000 	ldrsh.w	r3, [r3]
 800076a:	b29b      	uxth	r3, r3
 800076c:	2b04      	cmp	r3, #4
 800076e:	d929      	bls.n	80007c4 <recieveData+0x1e8>
			tempBuff[currentSize] = tempBuff[currentSize - 2];
 8000770:	4b20      	ldr	r3, [pc, #128]	@ (80007f4 <recieveData+0x218>)
 8000772:	681a      	ldr	r2, [r3, #0]
 8000774:	4b20      	ldr	r3, [pc, #128]	@ (80007f8 <recieveData+0x21c>)
 8000776:	881b      	ldrh	r3, [r3, #0]
 8000778:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800077c:	3b02      	subs	r3, #2
 800077e:	009b      	lsls	r3, r3, #2
 8000780:	441a      	add	r2, r3
 8000782:	4b1c      	ldr	r3, [pc, #112]	@ (80007f4 <recieveData+0x218>)
 8000784:	6819      	ldr	r1, [r3, #0]
 8000786:	4b1c      	ldr	r3, [pc, #112]	@ (80007f8 <recieveData+0x21c>)
 8000788:	881b      	ldrh	r3, [r3, #0]
 800078a:	009b      	lsls	r3, r3, #2
 800078c:	440b      	add	r3, r1
 800078e:	6812      	ldr	r2, [r2, #0]
 8000790:	601a      	str	r2, [r3, #0]
			tempBuff[currentSize + 1] = tempBuff[currentSize - 1];
 8000792:	4b18      	ldr	r3, [pc, #96]	@ (80007f4 <recieveData+0x218>)
 8000794:	681a      	ldr	r2, [r3, #0]
 8000796:	4b18      	ldr	r3, [pc, #96]	@ (80007f8 <recieveData+0x21c>)
 8000798:	881b      	ldrh	r3, [r3, #0]
 800079a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800079e:	3b01      	subs	r3, #1
 80007a0:	009b      	lsls	r3, r3, #2
 80007a2:	441a      	add	r2, r3
 80007a4:	4b13      	ldr	r3, [pc, #76]	@ (80007f4 <recieveData+0x218>)
 80007a6:	6819      	ldr	r1, [r3, #0]
 80007a8:	4b13      	ldr	r3, [pc, #76]	@ (80007f8 <recieveData+0x21c>)
 80007aa:	881b      	ldrh	r3, [r3, #0]
 80007ac:	3301      	adds	r3, #1
 80007ae:	009b      	lsls	r3, r3, #2
 80007b0:	440b      	add	r3, r1
 80007b2:	6812      	ldr	r2, [r2, #0]
 80007b4:	601a      	str	r2, [r3, #0]
			currentSize += 2;
 80007b6:	4b10      	ldr	r3, [pc, #64]	@ (80007f8 <recieveData+0x21c>)
 80007b8:	881b      	ldrh	r3, [r3, #0]
 80007ba:	3302      	adds	r3, #2
 80007bc:	b29a      	uxth	r2, r3
 80007be:	4b0e      	ldr	r3, [pc, #56]	@ (80007f8 <recieveData+0x21c>)
 80007c0:	801a      	strh	r2, [r3, #0]
}
 80007c2:	e00f      	b.n	80007e4 <recieveData+0x208>
		else if(change > 0 && distance < (MULT / 2)){
 80007c4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	dd0b      	ble.n	80007e4 <recieveData+0x208>
 80007cc:	4b0f      	ldr	r3, [pc, #60]	@ (800080c <recieveData+0x230>)
 80007ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007d2:	b29b      	uxth	r3, r3
 80007d4:	2b03      	cmp	r3, #3
 80007d6:	d805      	bhi.n	80007e4 <recieveData+0x208>
			currentSize -=2;
 80007d8:	4b07      	ldr	r3, [pc, #28]	@ (80007f8 <recieveData+0x21c>)
 80007da:	881b      	ldrh	r3, [r3, #0]
 80007dc:	3b02      	subs	r3, #2
 80007de:	b29a      	uxth	r2, r3
 80007e0:	4b05      	ldr	r3, [pc, #20]	@ (80007f8 <recieveData+0x21c>)
 80007e2:	801a      	strh	r2, [r3, #0]
}
 80007e4:	bf00      	nop
 80007e6:	371c      	adds	r7, #28
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd90      	pop	{r4, r7, pc}
 80007ec:	20000204 	.word	0x20000204
 80007f0:	20000206 	.word	0x20000206
 80007f4:	20000200 	.word	0x20000200
 80007f8:	200001fe 	.word	0x200001fe
 80007fc:	200001fc 	.word	0x200001fc
 8000800:	20000000 	.word	0x20000000
 8000804:	2000020d 	.word	0x2000020d
 8000808:	2000020c 	.word	0x2000020c
 800080c:	2000020e 	.word	0x2000020e

08000810 <updateBuffer>:

void updateBuffer(){
 8000810:	b580      	push	{r7, lr}
 8000812:	b084      	sub	sp, #16
 8000814:	af00      	add	r7, sp, #0
	if(*localMute){
 8000816:	4b51      	ldr	r3, [pc, #324]	@ (800095c <updateBuffer+0x14c>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	2b00      	cmp	r3, #0
 800081e:	d030      	beq.n	8000882 <updateBuffer+0x72>
		if(*localActive){
 8000820:	4b4f      	ldr	r3, [pc, #316]	@ (8000960 <updateBuffer+0x150>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	2b00      	cmp	r3, #0
 8000828:	d013      	beq.n	8000852 <updateBuffer+0x42>
			for(int i = 0; i < localSize; i++){
 800082a:	2300      	movs	r3, #0
 800082c:	60fb      	str	r3, [r7, #12]
 800082e:	e009      	b.n	8000844 <updateBuffer+0x34>
				buffPoint[i] = 0;
 8000830:	4b4c      	ldr	r3, [pc, #304]	@ (8000964 <updateBuffer+0x154>)
 8000832:	681a      	ldr	r2, [r3, #0]
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	009b      	lsls	r3, r3, #2
 8000838:	4413      	add	r3, r2
 800083a:	2200      	movs	r2, #0
 800083c:	601a      	str	r2, [r3, #0]
			for(int i = 0; i < localSize; i++){
 800083e:	68fb      	ldr	r3, [r7, #12]
 8000840:	3301      	adds	r3, #1
 8000842:	60fb      	str	r3, [r7, #12]
 8000844:	4b48      	ldr	r3, [pc, #288]	@ (8000968 <updateBuffer+0x158>)
 8000846:	881b      	ldrh	r3, [r3, #0]
 8000848:	461a      	mov	r2, r3
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	4293      	cmp	r3, r2
 800084e:	dbef      	blt.n	8000830 <updateBuffer+0x20>
		else{
			for(int i = 0; i < localSize; i++){
				buffPoint[i + localSize] = 0;
			}
		}
		return;
 8000850:	e080      	b.n	8000954 <updateBuffer+0x144>
			for(int i = 0; i < localSize; i++){
 8000852:	2300      	movs	r3, #0
 8000854:	60bb      	str	r3, [r7, #8]
 8000856:	e00d      	b.n	8000874 <updateBuffer+0x64>
				buffPoint[i + localSize] = 0;
 8000858:	4b42      	ldr	r3, [pc, #264]	@ (8000964 <updateBuffer+0x154>)
 800085a:	681a      	ldr	r2, [r3, #0]
 800085c:	4b42      	ldr	r3, [pc, #264]	@ (8000968 <updateBuffer+0x158>)
 800085e:	881b      	ldrh	r3, [r3, #0]
 8000860:	4619      	mov	r1, r3
 8000862:	68bb      	ldr	r3, [r7, #8]
 8000864:	440b      	add	r3, r1
 8000866:	009b      	lsls	r3, r3, #2
 8000868:	4413      	add	r3, r2
 800086a:	2200      	movs	r2, #0
 800086c:	601a      	str	r2, [r3, #0]
			for(int i = 0; i < localSize; i++){
 800086e:	68bb      	ldr	r3, [r7, #8]
 8000870:	3301      	adds	r3, #1
 8000872:	60bb      	str	r3, [r7, #8]
 8000874:	4b3c      	ldr	r3, [pc, #240]	@ (8000968 <updateBuffer+0x158>)
 8000876:	881b      	ldrh	r3, [r3, #0]
 8000878:	461a      	mov	r2, r3
 800087a:	68bb      	ldr	r3, [r7, #8]
 800087c:	4293      	cmp	r3, r2
 800087e:	dbeb      	blt.n	8000858 <updateBuffer+0x48>
		return;
 8000880:	e068      	b.n	8000954 <updateBuffer+0x144>
	}

	if(*localActive){
 8000882:	4b37      	ldr	r3, [pc, #220]	@ (8000960 <updateBuffer+0x150>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	2b00      	cmp	r3, #0
 800088a:	d020      	beq.n	80008ce <updateBuffer+0xbe>
		for(int i = 0; i < localSize; i++){
 800088c:	2300      	movs	r3, #0
 800088e:	607b      	str	r3, [r7, #4]
 8000890:	e016      	b.n	80008c0 <updateBuffer+0xb0>
			buffPoint[i] = tempBuff[i + currentSegment * localSize];
 8000892:	4b36      	ldr	r3, [pc, #216]	@ (800096c <updateBuffer+0x15c>)
 8000894:	681a      	ldr	r2, [r3, #0]
 8000896:	4b36      	ldr	r3, [pc, #216]	@ (8000970 <updateBuffer+0x160>)
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	4619      	mov	r1, r3
 800089c:	4b32      	ldr	r3, [pc, #200]	@ (8000968 <updateBuffer+0x158>)
 800089e:	881b      	ldrh	r3, [r3, #0]
 80008a0:	fb03 f101 	mul.w	r1, r3, r1
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	440b      	add	r3, r1
 80008a8:	009b      	lsls	r3, r3, #2
 80008aa:	441a      	add	r2, r3
 80008ac:	4b2d      	ldr	r3, [pc, #180]	@ (8000964 <updateBuffer+0x154>)
 80008ae:	6819      	ldr	r1, [r3, #0]
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	009b      	lsls	r3, r3, #2
 80008b4:	440b      	add	r3, r1
 80008b6:	6812      	ldr	r2, [r2, #0]
 80008b8:	601a      	str	r2, [r3, #0]
		for(int i = 0; i < localSize; i++){
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	3301      	adds	r3, #1
 80008be:	607b      	str	r3, [r7, #4]
 80008c0:	4b29      	ldr	r3, [pc, #164]	@ (8000968 <updateBuffer+0x158>)
 80008c2:	881b      	ldrh	r3, [r3, #0]
 80008c4:	461a      	mov	r2, r3
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	4293      	cmp	r3, r2
 80008ca:	dbe2      	blt.n	8000892 <updateBuffer+0x82>
 80008cc:	e023      	b.n	8000916 <updateBuffer+0x106>
		}
	}
	else{
		for(int i = 0; i < localSize; i++){
 80008ce:	2300      	movs	r3, #0
 80008d0:	603b      	str	r3, [r7, #0]
 80008d2:	e01a      	b.n	800090a <updateBuffer+0xfa>
			buffPoint[i + localSize] = tempBuff[i + currentSegment * localSize];
 80008d4:	4b25      	ldr	r3, [pc, #148]	@ (800096c <updateBuffer+0x15c>)
 80008d6:	681a      	ldr	r2, [r3, #0]
 80008d8:	4b25      	ldr	r3, [pc, #148]	@ (8000970 <updateBuffer+0x160>)
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	4619      	mov	r1, r3
 80008de:	4b22      	ldr	r3, [pc, #136]	@ (8000968 <updateBuffer+0x158>)
 80008e0:	881b      	ldrh	r3, [r3, #0]
 80008e2:	fb03 f101 	mul.w	r1, r3, r1
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	440b      	add	r3, r1
 80008ea:	009b      	lsls	r3, r3, #2
 80008ec:	441a      	add	r2, r3
 80008ee:	4b1d      	ldr	r3, [pc, #116]	@ (8000964 <updateBuffer+0x154>)
 80008f0:	6819      	ldr	r1, [r3, #0]
 80008f2:	4b1d      	ldr	r3, [pc, #116]	@ (8000968 <updateBuffer+0x158>)
 80008f4:	881b      	ldrh	r3, [r3, #0]
 80008f6:	4618      	mov	r0, r3
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	4403      	add	r3, r0
 80008fc:	009b      	lsls	r3, r3, #2
 80008fe:	440b      	add	r3, r1
 8000900:	6812      	ldr	r2, [r2, #0]
 8000902:	601a      	str	r2, [r3, #0]
		for(int i = 0; i < localSize; i++){
 8000904:	683b      	ldr	r3, [r7, #0]
 8000906:	3301      	adds	r3, #1
 8000908:	603b      	str	r3, [r7, #0]
 800090a:	4b17      	ldr	r3, [pc, #92]	@ (8000968 <updateBuffer+0x158>)
 800090c:	881b      	ldrh	r3, [r3, #0]
 800090e:	461a      	mov	r2, r3
 8000910:	683b      	ldr	r3, [r7, #0]
 8000912:	4293      	cmp	r3, r2
 8000914:	dbde      	blt.n	80008d4 <updateBuffer+0xc4>
		}
	}
	currentSegment = (currentSegment + 1) % MULT;
 8000916:	4b16      	ldr	r3, [pc, #88]	@ (8000970 <updateBuffer+0x160>)
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	3301      	adds	r3, #1
 800091c:	b2db      	uxtb	r3, r3
 800091e:	f003 0307 	and.w	r3, r3, #7
 8000922:	b2da      	uxtb	r2, r3
 8000924:	4b12      	ldr	r3, [pc, #72]	@ (8000970 <updateBuffer+0x160>)
 8000926:	701a      	strb	r2, [r3, #0]

	noNewPacket++;
 8000928:	4b12      	ldr	r3, [pc, #72]	@ (8000974 <updateBuffer+0x164>)
 800092a:	881b      	ldrh	r3, [r3, #0]
 800092c:	3301      	adds	r3, #1
 800092e:	b29a      	uxth	r2, r3
 8000930:	4b10      	ldr	r3, [pc, #64]	@ (8000974 <updateBuffer+0x164>)
 8000932:	801a      	strh	r2, [r3, #0]
	if(noNewPacket > 2 && !muteSW){
 8000934:	4b0f      	ldr	r3, [pc, #60]	@ (8000974 <updateBuffer+0x164>)
 8000936:	881b      	ldrh	r3, [r3, #0]
 8000938:	2b02      	cmp	r3, #2
 800093a:	d90b      	bls.n	8000954 <updateBuffer+0x144>
 800093c:	4b0e      	ldr	r3, [pc, #56]	@ (8000978 <updateBuffer+0x168>)
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	2b00      	cmp	r3, #0
 8000942:	d107      	bne.n	8000954 <updateBuffer+0x144>
		muteOutput(3);
 8000944:	2003      	movs	r0, #3
 8000946:	f000 f819 	bl	800097c <muteOutput>
		reset();
 800094a:	f000 f8b1 	bl	8000ab0 <reset>
		noNewPacket = 3;
 800094e:	4b09      	ldr	r3, [pc, #36]	@ (8000974 <updateBuffer+0x164>)
 8000950:	2203      	movs	r2, #3
 8000952:	801a      	strh	r2, [r3, #0]
	}
}
 8000954:	3710      	adds	r7, #16
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	20000208 	.word	0x20000208
 8000960:	200001f8 	.word	0x200001f8
 8000964:	200001f4 	.word	0x200001f4
 8000968:	200001fc 	.word	0x200001fc
 800096c:	20000200 	.word	0x20000200
 8000970:	2000020c 	.word	0x2000020c
 8000974:	20000204 	.word	0x20000204
 8000978:	20000206 	.word	0x20000206

0800097c <muteOutput>:

void muteOutput(uint8_t val){
 800097c:	b480      	push	{r7}
 800097e:	b083      	sub	sp, #12
 8000980:	af00      	add	r7, sp, #0
 8000982:	4603      	mov	r3, r0
 8000984:	71fb      	strb	r3, [r7, #7]
	switch (val) {
 8000986:	79fb      	ldrb	r3, [r7, #7]
 8000988:	2b03      	cmp	r3, #3
 800098a:	d81b      	bhi.n	80009c4 <muteOutput+0x48>
 800098c:	a201      	add	r2, pc, #4	@ (adr r2, 8000994 <muteOutput+0x18>)
 800098e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000992:	bf00      	nop
 8000994:	080009a5 	.word	0x080009a5
 8000998:	080009ad 	.word	0x080009ad
 800099c:	080009b5 	.word	0x080009b5
 80009a0:	080009bd 	.word	0x080009bd
		case 0:
			muteHW = 0;
 80009a4:	4b12      	ldr	r3, [pc, #72]	@ (80009f0 <muteOutput+0x74>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	701a      	strb	r2, [r3, #0]
			break;
 80009aa:	e00b      	b.n	80009c4 <muteOutput+0x48>
		case 1:
			muteHW = 1;
 80009ac:	4b10      	ldr	r3, [pc, #64]	@ (80009f0 <muteOutput+0x74>)
 80009ae:	2201      	movs	r2, #1
 80009b0:	701a      	strb	r2, [r3, #0]
			break;
 80009b2:	e007      	b.n	80009c4 <muteOutput+0x48>
		case 2:
			muteSW = 0;
 80009b4:	4b0f      	ldr	r3, [pc, #60]	@ (80009f4 <muteOutput+0x78>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	701a      	strb	r2, [r3, #0]
			break;
 80009ba:	e003      	b.n	80009c4 <muteOutput+0x48>
		case 3:
			muteSW = 1;
 80009bc:	4b0d      	ldr	r3, [pc, #52]	@ (80009f4 <muteOutput+0x78>)
 80009be:	2201      	movs	r2, #1
 80009c0:	701a      	strb	r2, [r3, #0]
			break;
 80009c2:	bf00      	nop
	}
	*localMute = (muteSW || muteHW);
 80009c4:	4b0b      	ldr	r3, [pc, #44]	@ (80009f4 <muteOutput+0x78>)
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d103      	bne.n	80009d4 <muteOutput+0x58>
 80009cc:	4b08      	ldr	r3, [pc, #32]	@ (80009f0 <muteOutput+0x74>)
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <muteOutput+0x5c>
 80009d4:	2201      	movs	r2, #1
 80009d6:	e000      	b.n	80009da <muteOutput+0x5e>
 80009d8:	2200      	movs	r2, #0
 80009da:	4b07      	ldr	r3, [pc, #28]	@ (80009f8 <muteOutput+0x7c>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	b2d2      	uxtb	r2, r2
 80009e0:	701a      	strb	r2, [r3, #0]
}
 80009e2:	bf00      	nop
 80009e4:	370c      	adds	r7, #12
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop
 80009f0:	20000207 	.word	0x20000207
 80009f4:	20000206 	.word	0x20000206
 80009f8:	20000208 	.word	0x20000208

080009fc <getMute>:

void getMute(uint8_t* mute){
 80009fc:	b480      	push	{r7}
 80009fe:	b083      	sub	sp, #12
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
	localMute = mute;
 8000a04:	4a04      	ldr	r2, [pc, #16]	@ (8000a18 <getMute+0x1c>)
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	6013      	str	r3, [r2, #0]
}
 8000a0a:	bf00      	nop
 8000a0c:	370c      	adds	r7, #12
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	20000208 	.word	0x20000208

08000a1c <setFreq>:

void setFreq(uint32_t freq, uint8_t bitDepth){
 8000a1c:	b480      	push	{r7}
 8000a1e:	b083      	sub	sp, #12
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
 8000a24:	460b      	mov	r3, r1
 8000a26:	70fb      	strb	r3, [r7, #3]
	if(freq != *localFreqP){
 8000a28:	4b10      	ldr	r3, [pc, #64]	@ (8000a6c <setFreq+0x50>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	687a      	ldr	r2, [r7, #4]
 8000a30:	429a      	cmp	r2, r3
 8000a32:	d007      	beq.n	8000a44 <setFreq+0x28>
		*localFreqP = freq;
 8000a34:	4b0d      	ldr	r3, [pc, #52]	@ (8000a6c <setFreq+0x50>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	687a      	ldr	r2, [r7, #4]
 8000a3a:	601a      	str	r2, [r3, #0]
		*localUpdateFreqP = 1;
 8000a3c:	4b0c      	ldr	r3, [pc, #48]	@ (8000a70 <setFreq+0x54>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	2201      	movs	r2, #1
 8000a42:	701a      	strb	r2, [r3, #0]
	}
	if(bitDepth != *localBitDepthP){
 8000a44:	4b0b      	ldr	r3, [pc, #44]	@ (8000a74 <setFreq+0x58>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	78fa      	ldrb	r2, [r7, #3]
 8000a4c:	429a      	cmp	r2, r3
 8000a4e:	d007      	beq.n	8000a60 <setFreq+0x44>
		*localBitDepthP = bitDepth;
 8000a50:	4b08      	ldr	r3, [pc, #32]	@ (8000a74 <setFreq+0x58>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	78fa      	ldrb	r2, [r7, #3]
 8000a56:	701a      	strb	r2, [r3, #0]
		*localUpdateFreqP = 1;
 8000a58:	4b05      	ldr	r3, [pc, #20]	@ (8000a70 <setFreq+0x54>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	701a      	strb	r2, [r3, #0]
	}
}
 8000a60:	bf00      	nop
 8000a62:	370c      	adds	r7, #12
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr
 8000a6c:	20000210 	.word	0x20000210
 8000a70:	20000214 	.word	0x20000214
 8000a74:	20000218 	.word	0x20000218

08000a78 <getFreqPoint>:

void getFreqPoint(uint32_t* freqP, uint8_t* updateFreqP, uint8_t* bitDepthP){
 8000a78:	b480      	push	{r7}
 8000a7a:	b085      	sub	sp, #20
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	60f8      	str	r0, [r7, #12]
 8000a80:	60b9      	str	r1, [r7, #8]
 8000a82:	607a      	str	r2, [r7, #4]
	localFreqP = freqP;
 8000a84:	4a07      	ldr	r2, [pc, #28]	@ (8000aa4 <getFreqPoint+0x2c>)
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	6013      	str	r3, [r2, #0]
	localUpdateFreqP = updateFreqP;
 8000a8a:	4a07      	ldr	r2, [pc, #28]	@ (8000aa8 <getFreqPoint+0x30>)
 8000a8c:	68bb      	ldr	r3, [r7, #8]
 8000a8e:	6013      	str	r3, [r2, #0]
	localBitDepthP = bitDepthP;
 8000a90:	4a06      	ldr	r2, [pc, #24]	@ (8000aac <getFreqPoint+0x34>)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	6013      	str	r3, [r2, #0]
}
 8000a96:	bf00      	nop
 8000a98:	3714      	adds	r7, #20
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop
 8000aa4:	20000210 	.word	0x20000210
 8000aa8:	20000214 	.word	0x20000214
 8000aac:	20000218 	.word	0x20000218

08000ab0 <reset>:

void reset(){
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
	currentSegment = 0U;
 8000ab4:	4b0a      	ldr	r3, [pc, #40]	@ (8000ae0 <reset+0x30>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	701a      	strb	r2, [r3, #0]
	currentSize = (localSize * MULT) / 2U;
 8000aba:	4b0a      	ldr	r3, [pc, #40]	@ (8000ae4 <reset+0x34>)
 8000abc:	881b      	ldrh	r3, [r3, #0]
 8000abe:	00db      	lsls	r3, r3, #3
 8000ac0:	085b      	lsrs	r3, r3, #1
 8000ac2:	b29a      	uxth	r2, r3
 8000ac4:	4b08      	ldr	r3, [pc, #32]	@ (8000ae8 <reset+0x38>)
 8000ac6:	801a      	strh	r2, [r3, #0]
	memset(tempBuff, 0, localSize * sizeof(uint32_t) * MULT);
 8000ac8:	4b08      	ldr	r3, [pc, #32]	@ (8000aec <reset+0x3c>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a05      	ldr	r2, [pc, #20]	@ (8000ae4 <reset+0x34>)
 8000ace:	8812      	ldrh	r2, [r2, #0]
 8000ad0:	0152      	lsls	r2, r2, #5
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f009 fc62 	bl	800a39e <memset>
}
 8000ada:	bf00      	nop
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	2000020c 	.word	0x2000020c
 8000ae4:	200001fc 	.word	0x200001fc
 8000ae8:	200001fe 	.word	0x200001fe
 8000aec:	20000200 	.word	0x20000200

08000af0 <HAL_I2S_TxCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef* hi2s){
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
	activeBuffHalf = 0;
 8000af8:	4b04      	ldr	r3, [pc, #16]	@ (8000b0c <HAL_I2S_TxCpltCallback+0x1c>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	701a      	strb	r2, [r3, #0]
	updateBuffer();
 8000afe:	f7ff fe87 	bl	8000810 <updateBuffer>
}
 8000b02:	bf00      	nop
 8000b04:	3708      	adds	r7, #8
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	20000a8c 	.word	0x20000a8c

08000b10 <HAL_I2S_TxHalfCpltCallback>:

void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s){
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
	activeBuffHalf = 1;
 8000b18:	4b04      	ldr	r3, [pc, #16]	@ (8000b2c <HAL_I2S_TxHalfCpltCallback+0x1c>)
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	701a      	strb	r2, [r3, #0]
	updateBuffer();
 8000b1e:	f7ff fe77 	bl	8000810 <updateBuffer>
}
 8000b22:	bf00      	nop
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	20000a8c 	.word	0x20000a8c

08000b30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b36:	f000 fde9 	bl	800170c <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(1000);
 8000b3a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b3e:	f000 fe57 	bl	80017f0 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b42:	f000 f917 	bl	8000d74 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b46:	f000 fa25 	bl	8000f94 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b4a:	f000 fa03 	bl	8000f54 <MX_DMA_Init>
  MX_I2S2_Init();
 8000b4e:	f000 f9d1 	bl	8000ef4 <MX_I2S2_Init>
  MX_USB_DEVICE_Init();
 8000b52:	f008 fc99 	bl	8009488 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 8000b56:	f000 f979 	bl	8000e4c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  getInfo(buffer, BUFFER_SIZE, &activeBuffHalf);
 8000b5a:	4a76      	ldr	r2, [pc, #472]	@ (8000d34 <main+0x204>)
 8000b5c:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 8000b60:	4875      	ldr	r0, [pc, #468]	@ (8000d38 <main+0x208>)
 8000b62:	f7ff fd05 	bl	8000570 <getInfo>
  getMute(&mute);
 8000b66:	4875      	ldr	r0, [pc, #468]	@ (8000d3c <main+0x20c>)
 8000b68:	f7ff ff48 	bl	80009fc <getMute>
  getFreqPoint(&freq, &updateFreq, &bitDepth);
 8000b6c:	4a74      	ldr	r2, [pc, #464]	@ (8000d40 <main+0x210>)
 8000b6e:	4975      	ldr	r1, [pc, #468]	@ (8000d44 <main+0x214>)
 8000b70:	4875      	ldr	r0, [pc, #468]	@ (8000d48 <main+0x218>)
 8000b72:	f7ff ff81 	bl	8000a78 <getFreqPoint>
  HAL_StatusTypeDef status = HAL_I2S_Transmit_DMA(&hi2s2, (uint16_t*)buffer, BUFFER_SIZE);
 8000b76:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8000b7a:	496f      	ldr	r1, [pc, #444]	@ (8000d38 <main+0x208>)
 8000b7c:	4873      	ldr	r0, [pc, #460]	@ (8000d4c <main+0x21c>)
 8000b7e:	f002 fb43 	bl	8003208 <HAL_I2S_Transmit_DMA>
 8000b82:	4603      	mov	r3, r0
 8000b84:	71fb      	strb	r3, [r7, #7]
  DAC_INIT();
 8000b86:	f000 fa9f 	bl	80010c8 <DAC_INIT>
  HAL_ADC_Start(&hadc1);
 8000b8a:	4871      	ldr	r0, [pc, #452]	@ (8000d50 <main+0x220>)
 8000b8c:	f000 fe98 	bl	80018c0 <HAL_ADC_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(updateFreq){
 8000b90:	4b6c      	ldr	r3, [pc, #432]	@ (8000d44 <main+0x214>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d058      	beq.n	8000c4a <main+0x11a>
		  HAL_I2S_DMAStop(&hi2s2);
 8000b98:	486c      	ldr	r0, [pc, #432]	@ (8000d4c <main+0x21c>)
 8000b9a:	f002 fbd9 	bl	8003350 <HAL_I2S_DMAStop>
		  HAL_I2S_DeInit(&hi2s2);
 8000b9e:	486b      	ldr	r0, [pc, #428]	@ (8000d4c <main+0x21c>)
 8000ba0:	f002 fb0a 	bl	80031b8 <HAL_I2S_DeInit>
		  HAL_I2S_MspDeInit(&hi2s2);
 8000ba4:	4869      	ldr	r0, [pc, #420]	@ (8000d4c <main+0x21c>)
 8000ba6:	f000 fc63 	bl	8001470 <HAL_I2S_MspDeInit>
		  if(freq != lastFreq){
 8000baa:	4b67      	ldr	r3, [pc, #412]	@ (8000d48 <main+0x218>)
 8000bac:	681a      	ldr	r2, [r3, #0]
 8000bae:	4b69      	ldr	r3, [pc, #420]	@ (8000d54 <main+0x224>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	429a      	cmp	r2, r3
 8000bb4:	d01d      	beq.n	8000bf2 <main+0xc2>
			  lastFreq = freq;
 8000bb6:	4b64      	ldr	r3, [pc, #400]	@ (8000d48 <main+0x218>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	4a66      	ldr	r2, [pc, #408]	@ (8000d54 <main+0x224>)
 8000bbc:	6013      	str	r3, [r2, #0]
			  switch(freq){
 8000bbe:	4b62      	ldr	r3, [pc, #392]	@ (8000d48 <main+0x218>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d107      	bne.n	8000bda <main+0xaa>
			  case 44100U:
				  mainSN = 271U;
 8000bca:	4b63      	ldr	r3, [pc, #396]	@ (8000d58 <main+0x228>)
 8000bcc:	f240 120f 	movw	r2, #271	@ 0x10f
 8000bd0:	601a      	str	r2, [r3, #0]
				  mainSR = 2U;
 8000bd2:	4b62      	ldr	r3, [pc, #392]	@ (8000d5c <main+0x22c>)
 8000bd4:	2202      	movs	r2, #2
 8000bd6:	601a      	str	r2, [r3, #0]
				  break;
 8000bd8:	e007      	b.n	8000bea <main+0xba>
			  default:
				  mainSN = 344U;
 8000bda:	4b5f      	ldr	r3, [pc, #380]	@ (8000d58 <main+0x228>)
 8000bdc:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 8000be0:	601a      	str	r2, [r3, #0]
				  mainSR = 2U;
 8000be2:	4b5e      	ldr	r3, [pc, #376]	@ (8000d5c <main+0x22c>)
 8000be4:	2202      	movs	r2, #2
 8000be6:	601a      	str	r2, [r3, #0]
				  break;
 8000be8:	bf00      	nop
			  }
			  hi2s2.Init.AudioFreq = freq;
 8000bea:	4b57      	ldr	r3, [pc, #348]	@ (8000d48 <main+0x218>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	4a57      	ldr	r2, [pc, #348]	@ (8000d4c <main+0x21c>)
 8000bf0:	6153      	str	r3, [r2, #20]
		  }
		  if(bitDepth != lastBitDepth){
 8000bf2:	4b53      	ldr	r3, [pc, #332]	@ (8000d40 <main+0x210>)
 8000bf4:	781a      	ldrb	r2, [r3, #0]
 8000bf6:	4b5a      	ldr	r3, [pc, #360]	@ (8000d60 <main+0x230>)
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	429a      	cmp	r2, r3
 8000bfc:	d01a      	beq.n	8000c34 <main+0x104>
			  lastBitDepth = bitDepth;
 8000bfe:	4b50      	ldr	r3, [pc, #320]	@ (8000d40 <main+0x210>)
 8000c00:	781a      	ldrb	r2, [r3, #0]
 8000c02:	4b57      	ldr	r3, [pc, #348]	@ (8000d60 <main+0x230>)
 8000c04:	701a      	strb	r2, [r3, #0]
			  switch(bitDepth){
 8000c06:	4b4e      	ldr	r3, [pc, #312]	@ (8000d40 <main+0x210>)
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	2b10      	cmp	r3, #16
 8000c0c:	d002      	beq.n	8000c14 <main+0xe4>
 8000c0e:	2b18      	cmp	r3, #24
 8000c10:	d008      	beq.n	8000c24 <main+0xf4>
 8000c12:	e00f      	b.n	8000c34 <main+0x104>
			  case 16U:
				  hdma_spi2_tx.Init.MemDataAlignment = (uint32_t)(2U << 13);
 8000c14:	4b53      	ldr	r3, [pc, #332]	@ (8000d64 <main+0x234>)
 8000c16:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000c1a:	619a      	str	r2, [r3, #24]
				  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B_EXTENDED;
 8000c1c:	4b4b      	ldr	r3, [pc, #300]	@ (8000d4c <main+0x21c>)
 8000c1e:	2201      	movs	r2, #1
 8000c20:	60da      	str	r2, [r3, #12]
				  break;
 8000c22:	e007      	b.n	8000c34 <main+0x104>
			  case 24U:
				  hdma_spi2_tx.Init.MemDataAlignment = (uint32_t)(1U << 13);
 8000c24:	4b4f      	ldr	r3, [pc, #316]	@ (8000d64 <main+0x234>)
 8000c26:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c2a:	619a      	str	r2, [r3, #24]
				  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 8000c2c:	4b47      	ldr	r3, [pc, #284]	@ (8000d4c <main+0x21c>)
 8000c2e:	2203      	movs	r2, #3
 8000c30:	60da      	str	r2, [r3, #12]
				  break;
 8000c32:	bf00      	nop
			  }
		  }
		  MX_I2S2_Init();
 8000c34:	f000 f95e 	bl	8000ef4 <MX_I2S2_Init>
		  HAL_I2S_Transmit_DMA(&hi2s2, (uint16_t*)buffer, BUFFER_SIZE);
 8000c38:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8000c3c:	493e      	ldr	r1, [pc, #248]	@ (8000d38 <main+0x208>)
 8000c3e:	4843      	ldr	r0, [pc, #268]	@ (8000d4c <main+0x21c>)
 8000c40:	f002 fae2 	bl	8003208 <HAL_I2S_Transmit_DMA>
		  updateFreq = 0;
 8000c44:	4b3f      	ldr	r3, [pc, #252]	@ (8000d44 <main+0x214>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	701a      	strb	r2, [r3, #0]
	  }

	  if(mute && !lastMute){
 8000c4a:	4b3c      	ldr	r3, [pc, #240]	@ (8000d3c <main+0x20c>)
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d00a      	beq.n	8000c68 <main+0x138>
 8000c52:	4b45      	ldr	r3, [pc, #276]	@ (8000d68 <main+0x238>)
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d106      	bne.n	8000c68 <main+0x138>
		  DAC_WRITE(18, 3);
 8000c5a:	2103      	movs	r1, #3
 8000c5c:	2012      	movs	r0, #18
 8000c5e:	f000 fa17 	bl	8001090 <DAC_WRITE>
		  lastMute = 1;
 8000c62:	4b41      	ldr	r3, [pc, #260]	@ (8000d68 <main+0x238>)
 8000c64:	2201      	movs	r2, #1
 8000c66:	701a      	strb	r2, [r3, #0]
	  }
	  if(lastMute && !mute){
 8000c68:	4b3f      	ldr	r3, [pc, #252]	@ (8000d68 <main+0x238>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d00a      	beq.n	8000c86 <main+0x156>
 8000c70:	4b32      	ldr	r3, [pc, #200]	@ (8000d3c <main+0x20c>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d106      	bne.n	8000c86 <main+0x156>
		  DAC_WRITE(18, 0);
 8000c78:	2100      	movs	r1, #0
 8000c7a:	2012      	movs	r0, #18
 8000c7c:	f000 fa08 	bl	8001090 <DAC_WRITE>
		  lastMute = 0;
 8000c80:	4b39      	ldr	r3, [pc, #228]	@ (8000d68 <main+0x238>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	701a      	strb	r2, [r3, #0]
	  }

	  HAL_ADC_Start(&hadc1);
 8000c86:	4832      	ldr	r0, [pc, #200]	@ (8000d50 <main+0x220>)
 8000c88:	f000 fe1a 	bl	80018c0 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 100);
 8000c8c:	2164      	movs	r1, #100	@ 0x64
 8000c8e:	4830      	ldr	r0, [pc, #192]	@ (8000d50 <main+0x220>)
 8000c90:	f000 feca 	bl	8001a28 <HAL_ADC_PollForConversion>
	  adcVal = HAL_ADC_GetValue(&hadc1);
 8000c94:	482e      	ldr	r0, [pc, #184]	@ (8000d50 <main+0x220>)
 8000c96:	f000 ff52 	bl	8001b3e <HAL_ADC_GetValue>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	b29a      	uxth	r2, r3
 8000c9e:	4b33      	ldr	r3, [pc, #204]	@ (8000d6c <main+0x23c>)
 8000ca0:	801a      	strh	r2, [r3, #0]

	  if (vol == -1){
 8000ca2:	4b33      	ldr	r3, [pc, #204]	@ (8000d70 <main+0x240>)
 8000ca4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cac:	d11b      	bne.n	8000ce6 <main+0x1b6>
		  vol = adcVal >> 1;
 8000cae:	4b2f      	ldr	r3, [pc, #188]	@ (8000d6c <main+0x23c>)
 8000cb0:	881b      	ldrh	r3, [r3, #0]
 8000cb2:	085b      	lsrs	r3, r3, #1
 8000cb4:	b29b      	uxth	r3, r3
 8000cb6:	b21a      	sxth	r2, r3
 8000cb8:	4b2d      	ldr	r3, [pc, #180]	@ (8000d70 <main+0x240>)
 8000cba:	801a      	strh	r2, [r3, #0]
		  DAC_WRITE(16, vol + 128);
 8000cbc:	4b2c      	ldr	r3, [pc, #176]	@ (8000d70 <main+0x240>)
 8000cbe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cc2:	b2db      	uxtb	r3, r3
 8000cc4:	3b80      	subs	r3, #128	@ 0x80
 8000cc6:	b2db      	uxtb	r3, r3
 8000cc8:	4619      	mov	r1, r3
 8000cca:	2010      	movs	r0, #16
 8000ccc:	f000 f9e0 	bl	8001090 <DAC_WRITE>
		  DAC_WRITE(17, vol + 128);
 8000cd0:	4b27      	ldr	r3, [pc, #156]	@ (8000d70 <main+0x240>)
 8000cd2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cd6:	b2db      	uxtb	r3, r3
 8000cd8:	3b80      	subs	r3, #128	@ 0x80
 8000cda:	b2db      	uxtb	r3, r3
 8000cdc:	4619      	mov	r1, r3
 8000cde:	2011      	movs	r0, #17
 8000ce0:	f000 f9d6 	bl	8001090 <DAC_WRITE>
 8000ce4:	e754      	b.n	8000b90 <main+0x60>
	  }
	  else if((adcVal >> 1) != vol){
 8000ce6:	4b21      	ldr	r3, [pc, #132]	@ (8000d6c <main+0x23c>)
 8000ce8:	881b      	ldrh	r3, [r3, #0]
 8000cea:	085b      	lsrs	r3, r3, #1
 8000cec:	b29b      	uxth	r3, r3
 8000cee:	461a      	mov	r2, r3
 8000cf0:	4b1f      	ldr	r3, [pc, #124]	@ (8000d70 <main+0x240>)
 8000cf2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cf6:	429a      	cmp	r2, r3
 8000cf8:	f43f af4a 	beq.w	8000b90 <main+0x60>
		  vol = adcVal >> 1;
 8000cfc:	4b1b      	ldr	r3, [pc, #108]	@ (8000d6c <main+0x23c>)
 8000cfe:	881b      	ldrh	r3, [r3, #0]
 8000d00:	085b      	lsrs	r3, r3, #1
 8000d02:	b29b      	uxth	r3, r3
 8000d04:	b21a      	sxth	r2, r3
 8000d06:	4b1a      	ldr	r3, [pc, #104]	@ (8000d70 <main+0x240>)
 8000d08:	801a      	strh	r2, [r3, #0]
		  DAC_WRITE(16, vol + 128);
 8000d0a:	4b19      	ldr	r3, [pc, #100]	@ (8000d70 <main+0x240>)
 8000d0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d10:	b2db      	uxtb	r3, r3
 8000d12:	3b80      	subs	r3, #128	@ 0x80
 8000d14:	b2db      	uxtb	r3, r3
 8000d16:	4619      	mov	r1, r3
 8000d18:	2010      	movs	r0, #16
 8000d1a:	f000 f9b9 	bl	8001090 <DAC_WRITE>
		  DAC_WRITE(17, vol + 128);
 8000d1e:	4b14      	ldr	r3, [pc, #80]	@ (8000d70 <main+0x240>)
 8000d20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d24:	b2db      	uxtb	r3, r3
 8000d26:	3b80      	subs	r3, #128	@ 0x80
 8000d28:	b2db      	uxtb	r3, r3
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	2011      	movs	r0, #17
 8000d2e:	f000 f9af 	bl	8001090 <DAC_WRITE>
	  if(updateFreq){
 8000d32:	e72d      	b.n	8000b90 <main+0x60>
 8000d34:	20000a8c 	.word	0x20000a8c
 8000d38:	2000030c 	.word	0x2000030c
 8000d3c:	20000a8d 	.word	0x20000a8d
 8000d40:	2000000c 	.word	0x2000000c
 8000d44:	20000a8f 	.word	0x20000a8f
 8000d48:	20000004 	.word	0x20000004
 8000d4c:	20000264 	.word	0x20000264
 8000d50:	2000021c 	.word	0x2000021c
 8000d54:	20000008 	.word	0x20000008
 8000d58:	20000010 	.word	0x20000010
 8000d5c:	20000014 	.word	0x20000014
 8000d60:	2000000d 	.word	0x2000000d
 8000d64:	200002ac 	.word	0x200002ac
 8000d68:	20000a8e 	.word	0x20000a8e
 8000d6c:	20000a90 	.word	0x20000a90
 8000d70:	2000000e 	.word	0x2000000e

08000d74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b094      	sub	sp, #80	@ 0x50
 8000d78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d7a:	f107 0320 	add.w	r3, r7, #32
 8000d7e:	2230      	movs	r2, #48	@ 0x30
 8000d80:	2100      	movs	r1, #0
 8000d82:	4618      	mov	r0, r3
 8000d84:	f009 fb0b 	bl	800a39e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d88:	f107 030c 	add.w	r3, r7, #12
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	605a      	str	r2, [r3, #4]
 8000d92:	609a      	str	r2, [r3, #8]
 8000d94:	60da      	str	r2, [r3, #12]
 8000d96:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d98:	2300      	movs	r3, #0
 8000d9a:	60bb      	str	r3, [r7, #8]
 8000d9c:	4b29      	ldr	r3, [pc, #164]	@ (8000e44 <SystemClock_Config+0xd0>)
 8000d9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000da0:	4a28      	ldr	r2, [pc, #160]	@ (8000e44 <SystemClock_Config+0xd0>)
 8000da2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000da6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000da8:	4b26      	ldr	r3, [pc, #152]	@ (8000e44 <SystemClock_Config+0xd0>)
 8000daa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000db0:	60bb      	str	r3, [r7, #8]
 8000db2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000db4:	2300      	movs	r3, #0
 8000db6:	607b      	str	r3, [r7, #4]
 8000db8:	4b23      	ldr	r3, [pc, #140]	@ (8000e48 <SystemClock_Config+0xd4>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000dc0:	4a21      	ldr	r2, [pc, #132]	@ (8000e48 <SystemClock_Config+0xd4>)
 8000dc2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000dc6:	6013      	str	r3, [r2, #0]
 8000dc8:	4b1f      	ldr	r3, [pc, #124]	@ (8000e48 <SystemClock_Config+0xd4>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000dd0:	607b      	str	r3, [r7, #4]
 8000dd2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000dd8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ddc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dde:	2302      	movs	r3, #2
 8000de0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000de2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000de6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 24;
 8000de8:	2318      	movs	r3, #24
 8000dea:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000dec:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000df0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000df2:	2304      	movs	r3, #4
 8000df4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000df6:	2307      	movs	r3, #7
 8000df8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dfa:	f107 0320 	add.w	r3, r7, #32
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f004 faee 	bl	80053e0 <HAL_RCC_OscConfig>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000e0a:	f000 fa01 	bl	8001210 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e0e:	230f      	movs	r3, #15
 8000e10:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e12:	2302      	movs	r3, #2
 8000e14:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e16:	2300      	movs	r3, #0
 8000e18:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e1a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e1e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e20:	2300      	movs	r3, #0
 8000e22:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e24:	f107 030c 	add.w	r3, r7, #12
 8000e28:	2102      	movs	r1, #2
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f004 fd50 	bl	80058d0 <HAL_RCC_ClockConfig>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000e36:	f000 f9eb 	bl	8001210 <Error_Handler>
  }
}
 8000e3a:	bf00      	nop
 8000e3c:	3750      	adds	r7, #80	@ 0x50
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	40023800 	.word	0x40023800
 8000e48:	40007000 	.word	0x40007000

08000e4c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b084      	sub	sp, #16
 8000e50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e52:	463b      	mov	r3, r7
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	605a      	str	r2, [r3, #4]
 8000e5a:	609a      	str	r2, [r3, #8]
 8000e5c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000e5e:	4b22      	ldr	r3, [pc, #136]	@ (8000ee8 <MX_ADC1_Init+0x9c>)
 8000e60:	4a22      	ldr	r2, [pc, #136]	@ (8000eec <MX_ADC1_Init+0xa0>)
 8000e62:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000e64:	4b20      	ldr	r3, [pc, #128]	@ (8000ee8 <MX_ADC1_Init+0x9c>)
 8000e66:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000e6a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8000e6c:	4b1e      	ldr	r3, [pc, #120]	@ (8000ee8 <MX_ADC1_Init+0x9c>)
 8000e6e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000e72:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000e74:	4b1c      	ldr	r3, [pc, #112]	@ (8000ee8 <MX_ADC1_Init+0x9c>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000e7a:	4b1b      	ldr	r3, [pc, #108]	@ (8000ee8 <MX_ADC1_Init+0x9c>)
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e80:	4b19      	ldr	r3, [pc, #100]	@ (8000ee8 <MX_ADC1_Init+0x9c>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e88:	4b17      	ldr	r3, [pc, #92]	@ (8000ee8 <MX_ADC1_Init+0x9c>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e8e:	4b16      	ldr	r3, [pc, #88]	@ (8000ee8 <MX_ADC1_Init+0x9c>)
 8000e90:	4a17      	ldr	r2, [pc, #92]	@ (8000ef0 <MX_ADC1_Init+0xa4>)
 8000e92:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e94:	4b14      	ldr	r3, [pc, #80]	@ (8000ee8 <MX_ADC1_Init+0x9c>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000e9a:	4b13      	ldr	r3, [pc, #76]	@ (8000ee8 <MX_ADC1_Init+0x9c>)
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ea0:	4b11      	ldr	r3, [pc, #68]	@ (8000ee8 <MX_ADC1_Init+0x9c>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ea8:	4b0f      	ldr	r3, [pc, #60]	@ (8000ee8 <MX_ADC1_Init+0x9c>)
 8000eaa:	2201      	movs	r2, #1
 8000eac:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000eae:	480e      	ldr	r0, [pc, #56]	@ (8000ee8 <MX_ADC1_Init+0x9c>)
 8000eb0:	f000 fcc2 	bl	8001838 <HAL_ADC_Init>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8000eba:	f000 f9a9 	bl	8001210 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000eca:	463b      	mov	r3, r7
 8000ecc:	4619      	mov	r1, r3
 8000ece:	4806      	ldr	r0, [pc, #24]	@ (8000ee8 <MX_ADC1_Init+0x9c>)
 8000ed0:	f000 fe42 	bl	8001b58 <HAL_ADC_ConfigChannel>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000eda:	f000 f999 	bl	8001210 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ede:	bf00      	nop
 8000ee0:	3710      	adds	r7, #16
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	2000021c 	.word	0x2000021c
 8000eec:	40012000 	.word	0x40012000
 8000ef0:	0f000001 	.word	0x0f000001

08000ef4 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000ef8:	4b13      	ldr	r3, [pc, #76]	@ (8000f48 <MX_I2S2_Init+0x54>)
 8000efa:	4a14      	ldr	r2, [pc, #80]	@ (8000f4c <MX_I2S2_Init+0x58>)
 8000efc:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000efe:	4b12      	ldr	r3, [pc, #72]	@ (8000f48 <MX_I2S2_Init+0x54>)
 8000f00:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f04:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_MSB;
 8000f06:	4b10      	ldr	r3, [pc, #64]	@ (8000f48 <MX_I2S2_Init+0x54>)
 8000f08:	2210      	movs	r2, #16
 8000f0a:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B_EXTENDED;
 8000f0c:	4b0e      	ldr	r3, [pc, #56]	@ (8000f48 <MX_I2S2_Init+0x54>)
 8000f0e:	2201      	movs	r2, #1
 8000f10:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000f12:	4b0d      	ldr	r3, [pc, #52]	@ (8000f48 <MX_I2S2_Init+0x54>)
 8000f14:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f18:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = freq;
 8000f1a:	4b0d      	ldr	r3, [pc, #52]	@ (8000f50 <MX_I2S2_Init+0x5c>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4a0a      	ldr	r2, [pc, #40]	@ (8000f48 <MX_I2S2_Init+0x54>)
 8000f20:	6153      	str	r3, [r2, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000f22:	4b09      	ldr	r3, [pc, #36]	@ (8000f48 <MX_I2S2_Init+0x54>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000f28:	4b07      	ldr	r3, [pc, #28]	@ (8000f48 <MX_I2S2_Init+0x54>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000f2e:	4b06      	ldr	r3, [pc, #24]	@ (8000f48 <MX_I2S2_Init+0x54>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000f34:	4804      	ldr	r0, [pc, #16]	@ (8000f48 <MX_I2S2_Init+0x54>)
 8000f36:	f001 ffff 	bl	8002f38 <HAL_I2S_Init>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <MX_I2S2_Init+0x50>
  {
    Error_Handler();
 8000f40:	f000 f966 	bl	8001210 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000f44:	bf00      	nop
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	20000264 	.word	0x20000264
 8000f4c:	40003800 	.word	0x40003800
 8000f50:	20000004 	.word	0x20000004

08000f54 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	607b      	str	r3, [r7, #4]
 8000f5e:	4b0c      	ldr	r3, [pc, #48]	@ (8000f90 <MX_DMA_Init+0x3c>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f62:	4a0b      	ldr	r2, [pc, #44]	@ (8000f90 <MX_DMA_Init+0x3c>)
 8000f64:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000f68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f6a:	4b09      	ldr	r3, [pc, #36]	@ (8000f90 <MX_DMA_Init+0x3c>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f6e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f72:	607b      	str	r3, [r7, #4]
 8000f74:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000f76:	2200      	movs	r2, #0
 8000f78:	2100      	movs	r1, #0
 8000f7a:	200f      	movs	r0, #15
 8000f7c:	f001 f8e5 	bl	800214a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000f80:	200f      	movs	r0, #15
 8000f82:	f001 f8fe 	bl	8002182 <HAL_NVIC_EnableIRQ>

}
 8000f86:	bf00      	nop
 8000f88:	3708      	adds	r7, #8
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	40023800 	.word	0x40023800

08000f94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b08a      	sub	sp, #40	@ 0x28
 8000f98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f9a:	f107 0314 	add.w	r3, r7, #20
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	601a      	str	r2, [r3, #0]
 8000fa2:	605a      	str	r2, [r3, #4]
 8000fa4:	609a      	str	r2, [r3, #8]
 8000fa6:	60da      	str	r2, [r3, #12]
 8000fa8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000faa:	2300      	movs	r3, #0
 8000fac:	613b      	str	r3, [r7, #16]
 8000fae:	4b35      	ldr	r3, [pc, #212]	@ (8001084 <MX_GPIO_Init+0xf0>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fb2:	4a34      	ldr	r2, [pc, #208]	@ (8001084 <MX_GPIO_Init+0xf0>)
 8000fb4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000fb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fba:	4b32      	ldr	r3, [pc, #200]	@ (8001084 <MX_GPIO_Init+0xf0>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000fc2:	613b      	str	r3, [r7, #16]
 8000fc4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	60fb      	str	r3, [r7, #12]
 8000fca:	4b2e      	ldr	r3, [pc, #184]	@ (8001084 <MX_GPIO_Init+0xf0>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fce:	4a2d      	ldr	r2, [pc, #180]	@ (8001084 <MX_GPIO_Init+0xf0>)
 8000fd0:	f043 0301 	orr.w	r3, r3, #1
 8000fd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fd6:	4b2b      	ldr	r3, [pc, #172]	@ (8001084 <MX_GPIO_Init+0xf0>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fda:	f003 0301 	and.w	r3, r3, #1
 8000fde:	60fb      	str	r3, [r7, #12]
 8000fe0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	60bb      	str	r3, [r7, #8]
 8000fe6:	4b27      	ldr	r3, [pc, #156]	@ (8001084 <MX_GPIO_Init+0xf0>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fea:	4a26      	ldr	r2, [pc, #152]	@ (8001084 <MX_GPIO_Init+0xf0>)
 8000fec:	f043 0302 	orr.w	r3, r3, #2
 8000ff0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ff2:	4b24      	ldr	r3, [pc, #144]	@ (8001084 <MX_GPIO_Init+0xf0>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ff6:	f003 0302 	and.w	r3, r3, #2
 8000ffa:	60bb      	str	r3, [r7, #8]
 8000ffc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ffe:	2300      	movs	r3, #0
 8001000:	607b      	str	r3, [r7, #4]
 8001002:	4b20      	ldr	r3, [pc, #128]	@ (8001084 <MX_GPIO_Init+0xf0>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001006:	4a1f      	ldr	r2, [pc, #124]	@ (8001084 <MX_GPIO_Init+0xf0>)
 8001008:	f043 0304 	orr.w	r3, r3, #4
 800100c:	6313      	str	r3, [r2, #48]	@ 0x30
 800100e:	4b1d      	ldr	r3, [pc, #116]	@ (8001084 <MX_GPIO_Init+0xf0>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001012:	f003 0304 	and.w	r3, r3, #4
 8001016:	607b      	str	r3, [r7, #4]
 8001018:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NCS_GPIO_Port, NCS_Pin, GPIO_PIN_SET);
 800101a:	2201      	movs	r2, #1
 800101c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001020:	4819      	ldr	r0, [pc, #100]	@ (8001088 <MX_GPIO_Init+0xf4>)
 8001022:	f001 ff6f 	bl	8002f04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CLOCK_GPIO_Port, CLOCK_Pin, GPIO_PIN_SET);
 8001026:	2201      	movs	r2, #1
 8001028:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800102c:	4817      	ldr	r0, [pc, #92]	@ (800108c <MX_GPIO_Init+0xf8>)
 800102e:	f001 ff69 	bl	8002f04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SDATA_GPIO_Port, SDATA_Pin, GPIO_PIN_RESET);
 8001032:	2200      	movs	r2, #0
 8001034:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001038:	4814      	ldr	r0, [pc, #80]	@ (800108c <MX_GPIO_Init+0xf8>)
 800103a:	f001 ff63 	bl	8002f04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : NCS_Pin */
  GPIO_InitStruct.Pin = NCS_Pin;
 800103e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001042:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001044:	2301      	movs	r3, #1
 8001046:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001048:	2300      	movs	r3, #0
 800104a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800104c:	2301      	movs	r3, #1
 800104e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NCS_GPIO_Port, &GPIO_InitStruct);
 8001050:	f107 0314 	add.w	r3, r7, #20
 8001054:	4619      	mov	r1, r3
 8001056:	480c      	ldr	r0, [pc, #48]	@ (8001088 <MX_GPIO_Init+0xf4>)
 8001058:	f001 fcec 	bl	8002a34 <HAL_GPIO_Init>

  /*Configure GPIO pins : CLOCK_Pin SDATA_Pin */
  GPIO_InitStruct.Pin = CLOCK_Pin|SDATA_Pin;
 800105c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001060:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001062:	2301      	movs	r3, #1
 8001064:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001066:	2300      	movs	r3, #0
 8001068:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800106a:	2301      	movs	r3, #1
 800106c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800106e:	f107 0314 	add.w	r3, r7, #20
 8001072:	4619      	mov	r1, r3
 8001074:	4805      	ldr	r0, [pc, #20]	@ (800108c <MX_GPIO_Init+0xf8>)
 8001076:	f001 fcdd 	bl	8002a34 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800107a:	bf00      	nop
 800107c:	3728      	adds	r7, #40	@ 0x28
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	40023800 	.word	0x40023800
 8001088:	40020000 	.word	0x40020000
 800108c:	40020800 	.word	0x40020800

08001090 <DAC_WRITE>:

/* USER CODE BEGIN 4 */

uint8_t DAC_WRITE(uint8_t addr, uint8_t data){
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	4603      	mov	r3, r0
 8001098:	460a      	mov	r2, r1
 800109a:	71fb      	strb	r3, [r7, #7]
 800109c:	4613      	mov	r3, r2
 800109e:	71bb      	strb	r3, [r7, #6]

	uint16_t buf = (addr << 8) + data;
 80010a0:	79fb      	ldrb	r3, [r7, #7]
 80010a2:	b29b      	uxth	r3, r3
 80010a4:	021b      	lsls	r3, r3, #8
 80010a6:	b29a      	uxth	r2, r3
 80010a8:	79bb      	ldrb	r3, [r7, #6]
 80010aa:	b29b      	uxth	r3, r3
 80010ac:	4413      	add	r3, r2
 80010ae:	81fb      	strh	r3, [r7, #14]

	customSPI(buf);
 80010b0:	89fb      	ldrh	r3, [r7, #14]
 80010b2:	4618      	mov	r0, r3
 80010b4:	f000 f818 	bl	80010e8 <customSPI>
	HAL_Delay(10);
 80010b8:	200a      	movs	r0, #10
 80010ba:	f000 fb99 	bl	80017f0 <HAL_Delay>

	return 0;
 80010be:	2300      	movs	r3, #0
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	3710      	adds	r7, #16
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}

080010c8 <DAC_INIT>:

void DAC_INIT(){
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0

	DAC_WRITE(16, 127);
 80010cc:	217f      	movs	r1, #127	@ 0x7f
 80010ce:	2010      	movs	r0, #16
 80010d0:	f7ff ffde 	bl	8001090 <DAC_WRITE>
	DAC_WRITE(17, 127);
 80010d4:	217f      	movs	r1, #127	@ 0x7f
 80010d6:	2011      	movs	r0, #17
 80010d8:	f7ff ffda 	bl	8001090 <DAC_WRITE>
	DAC_WRITE(18, 0);
 80010dc:	2100      	movs	r1, #0
 80010de:	2012      	movs	r0, #18
 80010e0:	f7ff ffd6 	bl	8001090 <DAC_WRITE>
}
 80010e4:	bf00      	nop
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <customSPI>:

void customSPI(uint16_t data){
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b086      	sub	sp, #24
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	4603      	mov	r3, r0
 80010f0:	80fb      	strh	r3, [r7, #6]

	for(int i = 0; i < 64; i++){
 80010f2:	2300      	movs	r3, #0
 80010f4:	617b      	str	r3, [r7, #20]
 80010f6:	e00e      	b.n	8001116 <customSPI+0x2e>
	HAL_GPIO_WritePin(CLOCK_GPIO_Port, CLOCK_Pin, 0);
 80010f8:	2200      	movs	r2, #0
 80010fa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80010fe:	4836      	ldr	r0, [pc, #216]	@ (80011d8 <customSPI+0xf0>)
 8001100:	f001 ff00 	bl	8002f04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CLOCK_GPIO_Port, CLOCK_Pin, 1);
 8001104:	2201      	movs	r2, #1
 8001106:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800110a:	4833      	ldr	r0, [pc, #204]	@ (80011d8 <customSPI+0xf0>)
 800110c:	f001 fefa 	bl	8002f04 <HAL_GPIO_WritePin>
	for(int i = 0; i < 64; i++){
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	3301      	adds	r3, #1
 8001114:	617b      	str	r3, [r7, #20]
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	2b3f      	cmp	r3, #63	@ 0x3f
 800111a:	dded      	ble.n	80010f8 <customSPI+0x10>
	}

	HAL_GPIO_WritePin(CLOCK_GPIO_Port, CLOCK_Pin, 0);
 800111c:	2200      	movs	r2, #0
 800111e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001122:	482d      	ldr	r0, [pc, #180]	@ (80011d8 <customSPI+0xf0>)
 8001124:	f001 feee 	bl	8002f04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(NCS_GPIO_Port, NCS_Pin, 0);
 8001128:	2200      	movs	r2, #0
 800112a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800112e:	482b      	ldr	r0, [pc, #172]	@ (80011dc <customSPI+0xf4>)
 8001130:	f001 fee8 	bl	8002f04 <HAL_GPIO_WritePin>
	for(int i = 0; i < 16; i++){
 8001134:	2300      	movs	r3, #0
 8001136:	613b      	str	r3, [r7, #16]
 8001138:	e025      	b.n	8001186 <customSPI+0x9e>
		if(data & (1 << (15-i))){
 800113a:	88fa      	ldrh	r2, [r7, #6]
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	f1c3 030f 	rsb	r3, r3, #15
 8001142:	fa42 f303 	asr.w	r3, r2, r3
 8001146:	f003 0301 	and.w	r3, r3, #1
 800114a:	2b00      	cmp	r3, #0
 800114c:	d006      	beq.n	800115c <customSPI+0x74>
			HAL_GPIO_WritePin(SDATA_GPIO_Port, SDATA_Pin, 1);
 800114e:	2201      	movs	r2, #1
 8001150:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001154:	4820      	ldr	r0, [pc, #128]	@ (80011d8 <customSPI+0xf0>)
 8001156:	f001 fed5 	bl	8002f04 <HAL_GPIO_WritePin>
 800115a:	e005      	b.n	8001168 <customSPI+0x80>
		}
		else{
			HAL_GPIO_WritePin(SDATA_GPIO_Port, SDATA_Pin, 0);
 800115c:	2200      	movs	r2, #0
 800115e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001162:	481d      	ldr	r0, [pc, #116]	@ (80011d8 <customSPI+0xf0>)
 8001164:	f001 fece 	bl	8002f04 <HAL_GPIO_WritePin>
		}
		HAL_GPIO_WritePin(CLOCK_GPIO_Port, CLOCK_Pin, 1);
 8001168:	2201      	movs	r2, #1
 800116a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800116e:	481a      	ldr	r0, [pc, #104]	@ (80011d8 <customSPI+0xf0>)
 8001170:	f001 fec8 	bl	8002f04 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CLOCK_GPIO_Port, CLOCK_Pin, 0);
 8001174:	2200      	movs	r2, #0
 8001176:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800117a:	4817      	ldr	r0, [pc, #92]	@ (80011d8 <customSPI+0xf0>)
 800117c:	f001 fec2 	bl	8002f04 <HAL_GPIO_WritePin>
	for(int i = 0; i < 16; i++){
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	3301      	adds	r3, #1
 8001184:	613b      	str	r3, [r7, #16]
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	2b0f      	cmp	r3, #15
 800118a:	ddd6      	ble.n	800113a <customSPI+0x52>
	}
	HAL_GPIO_WritePin(NCS_GPIO_Port, NCS_Pin, 1);
 800118c:	2201      	movs	r2, #1
 800118e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001192:	4812      	ldr	r0, [pc, #72]	@ (80011dc <customSPI+0xf4>)
 8001194:	f001 feb6 	bl	8002f04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CLOCK_GPIO_Port, CLOCK_Pin, 1);
 8001198:	2201      	movs	r2, #1
 800119a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800119e:	480e      	ldr	r0, [pc, #56]	@ (80011d8 <customSPI+0xf0>)
 80011a0:	f001 feb0 	bl	8002f04 <HAL_GPIO_WritePin>

	for(int i = 0; i < 64; i++){
 80011a4:	2300      	movs	r3, #0
 80011a6:	60fb      	str	r3, [r7, #12]
 80011a8:	e00e      	b.n	80011c8 <customSPI+0xe0>
		HAL_GPIO_WritePin(CLOCK_GPIO_Port, CLOCK_Pin, 0);
 80011aa:	2200      	movs	r2, #0
 80011ac:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80011b0:	4809      	ldr	r0, [pc, #36]	@ (80011d8 <customSPI+0xf0>)
 80011b2:	f001 fea7 	bl	8002f04 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CLOCK_GPIO_Port, CLOCK_Pin, 1);
 80011b6:	2201      	movs	r2, #1
 80011b8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80011bc:	4806      	ldr	r0, [pc, #24]	@ (80011d8 <customSPI+0xf0>)
 80011be:	f001 fea1 	bl	8002f04 <HAL_GPIO_WritePin>
	for(int i = 0; i < 64; i++){
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	3301      	adds	r3, #1
 80011c6:	60fb      	str	r3, [r7, #12]
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	2b3f      	cmp	r3, #63	@ 0x3f
 80011cc:	dded      	ble.n	80011aa <customSPI+0xc2>
	}

}
 80011ce:	bf00      	nop
 80011d0:	bf00      	nop
 80011d2:	3718      	adds	r7, #24
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	40020800 	.word	0x40020800
 80011dc:	40020000 	.word	0x40020000

080011e0 <getPllValues>:


void getPllValues(uint32_t* pllsn, uint32_t* pllsr){
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	6039      	str	r1, [r7, #0]
	*pllsn = mainSN;
 80011ea:	4b07      	ldr	r3, [pc, #28]	@ (8001208 <getPllValues+0x28>)
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	601a      	str	r2, [r3, #0]
	*pllsr = mainSR;
 80011f2:	4b06      	ldr	r3, [pc, #24]	@ (800120c <getPllValues+0x2c>)
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	601a      	str	r2, [r3, #0]
}
 80011fa:	bf00      	nop
 80011fc:	370c      	adds	r7, #12
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	20000010 	.word	0x20000010
 800120c:	20000014 	.word	0x20000014

08001210 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001214:	b672      	cpsid	i
}
 8001216:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001218:	bf00      	nop
 800121a:	e7fd      	b.n	8001218 <Error_Handler+0x8>

0800121c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	607b      	str	r3, [r7, #4]
 8001226:	4b10      	ldr	r3, [pc, #64]	@ (8001268 <HAL_MspInit+0x4c>)
 8001228:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800122a:	4a0f      	ldr	r2, [pc, #60]	@ (8001268 <HAL_MspInit+0x4c>)
 800122c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001230:	6453      	str	r3, [r2, #68]	@ 0x44
 8001232:	4b0d      	ldr	r3, [pc, #52]	@ (8001268 <HAL_MspInit+0x4c>)
 8001234:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001236:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800123a:	607b      	str	r3, [r7, #4]
 800123c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	603b      	str	r3, [r7, #0]
 8001242:	4b09      	ldr	r3, [pc, #36]	@ (8001268 <HAL_MspInit+0x4c>)
 8001244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001246:	4a08      	ldr	r2, [pc, #32]	@ (8001268 <HAL_MspInit+0x4c>)
 8001248:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800124c:	6413      	str	r3, [r2, #64]	@ 0x40
 800124e:	4b06      	ldr	r3, [pc, #24]	@ (8001268 <HAL_MspInit+0x4c>)
 8001250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001252:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001256:	603b      	str	r3, [r7, #0]
 8001258:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800125a:	bf00      	nop
 800125c:	370c      	adds	r7, #12
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	40023800 	.word	0x40023800

0800126c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b08a      	sub	sp, #40	@ 0x28
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001274:	f107 0314 	add.w	r3, r7, #20
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]
 800127c:	605a      	str	r2, [r3, #4]
 800127e:	609a      	str	r2, [r3, #8]
 8001280:	60da      	str	r2, [r3, #12]
 8001282:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a17      	ldr	r2, [pc, #92]	@ (80012e8 <HAL_ADC_MspInit+0x7c>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d127      	bne.n	80012de <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	613b      	str	r3, [r7, #16]
 8001292:	4b16      	ldr	r3, [pc, #88]	@ (80012ec <HAL_ADC_MspInit+0x80>)
 8001294:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001296:	4a15      	ldr	r2, [pc, #84]	@ (80012ec <HAL_ADC_MspInit+0x80>)
 8001298:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800129c:	6453      	str	r3, [r2, #68]	@ 0x44
 800129e:	4b13      	ldr	r3, [pc, #76]	@ (80012ec <HAL_ADC_MspInit+0x80>)
 80012a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012a6:	613b      	str	r3, [r7, #16]
 80012a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012aa:	2300      	movs	r3, #0
 80012ac:	60fb      	str	r3, [r7, #12]
 80012ae:	4b0f      	ldr	r3, [pc, #60]	@ (80012ec <HAL_ADC_MspInit+0x80>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b2:	4a0e      	ldr	r2, [pc, #56]	@ (80012ec <HAL_ADC_MspInit+0x80>)
 80012b4:	f043 0301 	orr.w	r3, r3, #1
 80012b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ba:	4b0c      	ldr	r3, [pc, #48]	@ (80012ec <HAL_ADC_MspInit+0x80>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012be:	f003 0301 	and.w	r3, r3, #1
 80012c2:	60fb      	str	r3, [r7, #12]
 80012c4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80012c6:	2304      	movs	r3, #4
 80012c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012ca:	2303      	movs	r3, #3
 80012cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ce:	2300      	movs	r3, #0
 80012d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d2:	f107 0314 	add.w	r3, r7, #20
 80012d6:	4619      	mov	r1, r3
 80012d8:	4805      	ldr	r0, [pc, #20]	@ (80012f0 <HAL_ADC_MspInit+0x84>)
 80012da:	f001 fbab 	bl	8002a34 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80012de:	bf00      	nop
 80012e0:	3728      	adds	r7, #40	@ 0x28
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	40012000 	.word	0x40012000
 80012ec:	40023800 	.word	0x40023800
 80012f0:	40020000 	.word	0x40020000

080012f4 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b092      	sub	sp, #72	@ 0x48
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012fc:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
 8001304:	605a      	str	r2, [r3, #4]
 8001306:	609a      	str	r2, [r3, #8]
 8001308:	60da      	str	r2, [r3, #12]
 800130a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800130c:	f107 0320 	add.w	r3, r7, #32
 8001310:	2200      	movs	r2, #0
 8001312:	601a      	str	r2, [r3, #0]
 8001314:	605a      	str	r2, [r3, #4]
 8001316:	609a      	str	r2, [r3, #8]
 8001318:	60da      	str	r2, [r3, #12]
 800131a:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a4d      	ldr	r2, [pc, #308]	@ (8001458 <HAL_I2S_MspInit+0x164>)
 8001322:	4293      	cmp	r3, r2
 8001324:	f040 8094 	bne.w	8001450 <HAL_I2S_MspInit+0x15c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */
  uint32_t pllsn, pllsr;
  getPllValues(&pllsn, &pllsr);
 8001328:	f107 0218 	add.w	r2, r7, #24
 800132c:	f107 031c 	add.w	r3, r7, #28
 8001330:	4611      	mov	r1, r2
 8001332:	4618      	mov	r0, r3
 8001334:	f7ff ff54 	bl	80011e0 <getPllValues>
  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001338:	2301      	movs	r3, #1
 800133a:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = pllsn;
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLI2S.PLLI2SR = pllsr;
 8001340:	69bb      	ldr	r3, [r7, #24]
 8001342:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001344:	f107 0320 	add.w	r3, r7, #32
 8001348:	4618      	mov	r0, r3
 800134a:	f004 fc79 	bl	8005c40 <HAL_RCCEx_PeriphCLKConfig>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <HAL_I2S_MspInit+0x64>
    {
      Error_Handler();
 8001354:	f7ff ff5c 	bl	8001210 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001358:	2300      	movs	r3, #0
 800135a:	617b      	str	r3, [r7, #20]
 800135c:	4b3f      	ldr	r3, [pc, #252]	@ (800145c <HAL_I2S_MspInit+0x168>)
 800135e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001360:	4a3e      	ldr	r2, [pc, #248]	@ (800145c <HAL_I2S_MspInit+0x168>)
 8001362:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001366:	6413      	str	r3, [r2, #64]	@ 0x40
 8001368:	4b3c      	ldr	r3, [pc, #240]	@ (800145c <HAL_I2S_MspInit+0x168>)
 800136a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800136c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001370:	617b      	str	r3, [r7, #20]
 8001372:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001374:	2300      	movs	r3, #0
 8001376:	613b      	str	r3, [r7, #16]
 8001378:	4b38      	ldr	r3, [pc, #224]	@ (800145c <HAL_I2S_MspInit+0x168>)
 800137a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800137c:	4a37      	ldr	r2, [pc, #220]	@ (800145c <HAL_I2S_MspInit+0x168>)
 800137e:	f043 0302 	orr.w	r3, r3, #2
 8001382:	6313      	str	r3, [r2, #48]	@ 0x30
 8001384:	4b35      	ldr	r3, [pc, #212]	@ (800145c <HAL_I2S_MspInit+0x168>)
 8001386:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001388:	f003 0302 	and.w	r3, r3, #2
 800138c:	613b      	str	r3, [r7, #16]
 800138e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001390:	2300      	movs	r3, #0
 8001392:	60fb      	str	r3, [r7, #12]
 8001394:	4b31      	ldr	r3, [pc, #196]	@ (800145c <HAL_I2S_MspInit+0x168>)
 8001396:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001398:	4a30      	ldr	r2, [pc, #192]	@ (800145c <HAL_I2S_MspInit+0x168>)
 800139a:	f043 0304 	orr.w	r3, r3, #4
 800139e:	6313      	str	r3, [r2, #48]	@ 0x30
 80013a0:	4b2e      	ldr	r3, [pc, #184]	@ (800145c <HAL_I2S_MspInit+0x168>)
 80013a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a4:	f003 0304 	and.w	r3, r3, #4
 80013a8:	60fb      	str	r3, [r7, #12]
 80013aa:	68fb      	ldr	r3, [r7, #12]
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    PC6     ------> I2S2_MCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80013ac:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 80013b0:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b2:	2302      	movs	r3, #2
 80013b4:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b6:	2300      	movs	r3, #0
 80013b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ba:	2300      	movs	r3, #0
 80013bc:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80013be:	2305      	movs	r3, #5
 80013c0:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013c2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80013c6:	4619      	mov	r1, r3
 80013c8:	4825      	ldr	r0, [pc, #148]	@ (8001460 <HAL_I2S_MspInit+0x16c>)
 80013ca:	f001 fb33 	bl	8002a34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80013ce:	2340      	movs	r3, #64	@ 0x40
 80013d0:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d2:	2302      	movs	r3, #2
 80013d4:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d6:	2300      	movs	r3, #0
 80013d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013da:	2300      	movs	r3, #0
 80013dc:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80013de:	2305      	movs	r3, #5
 80013e0:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013e2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80013e6:	4619      	mov	r1, r3
 80013e8:	481e      	ldr	r0, [pc, #120]	@ (8001464 <HAL_I2S_MspInit+0x170>)
 80013ea:	f001 fb23 	bl	8002a34 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 80013ee:	4b1e      	ldr	r3, [pc, #120]	@ (8001468 <HAL_I2S_MspInit+0x174>)
 80013f0:	4a1e      	ldr	r2, [pc, #120]	@ (800146c <HAL_I2S_MspInit+0x178>)
 80013f2:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 80013f4:	4b1c      	ldr	r3, [pc, #112]	@ (8001468 <HAL_I2S_MspInit+0x174>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80013fa:	4b1b      	ldr	r3, [pc, #108]	@ (8001468 <HAL_I2S_MspInit+0x174>)
 80013fc:	2240      	movs	r2, #64	@ 0x40
 80013fe:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001400:	4b19      	ldr	r3, [pc, #100]	@ (8001468 <HAL_I2S_MspInit+0x174>)
 8001402:	2200      	movs	r2, #0
 8001404:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001406:	4b18      	ldr	r3, [pc, #96]	@ (8001468 <HAL_I2S_MspInit+0x174>)
 8001408:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800140c:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800140e:	4b16      	ldr	r3, [pc, #88]	@ (8001468 <HAL_I2S_MspInit+0x174>)
 8001410:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001414:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001416:	4b14      	ldr	r3, [pc, #80]	@ (8001468 <HAL_I2S_MspInit+0x174>)
 8001418:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800141c:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 800141e:	4b12      	ldr	r3, [pc, #72]	@ (8001468 <HAL_I2S_MspInit+0x174>)
 8001420:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001424:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001426:	4b10      	ldr	r3, [pc, #64]	@ (8001468 <HAL_I2S_MspInit+0x174>)
 8001428:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800142c:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800142e:	4b0e      	ldr	r3, [pc, #56]	@ (8001468 <HAL_I2S_MspInit+0x174>)
 8001430:	2200      	movs	r2, #0
 8001432:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001434:	480c      	ldr	r0, [pc, #48]	@ (8001468 <HAL_I2S_MspInit+0x174>)
 8001436:	f000 febf 	bl	80021b8 <HAL_DMA_Init>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <HAL_I2S_MspInit+0x150>
    {
      Error_Handler();
 8001440:	f7ff fee6 	bl	8001210 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	4a08      	ldr	r2, [pc, #32]	@ (8001468 <HAL_I2S_MspInit+0x174>)
 8001448:	639a      	str	r2, [r3, #56]	@ 0x38
 800144a:	4a07      	ldr	r2, [pc, #28]	@ (8001468 <HAL_I2S_MspInit+0x174>)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8001450:	bf00      	nop
 8001452:	3748      	adds	r7, #72	@ 0x48
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	40003800 	.word	0x40003800
 800145c:	40023800 	.word	0x40023800
 8001460:	40020400 	.word	0x40020400
 8001464:	40020800 	.word	0x40020800
 8001468:	200002ac 	.word	0x200002ac
 800146c:	40026070 	.word	0x40026070

08001470 <HAL_I2S_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspDeInit(I2S_HandleTypeDef* hi2s)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance==SPI2)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a0d      	ldr	r2, [pc, #52]	@ (80014b4 <HAL_I2S_MspDeInit+0x44>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d113      	bne.n	80014aa <HAL_I2S_MspDeInit+0x3a>
  {
  /* USER CODE BEGIN SPI2_MspDeInit 0 */

  /* USER CODE END SPI2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI2_CLK_DISABLE();
 8001482:	4b0d      	ldr	r3, [pc, #52]	@ (80014b8 <HAL_I2S_MspDeInit+0x48>)
 8001484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001486:	4a0c      	ldr	r2, [pc, #48]	@ (80014b8 <HAL_I2S_MspDeInit+0x48>)
 8001488:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800148c:	6413      	str	r3, [r2, #64]	@ 0x40
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    PC6     ------> I2S2_MCK
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15);
 800148e:	f44f 4130 	mov.w	r1, #45056	@ 0xb000
 8001492:	480a      	ldr	r0, [pc, #40]	@ (80014bc <HAL_I2S_MspDeInit+0x4c>)
 8001494:	f001 fc52 	bl	8002d3c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_6);
 8001498:	2140      	movs	r1, #64	@ 0x40
 800149a:	4809      	ldr	r0, [pc, #36]	@ (80014c0 <HAL_I2S_MspDeInit+0x50>)
 800149c:	f001 fc4e 	bl	8002d3c <HAL_GPIO_DeInit>

    /* I2S2 DMA DeInit */
    HAL_DMA_DeInit(hi2s->hdmatx);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80014a4:	4618      	mov	r0, r3
 80014a6:	f000 ff35 	bl	8002314 <HAL_DMA_DeInit>
  /* USER CODE BEGIN SPI2_MspDeInit 1 */

  /* USER CODE END SPI2_MspDeInit 1 */
  }

}
 80014aa:	bf00      	nop
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	40003800 	.word	0x40003800
 80014b8:	40023800 	.word	0x40023800
 80014bc:	40020400 	.word	0x40020400
 80014c0:	40020800 	.word	0x40020800

080014c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014c8:	bf00      	nop
 80014ca:	e7fd      	b.n	80014c8 <NMI_Handler+0x4>

080014cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014d0:	bf00      	nop
 80014d2:	e7fd      	b.n	80014d0 <HardFault_Handler+0x4>

080014d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014d8:	bf00      	nop
 80014da:	e7fd      	b.n	80014d8 <MemManage_Handler+0x4>

080014dc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014e0:	bf00      	nop
 80014e2:	e7fd      	b.n	80014e0 <BusFault_Handler+0x4>

080014e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014e8:	bf00      	nop
 80014ea:	e7fd      	b.n	80014e8 <UsageFault_Handler+0x4>

080014ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014f0:	bf00      	nop
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr

080014fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014fa:	b480      	push	{r7}
 80014fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014fe:	bf00      	nop
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr

08001508 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800150c:	bf00      	nop
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr

08001516 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001516:	b580      	push	{r7, lr}
 8001518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800151a:	f000 f949 	bl	80017b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800151e:	bf00      	nop
 8001520:	bd80      	pop	{r7, pc}
	...

08001524 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001528:	4802      	ldr	r0, [pc, #8]	@ (8001534 <DMA1_Stream4_IRQHandler+0x10>)
 800152a:	f001 f819 	bl	8002560 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800152e:	bf00      	nop
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	200002ac 	.word	0x200002ac

08001538 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800153c:	4802      	ldr	r0, [pc, #8]	@ (8001548 <OTG_FS_IRQHandler+0x10>)
 800153e:	f002 fe09 	bl	8004154 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001542:	bf00      	nop
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	20000f7c 	.word	0x20000f7c

0800154c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b086      	sub	sp, #24
 8001550:	af00      	add	r7, sp, #0
 8001552:	60f8      	str	r0, [r7, #12]
 8001554:	60b9      	str	r1, [r7, #8]
 8001556:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001558:	2300      	movs	r3, #0
 800155a:	617b      	str	r3, [r7, #20]
 800155c:	e00a      	b.n	8001574 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800155e:	f3af 8000 	nop.w
 8001562:	4601      	mov	r1, r0
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	1c5a      	adds	r2, r3, #1
 8001568:	60ba      	str	r2, [r7, #8]
 800156a:	b2ca      	uxtb	r2, r1
 800156c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	3301      	adds	r3, #1
 8001572:	617b      	str	r3, [r7, #20]
 8001574:	697a      	ldr	r2, [r7, #20]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	429a      	cmp	r2, r3
 800157a:	dbf0      	blt.n	800155e <_read+0x12>
  }

  return len;
 800157c:	687b      	ldr	r3, [r7, #4]
}
 800157e:	4618      	mov	r0, r3
 8001580:	3718      	adds	r7, #24
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}

08001586 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001586:	b580      	push	{r7, lr}
 8001588:	b086      	sub	sp, #24
 800158a:	af00      	add	r7, sp, #0
 800158c:	60f8      	str	r0, [r7, #12]
 800158e:	60b9      	str	r1, [r7, #8]
 8001590:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001592:	2300      	movs	r3, #0
 8001594:	617b      	str	r3, [r7, #20]
 8001596:	e009      	b.n	80015ac <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	1c5a      	adds	r2, r3, #1
 800159c:	60ba      	str	r2, [r7, #8]
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	4618      	mov	r0, r3
 80015a2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	3301      	adds	r3, #1
 80015aa:	617b      	str	r3, [r7, #20]
 80015ac:	697a      	ldr	r2, [r7, #20]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	429a      	cmp	r2, r3
 80015b2:	dbf1      	blt.n	8001598 <_write+0x12>
  }
  return len;
 80015b4:	687b      	ldr	r3, [r7, #4]
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3718      	adds	r7, #24
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}

080015be <_close>:

int _close(int file)
{
 80015be:	b480      	push	{r7}
 80015c0:	b083      	sub	sp, #12
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80015c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	370c      	adds	r7, #12
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr

080015d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015d6:	b480      	push	{r7}
 80015d8:	b083      	sub	sp, #12
 80015da:	af00      	add	r7, sp, #0
 80015dc:	6078      	str	r0, [r7, #4]
 80015de:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80015e6:	605a      	str	r2, [r3, #4]
  return 0;
 80015e8:	2300      	movs	r3, #0
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	370c      	adds	r7, #12
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr

080015f6 <_isatty>:

int _isatty(int file)
{
 80015f6:	b480      	push	{r7}
 80015f8:	b083      	sub	sp, #12
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80015fe:	2301      	movs	r3, #1
}
 8001600:	4618      	mov	r0, r3
 8001602:	370c      	adds	r7, #12
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr

0800160c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800160c:	b480      	push	{r7}
 800160e:	b085      	sub	sp, #20
 8001610:	af00      	add	r7, sp, #0
 8001612:	60f8      	str	r0, [r7, #12]
 8001614:	60b9      	str	r1, [r7, #8]
 8001616:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001618:	2300      	movs	r3, #0
}
 800161a:	4618      	mov	r0, r3
 800161c:	3714      	adds	r7, #20
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
	...

08001628 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b086      	sub	sp, #24
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001630:	4a14      	ldr	r2, [pc, #80]	@ (8001684 <_sbrk+0x5c>)
 8001632:	4b15      	ldr	r3, [pc, #84]	@ (8001688 <_sbrk+0x60>)
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800163c:	4b13      	ldr	r3, [pc, #76]	@ (800168c <_sbrk+0x64>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d102      	bne.n	800164a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001644:	4b11      	ldr	r3, [pc, #68]	@ (800168c <_sbrk+0x64>)
 8001646:	4a12      	ldr	r2, [pc, #72]	@ (8001690 <_sbrk+0x68>)
 8001648:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800164a:	4b10      	ldr	r3, [pc, #64]	@ (800168c <_sbrk+0x64>)
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	4413      	add	r3, r2
 8001652:	693a      	ldr	r2, [r7, #16]
 8001654:	429a      	cmp	r2, r3
 8001656:	d207      	bcs.n	8001668 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001658:	f008 ff00 	bl	800a45c <__errno>
 800165c:	4603      	mov	r3, r0
 800165e:	220c      	movs	r2, #12
 8001660:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001662:	f04f 33ff 	mov.w	r3, #4294967295
 8001666:	e009      	b.n	800167c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001668:	4b08      	ldr	r3, [pc, #32]	@ (800168c <_sbrk+0x64>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800166e:	4b07      	ldr	r3, [pc, #28]	@ (800168c <_sbrk+0x64>)
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4413      	add	r3, r2
 8001676:	4a05      	ldr	r2, [pc, #20]	@ (800168c <_sbrk+0x64>)
 8001678:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800167a:	68fb      	ldr	r3, [r7, #12]
}
 800167c:	4618      	mov	r0, r3
 800167e:	3718      	adds	r7, #24
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	20010000 	.word	0x20010000
 8001688:	00000400 	.word	0x00000400
 800168c:	20000a94 	.word	0x20000a94
 8001690:	20007248 	.word	0x20007248

08001694 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001698:	4b06      	ldr	r3, [pc, #24]	@ (80016b4 <SystemInit+0x20>)
 800169a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800169e:	4a05      	ldr	r2, [pc, #20]	@ (80016b4 <SystemInit+0x20>)
 80016a0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016a4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016a8:	bf00      	nop
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	e000ed00 	.word	0xe000ed00

080016b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80016b8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80016f0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80016bc:	f7ff ffea 	bl	8001694 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016c0:	480c      	ldr	r0, [pc, #48]	@ (80016f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80016c2:	490d      	ldr	r1, [pc, #52]	@ (80016f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80016c4:	4a0d      	ldr	r2, [pc, #52]	@ (80016fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80016c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016c8:	e002      	b.n	80016d0 <LoopCopyDataInit>

080016ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016ce:	3304      	adds	r3, #4

080016d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016d4:	d3f9      	bcc.n	80016ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001700 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80016d8:	4c0a      	ldr	r4, [pc, #40]	@ (8001704 <LoopFillZerobss+0x22>)
  movs r3, #0
 80016da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016dc:	e001      	b.n	80016e2 <LoopFillZerobss>

080016de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016e0:	3204      	adds	r2, #4

080016e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016e4:	d3fb      	bcc.n	80016de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016e6:	f008 febf 	bl	800a468 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016ea:	f7ff fa21 	bl	8000b30 <main>
  bx  lr    
 80016ee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80016f0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80016f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016f8:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80016fc:	0800afd0 	.word	0x0800afd0
  ldr r2, =_sbss
 8001700:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001704:	20007244 	.word	0x20007244

08001708 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001708:	e7fe      	b.n	8001708 <ADC_IRQHandler>
	...

0800170c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001710:	4b0e      	ldr	r3, [pc, #56]	@ (800174c <HAL_Init+0x40>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a0d      	ldr	r2, [pc, #52]	@ (800174c <HAL_Init+0x40>)
 8001716:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800171a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800171c:	4b0b      	ldr	r3, [pc, #44]	@ (800174c <HAL_Init+0x40>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a0a      	ldr	r2, [pc, #40]	@ (800174c <HAL_Init+0x40>)
 8001722:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001726:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001728:	4b08      	ldr	r3, [pc, #32]	@ (800174c <HAL_Init+0x40>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a07      	ldr	r2, [pc, #28]	@ (800174c <HAL_Init+0x40>)
 800172e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001732:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001734:	2003      	movs	r0, #3
 8001736:	f000 fcfd 	bl	8002134 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800173a:	200f      	movs	r0, #15
 800173c:	f000 f808 	bl	8001750 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001740:	f7ff fd6c 	bl	800121c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001744:	2300      	movs	r3, #0
}
 8001746:	4618      	mov	r0, r3
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	40023c00 	.word	0x40023c00

08001750 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001758:	4b12      	ldr	r3, [pc, #72]	@ (80017a4 <HAL_InitTick+0x54>)
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	4b12      	ldr	r3, [pc, #72]	@ (80017a8 <HAL_InitTick+0x58>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	4619      	mov	r1, r3
 8001762:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001766:	fbb3 f3f1 	udiv	r3, r3, r1
 800176a:	fbb2 f3f3 	udiv	r3, r2, r3
 800176e:	4618      	mov	r0, r3
 8001770:	f000 fd15 	bl	800219e <HAL_SYSTICK_Config>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e00e      	b.n	800179c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2b0f      	cmp	r3, #15
 8001782:	d80a      	bhi.n	800179a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001784:	2200      	movs	r2, #0
 8001786:	6879      	ldr	r1, [r7, #4]
 8001788:	f04f 30ff 	mov.w	r0, #4294967295
 800178c:	f000 fcdd 	bl	800214a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001790:	4a06      	ldr	r2, [pc, #24]	@ (80017ac <HAL_InitTick+0x5c>)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001796:	2300      	movs	r3, #0
 8001798:	e000      	b.n	800179c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
}
 800179c:	4618      	mov	r0, r3
 800179e:	3708      	adds	r7, #8
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	20000018 	.word	0x20000018
 80017a8:	20000020 	.word	0x20000020
 80017ac:	2000001c 	.word	0x2000001c

080017b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017b4:	4b06      	ldr	r3, [pc, #24]	@ (80017d0 <HAL_IncTick+0x20>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	461a      	mov	r2, r3
 80017ba:	4b06      	ldr	r3, [pc, #24]	@ (80017d4 <HAL_IncTick+0x24>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4413      	add	r3, r2
 80017c0:	4a04      	ldr	r2, [pc, #16]	@ (80017d4 <HAL_IncTick+0x24>)
 80017c2:	6013      	str	r3, [r2, #0]
}
 80017c4:	bf00      	nop
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	20000020 	.word	0x20000020
 80017d4:	20000a98 	.word	0x20000a98

080017d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  return uwTick;
 80017dc:	4b03      	ldr	r3, [pc, #12]	@ (80017ec <HAL_GetTick+0x14>)
 80017de:	681b      	ldr	r3, [r3, #0]
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	20000a98 	.word	0x20000a98

080017f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017f8:	f7ff ffee 	bl	80017d8 <HAL_GetTick>
 80017fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001808:	d005      	beq.n	8001816 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800180a:	4b0a      	ldr	r3, [pc, #40]	@ (8001834 <HAL_Delay+0x44>)
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	461a      	mov	r2, r3
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	4413      	add	r3, r2
 8001814:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001816:	bf00      	nop
 8001818:	f7ff ffde 	bl	80017d8 <HAL_GetTick>
 800181c:	4602      	mov	r2, r0
 800181e:	68bb      	ldr	r3, [r7, #8]
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	68fa      	ldr	r2, [r7, #12]
 8001824:	429a      	cmp	r2, r3
 8001826:	d8f7      	bhi.n	8001818 <HAL_Delay+0x28>
  {
  }
}
 8001828:	bf00      	nop
 800182a:	bf00      	nop
 800182c:	3710      	adds	r7, #16
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	20000020 	.word	0x20000020

08001838 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001840:	2300      	movs	r3, #0
 8001842:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d101      	bne.n	800184e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e033      	b.n	80018b6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001852:	2b00      	cmp	r3, #0
 8001854:	d109      	bne.n	800186a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	f7ff fd08 	bl	800126c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2200      	movs	r2, #0
 8001860:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2200      	movs	r2, #0
 8001866:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800186e:	f003 0310 	and.w	r3, r3, #16
 8001872:	2b00      	cmp	r3, #0
 8001874:	d118      	bne.n	80018a8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800187a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800187e:	f023 0302 	bic.w	r3, r3, #2
 8001882:	f043 0202 	orr.w	r2, r3, #2
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f000 fa86 	bl	8001d9c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2200      	movs	r2, #0
 8001894:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800189a:	f023 0303 	bic.w	r3, r3, #3
 800189e:	f043 0201 	orr.w	r2, r3, #1
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	641a      	str	r2, [r3, #64]	@ 0x40
 80018a6:	e001      	b.n	80018ac <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2200      	movs	r2, #0
 80018b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80018b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3710      	adds	r7, #16
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
	...

080018c0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b085      	sub	sp, #20
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80018c8:	2300      	movs	r3, #0
 80018ca:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80018d2:	2b01      	cmp	r3, #1
 80018d4:	d101      	bne.n	80018da <HAL_ADC_Start+0x1a>
 80018d6:	2302      	movs	r3, #2
 80018d8:	e097      	b.n	8001a0a <HAL_ADC_Start+0x14a>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2201      	movs	r2, #1
 80018de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	f003 0301 	and.w	r3, r3, #1
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d018      	beq.n	8001922 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	689a      	ldr	r2, [r3, #8]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f042 0201 	orr.w	r2, r2, #1
 80018fe:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001900:	4b45      	ldr	r3, [pc, #276]	@ (8001a18 <HAL_ADC_Start+0x158>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a45      	ldr	r2, [pc, #276]	@ (8001a1c <HAL_ADC_Start+0x15c>)
 8001906:	fba2 2303 	umull	r2, r3, r2, r3
 800190a:	0c9a      	lsrs	r2, r3, #18
 800190c:	4613      	mov	r3, r2
 800190e:	005b      	lsls	r3, r3, #1
 8001910:	4413      	add	r3, r2
 8001912:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001914:	e002      	b.n	800191c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001916:	68bb      	ldr	r3, [r7, #8]
 8001918:	3b01      	subs	r3, #1
 800191a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d1f9      	bne.n	8001916 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	f003 0301 	and.w	r3, r3, #1
 800192c:	2b01      	cmp	r3, #1
 800192e:	d15f      	bne.n	80019f0 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001934:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001938:	f023 0301 	bic.w	r3, r3, #1
 800193c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800194e:	2b00      	cmp	r3, #0
 8001950:	d007      	beq.n	8001962 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001956:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800195a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001966:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800196a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800196e:	d106      	bne.n	800197e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001974:	f023 0206 	bic.w	r2, r3, #6
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	645a      	str	r2, [r3, #68]	@ 0x44
 800197c:	e002      	b.n	8001984 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2200      	movs	r2, #0
 8001982:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2200      	movs	r2, #0
 8001988:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800198c:	4b24      	ldr	r3, [pc, #144]	@ (8001a20 <HAL_ADC_Start+0x160>)
 800198e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001998:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	f003 031f 	and.w	r3, r3, #31
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d10f      	bne.n	80019c6 <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d129      	bne.n	8001a08 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	689a      	ldr	r2, [r3, #8]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80019c2:	609a      	str	r2, [r3, #8]
 80019c4:	e020      	b.n	8001a08 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a16      	ldr	r2, [pc, #88]	@ (8001a24 <HAL_ADC_Start+0x164>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d11b      	bne.n	8001a08 <HAL_ADC_Start+0x148>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d114      	bne.n	8001a08 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	689a      	ldr	r2, [r3, #8]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80019ec:	609a      	str	r2, [r3, #8]
 80019ee:	e00b      	b.n	8001a08 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019f4:	f043 0210 	orr.w	r2, r3, #16
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a00:	f043 0201 	orr.w	r2, r3, #1
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001a08:	2300      	movs	r3, #0
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3714      	adds	r7, #20
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	20000018 	.word	0x20000018
 8001a1c:	431bde83 	.word	0x431bde83
 8001a20:	40012300 	.word	0x40012300
 8001a24:	40012000 	.word	0x40012000

08001a28 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b084      	sub	sp, #16
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001a32:	2300      	movs	r3, #0
 8001a34:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a44:	d113      	bne.n	8001a6e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001a50:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001a54:	d10b      	bne.n	8001a6e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a5a:	f043 0220 	orr.w	r2, r3, #32
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2200      	movs	r2, #0
 8001a66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e063      	b.n	8001b36 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a6e:	f7ff feb3 	bl	80017d8 <HAL_GetTick>
 8001a72:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001a74:	e021      	b.n	8001aba <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a7c:	d01d      	beq.n	8001aba <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d007      	beq.n	8001a94 <HAL_ADC_PollForConversion+0x6c>
 8001a84:	f7ff fea8 	bl	80017d8 <HAL_GetTick>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	683a      	ldr	r2, [r7, #0]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d212      	bcs.n	8001aba <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0302 	and.w	r3, r3, #2
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	d00b      	beq.n	8001aba <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aa6:	f043 0204 	orr.w	r2, r3, #4
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e03d      	b.n	8001b36 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 0302 	and.w	r3, r3, #2
 8001ac4:	2b02      	cmp	r3, #2
 8001ac6:	d1d6      	bne.n	8001a76 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f06f 0212 	mvn.w	r2, #18
 8001ad0:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ad6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d123      	bne.n	8001b34 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d11f      	bne.n	8001b34 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001afa:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d006      	beq.n	8001b10 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d111      	bne.n	8001b34 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b14:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b20:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d105      	bne.n	8001b34 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b2c:	f043 0201 	orr.w	r2, r3, #1
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8001b34:	2300      	movs	r3, #0
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3710      	adds	r7, #16
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}

08001b3e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001b3e:	b480      	push	{r7}
 8001b40:	b083      	sub	sp, #12
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	370c      	adds	r7, #12
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr

08001b58 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b085      	sub	sp, #20
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001b62:	2300      	movs	r3, #0
 8001b64:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d101      	bne.n	8001b74 <HAL_ADC_ConfigChannel+0x1c>
 8001b70:	2302      	movs	r3, #2
 8001b72:	e105      	b.n	8001d80 <HAL_ADC_ConfigChannel+0x228>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2201      	movs	r2, #1
 8001b78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	2b09      	cmp	r3, #9
 8001b82:	d925      	bls.n	8001bd0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	68d9      	ldr	r1, [r3, #12]
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	b29b      	uxth	r3, r3
 8001b90:	461a      	mov	r2, r3
 8001b92:	4613      	mov	r3, r2
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	4413      	add	r3, r2
 8001b98:	3b1e      	subs	r3, #30
 8001b9a:	2207      	movs	r2, #7
 8001b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba0:	43da      	mvns	r2, r3
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	400a      	ands	r2, r1
 8001ba8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	68d9      	ldr	r1, [r3, #12]
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	689a      	ldr	r2, [r3, #8]
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	b29b      	uxth	r3, r3
 8001bba:	4618      	mov	r0, r3
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	005b      	lsls	r3, r3, #1
 8001bc0:	4403      	add	r3, r0
 8001bc2:	3b1e      	subs	r3, #30
 8001bc4:	409a      	lsls	r2, r3
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	430a      	orrs	r2, r1
 8001bcc:	60da      	str	r2, [r3, #12]
 8001bce:	e022      	b.n	8001c16 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	6919      	ldr	r1, [r3, #16]
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	b29b      	uxth	r3, r3
 8001bdc:	461a      	mov	r2, r3
 8001bde:	4613      	mov	r3, r2
 8001be0:	005b      	lsls	r3, r3, #1
 8001be2:	4413      	add	r3, r2
 8001be4:	2207      	movs	r2, #7
 8001be6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bea:	43da      	mvns	r2, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	400a      	ands	r2, r1
 8001bf2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	6919      	ldr	r1, [r3, #16]
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	689a      	ldr	r2, [r3, #8]
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	b29b      	uxth	r3, r3
 8001c04:	4618      	mov	r0, r3
 8001c06:	4603      	mov	r3, r0
 8001c08:	005b      	lsls	r3, r3, #1
 8001c0a:	4403      	add	r3, r0
 8001c0c:	409a      	lsls	r2, r3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	430a      	orrs	r2, r1
 8001c14:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	2b06      	cmp	r3, #6
 8001c1c:	d824      	bhi.n	8001c68 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	685a      	ldr	r2, [r3, #4]
 8001c28:	4613      	mov	r3, r2
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	4413      	add	r3, r2
 8001c2e:	3b05      	subs	r3, #5
 8001c30:	221f      	movs	r2, #31
 8001c32:	fa02 f303 	lsl.w	r3, r2, r3
 8001c36:	43da      	mvns	r2, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	400a      	ands	r2, r1
 8001c3e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	b29b      	uxth	r3, r3
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	685a      	ldr	r2, [r3, #4]
 8001c52:	4613      	mov	r3, r2
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	4413      	add	r3, r2
 8001c58:	3b05      	subs	r3, #5
 8001c5a:	fa00 f203 	lsl.w	r2, r0, r3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	430a      	orrs	r2, r1
 8001c64:	635a      	str	r2, [r3, #52]	@ 0x34
 8001c66:	e04c      	b.n	8001d02 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	2b0c      	cmp	r3, #12
 8001c6e:	d824      	bhi.n	8001cba <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	685a      	ldr	r2, [r3, #4]
 8001c7a:	4613      	mov	r3, r2
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	4413      	add	r3, r2
 8001c80:	3b23      	subs	r3, #35	@ 0x23
 8001c82:	221f      	movs	r2, #31
 8001c84:	fa02 f303 	lsl.w	r3, r2, r3
 8001c88:	43da      	mvns	r2, r3
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	400a      	ands	r2, r1
 8001c90:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	b29b      	uxth	r3, r3
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	685a      	ldr	r2, [r3, #4]
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	4413      	add	r3, r2
 8001caa:	3b23      	subs	r3, #35	@ 0x23
 8001cac:	fa00 f203 	lsl.w	r2, r0, r3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	430a      	orrs	r2, r1
 8001cb6:	631a      	str	r2, [r3, #48]	@ 0x30
 8001cb8:	e023      	b.n	8001d02 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	685a      	ldr	r2, [r3, #4]
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	4413      	add	r3, r2
 8001cca:	3b41      	subs	r3, #65	@ 0x41
 8001ccc:	221f      	movs	r2, #31
 8001cce:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd2:	43da      	mvns	r2, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	400a      	ands	r2, r1
 8001cda:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	b29b      	uxth	r3, r3
 8001ce8:	4618      	mov	r0, r3
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	685a      	ldr	r2, [r3, #4]
 8001cee:	4613      	mov	r3, r2
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	4413      	add	r3, r2
 8001cf4:	3b41      	subs	r3, #65	@ 0x41
 8001cf6:	fa00 f203 	lsl.w	r2, r0, r3
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	430a      	orrs	r2, r1
 8001d00:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d02:	4b22      	ldr	r3, [pc, #136]	@ (8001d8c <HAL_ADC_ConfigChannel+0x234>)
 8001d04:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a21      	ldr	r2, [pc, #132]	@ (8001d90 <HAL_ADC_ConfigChannel+0x238>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d109      	bne.n	8001d24 <HAL_ADC_ConfigChannel+0x1cc>
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	2b12      	cmp	r3, #18
 8001d16:	d105      	bne.n	8001d24 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a19      	ldr	r2, [pc, #100]	@ (8001d90 <HAL_ADC_ConfigChannel+0x238>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d123      	bne.n	8001d76 <HAL_ADC_ConfigChannel+0x21e>
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	2b10      	cmp	r3, #16
 8001d34:	d003      	beq.n	8001d3e <HAL_ADC_ConfigChannel+0x1e6>
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	2b11      	cmp	r3, #17
 8001d3c:	d11b      	bne.n	8001d76 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	2b10      	cmp	r3, #16
 8001d50:	d111      	bne.n	8001d76 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d52:	4b10      	ldr	r3, [pc, #64]	@ (8001d94 <HAL_ADC_ConfigChannel+0x23c>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a10      	ldr	r2, [pc, #64]	@ (8001d98 <HAL_ADC_ConfigChannel+0x240>)
 8001d58:	fba2 2303 	umull	r2, r3, r2, r3
 8001d5c:	0c9a      	lsrs	r2, r3, #18
 8001d5e:	4613      	mov	r3, r2
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	4413      	add	r3, r2
 8001d64:	005b      	lsls	r3, r3, #1
 8001d66:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001d68:	e002      	b.n	8001d70 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	3b01      	subs	r3, #1
 8001d6e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d1f9      	bne.n	8001d6a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001d7e:	2300      	movs	r3, #0
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3714      	adds	r7, #20
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr
 8001d8c:	40012300 	.word	0x40012300
 8001d90:	40012000 	.word	0x40012000
 8001d94:	20000018 	.word	0x20000018
 8001d98:	431bde83 	.word	0x431bde83

08001d9c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b085      	sub	sp, #20
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001da4:	4b79      	ldr	r3, [pc, #484]	@ (8001f8c <ADC_Init+0x1f0>)
 8001da6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	685a      	ldr	r2, [r3, #4]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	431a      	orrs	r2, r3
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	685a      	ldr	r2, [r3, #4]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001dd0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	6859      	ldr	r1, [r3, #4]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	691b      	ldr	r3, [r3, #16]
 8001ddc:	021a      	lsls	r2, r3, #8
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	430a      	orrs	r2, r1
 8001de4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	685a      	ldr	r2, [r3, #4]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001df4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	6859      	ldr	r1, [r3, #4]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	689a      	ldr	r2, [r3, #8]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	430a      	orrs	r2, r1
 8001e06:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	689a      	ldr	r2, [r3, #8]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001e16:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	6899      	ldr	r1, [r3, #8]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	68da      	ldr	r2, [r3, #12]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	430a      	orrs	r2, r1
 8001e28:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e2e:	4a58      	ldr	r2, [pc, #352]	@ (8001f90 <ADC_Init+0x1f4>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d022      	beq.n	8001e7a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	689a      	ldr	r2, [r3, #8]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001e42:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	6899      	ldr	r1, [r3, #8]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	430a      	orrs	r2, r1
 8001e54:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	689a      	ldr	r2, [r3, #8]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001e64:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	6899      	ldr	r1, [r3, #8]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	430a      	orrs	r2, r1
 8001e76:	609a      	str	r2, [r3, #8]
 8001e78:	e00f      	b.n	8001e9a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	689a      	ldr	r2, [r3, #8]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001e88:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	689a      	ldr	r2, [r3, #8]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001e98:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	689a      	ldr	r2, [r3, #8]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f022 0202 	bic.w	r2, r2, #2
 8001ea8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	6899      	ldr	r1, [r3, #8]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	7e1b      	ldrb	r3, [r3, #24]
 8001eb4:	005a      	lsls	r2, r3, #1
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	430a      	orrs	r2, r1
 8001ebc:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d01b      	beq.n	8001f00 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	685a      	ldr	r2, [r3, #4]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001ed6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	685a      	ldr	r2, [r3, #4]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001ee6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	6859      	ldr	r1, [r3, #4]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ef2:	3b01      	subs	r3, #1
 8001ef4:	035a      	lsls	r2, r3, #13
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	430a      	orrs	r2, r1
 8001efc:	605a      	str	r2, [r3, #4]
 8001efe:	e007      	b.n	8001f10 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	685a      	ldr	r2, [r3, #4]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f0e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001f1e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	69db      	ldr	r3, [r3, #28]
 8001f2a:	3b01      	subs	r3, #1
 8001f2c:	051a      	lsls	r2, r3, #20
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	430a      	orrs	r2, r1
 8001f34:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	689a      	ldr	r2, [r3, #8]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001f44:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	6899      	ldr	r1, [r3, #8]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001f52:	025a      	lsls	r2, r3, #9
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	430a      	orrs	r2, r1
 8001f5a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	689a      	ldr	r2, [r3, #8]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001f6a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	6899      	ldr	r1, [r3, #8]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	695b      	ldr	r3, [r3, #20]
 8001f76:	029a      	lsls	r2, r3, #10
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	430a      	orrs	r2, r1
 8001f7e:	609a      	str	r2, [r3, #8]
}
 8001f80:	bf00      	nop
 8001f82:	3714      	adds	r7, #20
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr
 8001f8c:	40012300 	.word	0x40012300
 8001f90:	0f000001 	.word	0x0f000001

08001f94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b085      	sub	sp, #20
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f003 0307 	and.w	r3, r3, #7
 8001fa2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fa4:	4b0c      	ldr	r3, [pc, #48]	@ (8001fd8 <__NVIC_SetPriorityGrouping+0x44>)
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001faa:	68ba      	ldr	r2, [r7, #8]
 8001fac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fbc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001fc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fc6:	4a04      	ldr	r2, [pc, #16]	@ (8001fd8 <__NVIC_SetPriorityGrouping+0x44>)
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	60d3      	str	r3, [r2, #12]
}
 8001fcc:	bf00      	nop
 8001fce:	3714      	adds	r7, #20
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr
 8001fd8:	e000ed00 	.word	0xe000ed00

08001fdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fe0:	4b04      	ldr	r3, [pc, #16]	@ (8001ff4 <__NVIC_GetPriorityGrouping+0x18>)
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	0a1b      	lsrs	r3, r3, #8
 8001fe6:	f003 0307 	and.w	r3, r3, #7
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr
 8001ff4:	e000ed00 	.word	0xe000ed00

08001ff8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	4603      	mov	r3, r0
 8002000:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002006:	2b00      	cmp	r3, #0
 8002008:	db0b      	blt.n	8002022 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800200a:	79fb      	ldrb	r3, [r7, #7]
 800200c:	f003 021f 	and.w	r2, r3, #31
 8002010:	4907      	ldr	r1, [pc, #28]	@ (8002030 <__NVIC_EnableIRQ+0x38>)
 8002012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002016:	095b      	lsrs	r3, r3, #5
 8002018:	2001      	movs	r0, #1
 800201a:	fa00 f202 	lsl.w	r2, r0, r2
 800201e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002022:	bf00      	nop
 8002024:	370c      	adds	r7, #12
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop
 8002030:	e000e100 	.word	0xe000e100

08002034 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	4603      	mov	r3, r0
 800203c:	6039      	str	r1, [r7, #0]
 800203e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002040:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002044:	2b00      	cmp	r3, #0
 8002046:	db0a      	blt.n	800205e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	b2da      	uxtb	r2, r3
 800204c:	490c      	ldr	r1, [pc, #48]	@ (8002080 <__NVIC_SetPriority+0x4c>)
 800204e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002052:	0112      	lsls	r2, r2, #4
 8002054:	b2d2      	uxtb	r2, r2
 8002056:	440b      	add	r3, r1
 8002058:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800205c:	e00a      	b.n	8002074 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	b2da      	uxtb	r2, r3
 8002062:	4908      	ldr	r1, [pc, #32]	@ (8002084 <__NVIC_SetPriority+0x50>)
 8002064:	79fb      	ldrb	r3, [r7, #7]
 8002066:	f003 030f 	and.w	r3, r3, #15
 800206a:	3b04      	subs	r3, #4
 800206c:	0112      	lsls	r2, r2, #4
 800206e:	b2d2      	uxtb	r2, r2
 8002070:	440b      	add	r3, r1
 8002072:	761a      	strb	r2, [r3, #24]
}
 8002074:	bf00      	nop
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr
 8002080:	e000e100 	.word	0xe000e100
 8002084:	e000ed00 	.word	0xe000ed00

08002088 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002088:	b480      	push	{r7}
 800208a:	b089      	sub	sp, #36	@ 0x24
 800208c:	af00      	add	r7, sp, #0
 800208e:	60f8      	str	r0, [r7, #12]
 8002090:	60b9      	str	r1, [r7, #8]
 8002092:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	f003 0307 	and.w	r3, r3, #7
 800209a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	f1c3 0307 	rsb	r3, r3, #7
 80020a2:	2b04      	cmp	r3, #4
 80020a4:	bf28      	it	cs
 80020a6:	2304      	movcs	r3, #4
 80020a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	3304      	adds	r3, #4
 80020ae:	2b06      	cmp	r3, #6
 80020b0:	d902      	bls.n	80020b8 <NVIC_EncodePriority+0x30>
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	3b03      	subs	r3, #3
 80020b6:	e000      	b.n	80020ba <NVIC_EncodePriority+0x32>
 80020b8:	2300      	movs	r3, #0
 80020ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020bc:	f04f 32ff 	mov.w	r2, #4294967295
 80020c0:	69bb      	ldr	r3, [r7, #24]
 80020c2:	fa02 f303 	lsl.w	r3, r2, r3
 80020c6:	43da      	mvns	r2, r3
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	401a      	ands	r2, r3
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020d0:	f04f 31ff 	mov.w	r1, #4294967295
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	fa01 f303 	lsl.w	r3, r1, r3
 80020da:	43d9      	mvns	r1, r3
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020e0:	4313      	orrs	r3, r2
         );
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3724      	adds	r7, #36	@ 0x24
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr
	...

080020f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	3b01      	subs	r3, #1
 80020fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002100:	d301      	bcc.n	8002106 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002102:	2301      	movs	r3, #1
 8002104:	e00f      	b.n	8002126 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002106:	4a0a      	ldr	r2, [pc, #40]	@ (8002130 <SysTick_Config+0x40>)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	3b01      	subs	r3, #1
 800210c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800210e:	210f      	movs	r1, #15
 8002110:	f04f 30ff 	mov.w	r0, #4294967295
 8002114:	f7ff ff8e 	bl	8002034 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002118:	4b05      	ldr	r3, [pc, #20]	@ (8002130 <SysTick_Config+0x40>)
 800211a:	2200      	movs	r2, #0
 800211c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800211e:	4b04      	ldr	r3, [pc, #16]	@ (8002130 <SysTick_Config+0x40>)
 8002120:	2207      	movs	r2, #7
 8002122:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002124:	2300      	movs	r3, #0
}
 8002126:	4618      	mov	r0, r3
 8002128:	3708      	adds	r7, #8
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	e000e010 	.word	0xe000e010

08002134 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	f7ff ff29 	bl	8001f94 <__NVIC_SetPriorityGrouping>
}
 8002142:	bf00      	nop
 8002144:	3708      	adds	r7, #8
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}

0800214a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800214a:	b580      	push	{r7, lr}
 800214c:	b086      	sub	sp, #24
 800214e:	af00      	add	r7, sp, #0
 8002150:	4603      	mov	r3, r0
 8002152:	60b9      	str	r1, [r7, #8]
 8002154:	607a      	str	r2, [r7, #4]
 8002156:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002158:	2300      	movs	r3, #0
 800215a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800215c:	f7ff ff3e 	bl	8001fdc <__NVIC_GetPriorityGrouping>
 8002160:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002162:	687a      	ldr	r2, [r7, #4]
 8002164:	68b9      	ldr	r1, [r7, #8]
 8002166:	6978      	ldr	r0, [r7, #20]
 8002168:	f7ff ff8e 	bl	8002088 <NVIC_EncodePriority>
 800216c:	4602      	mov	r2, r0
 800216e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002172:	4611      	mov	r1, r2
 8002174:	4618      	mov	r0, r3
 8002176:	f7ff ff5d 	bl	8002034 <__NVIC_SetPriority>
}
 800217a:	bf00      	nop
 800217c:	3718      	adds	r7, #24
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}

08002182 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002182:	b580      	push	{r7, lr}
 8002184:	b082      	sub	sp, #8
 8002186:	af00      	add	r7, sp, #0
 8002188:	4603      	mov	r3, r0
 800218a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800218c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002190:	4618      	mov	r0, r3
 8002192:	f7ff ff31 	bl	8001ff8 <__NVIC_EnableIRQ>
}
 8002196:	bf00      	nop
 8002198:	3708      	adds	r7, #8
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}

0800219e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800219e:	b580      	push	{r7, lr}
 80021a0:	b082      	sub	sp, #8
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f7ff ffa2 	bl	80020f0 <SysTick_Config>
 80021ac:	4603      	mov	r3, r0
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3708      	adds	r7, #8
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
	...

080021b8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b086      	sub	sp, #24
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80021c0:	2300      	movs	r3, #0
 80021c2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80021c4:	f7ff fb08 	bl	80017d8 <HAL_GetTick>
 80021c8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d101      	bne.n	80021d4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e099      	b.n	8002308 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2202      	movs	r2, #2
 80021d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2200      	movs	r2, #0
 80021e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f022 0201 	bic.w	r2, r2, #1
 80021f2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021f4:	e00f      	b.n	8002216 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80021f6:	f7ff faef 	bl	80017d8 <HAL_GetTick>
 80021fa:	4602      	mov	r2, r0
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	1ad3      	subs	r3, r2, r3
 8002200:	2b05      	cmp	r3, #5
 8002202:	d908      	bls.n	8002216 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2220      	movs	r2, #32
 8002208:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2203      	movs	r2, #3
 800220e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002212:	2303      	movs	r3, #3
 8002214:	e078      	b.n	8002308 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 0301 	and.w	r3, r3, #1
 8002220:	2b00      	cmp	r3, #0
 8002222:	d1e8      	bne.n	80021f6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800222c:	697a      	ldr	r2, [r7, #20]
 800222e:	4b38      	ldr	r3, [pc, #224]	@ (8002310 <HAL_DMA_Init+0x158>)
 8002230:	4013      	ands	r3, r2
 8002232:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	685a      	ldr	r2, [r3, #4]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002242:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	691b      	ldr	r3, [r3, #16]
 8002248:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800224e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	699b      	ldr	r3, [r3, #24]
 8002254:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800225a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6a1b      	ldr	r3, [r3, #32]
 8002260:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002262:	697a      	ldr	r2, [r7, #20]
 8002264:	4313      	orrs	r3, r2
 8002266:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800226c:	2b04      	cmp	r3, #4
 800226e:	d107      	bne.n	8002280 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002278:	4313      	orrs	r3, r2
 800227a:	697a      	ldr	r2, [r7, #20]
 800227c:	4313      	orrs	r3, r2
 800227e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	697a      	ldr	r2, [r7, #20]
 8002286:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	695b      	ldr	r3, [r3, #20]
 800228e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	f023 0307 	bic.w	r3, r3, #7
 8002296:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800229c:	697a      	ldr	r2, [r7, #20]
 800229e:	4313      	orrs	r3, r2
 80022a0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022a6:	2b04      	cmp	r3, #4
 80022a8:	d117      	bne.n	80022da <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022ae:	697a      	ldr	r2, [r7, #20]
 80022b0:	4313      	orrs	r3, r2
 80022b2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d00e      	beq.n	80022da <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	f000 fb3d 	bl	800293c <DMA_CheckFifoParam>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d008      	beq.n	80022da <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2240      	movs	r2, #64	@ 0x40
 80022cc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2201      	movs	r2, #1
 80022d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80022d6:	2301      	movs	r3, #1
 80022d8:	e016      	b.n	8002308 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	697a      	ldr	r2, [r7, #20]
 80022e0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f000 faf4 	bl	80028d0 <DMA_CalcBaseAndBitshift>
 80022e8:	4603      	mov	r3, r0
 80022ea:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022f0:	223f      	movs	r2, #63	@ 0x3f
 80022f2:	409a      	lsls	r2, r3
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2200      	movs	r2, #0
 80022fc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2201      	movs	r2, #1
 8002302:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002306:	2300      	movs	r3, #0
}
 8002308:	4618      	mov	r0, r3
 800230a:	3718      	adds	r7, #24
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}
 8002310:	f010803f 	.word	0xf010803f

08002314 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b084      	sub	sp, #16
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d101      	bne.n	8002326 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e050      	b.n	80023c8 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800232c:	b2db      	uxtb	r3, r3
 800232e:	2b02      	cmp	r3, #2
 8002330:	d101      	bne.n	8002336 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8002332:	2302      	movs	r3, #2
 8002334:	e048      	b.n	80023c8 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f022 0201 	bic.w	r2, r2, #1
 8002344:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	2200      	movs	r2, #0
 800234c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	2200      	movs	r2, #0
 8002354:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	2200      	movs	r2, #0
 800235c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	2200      	movs	r2, #0
 8002364:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	2200      	movs	r2, #0
 800236c:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	2221      	movs	r2, #33	@ 0x21
 8002374:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f000 faaa 	bl	80028d0 <DMA_CalcBaseAndBitshift>
 800237c:	4603      	mov	r3, r0
 800237e:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2200      	movs	r2, #0
 8002384:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2200      	movs	r2, #0
 800238a:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2200      	movs	r2, #0
 8002390:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2200      	movs	r2, #0
 8002396:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2200      	movs	r2, #0
 800239c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2200      	movs	r2, #0
 80023a2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023a8:	223f      	movs	r2, #63	@ 0x3f
 80023aa:	409a      	lsls	r2, r3
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2200      	movs	r2, #0
 80023b4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2200      	movs	r2, #0
 80023ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2200      	movs	r2, #0
 80023c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80023c6:	2300      	movs	r3, #0
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3710      	adds	r7, #16
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}

080023d0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b086      	sub	sp, #24
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	60f8      	str	r0, [r7, #12]
 80023d8:	60b9      	str	r1, [r7, #8]
 80023da:	607a      	str	r2, [r7, #4]
 80023dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023de:	2300      	movs	r3, #0
 80023e0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023e6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d101      	bne.n	80023f6 <HAL_DMA_Start_IT+0x26>
 80023f2:	2302      	movs	r3, #2
 80023f4:	e040      	b.n	8002478 <HAL_DMA_Start_IT+0xa8>
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2201      	movs	r2, #1
 80023fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002404:	b2db      	uxtb	r3, r3
 8002406:	2b01      	cmp	r3, #1
 8002408:	d12f      	bne.n	800246a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2202      	movs	r2, #2
 800240e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2200      	movs	r2, #0
 8002416:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	68b9      	ldr	r1, [r7, #8]
 800241e:	68f8      	ldr	r0, [r7, #12]
 8002420:	f000 fa28 	bl	8002874 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002428:	223f      	movs	r2, #63	@ 0x3f
 800242a:	409a      	lsls	r2, r3
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f042 0216 	orr.w	r2, r2, #22
 800243e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002444:	2b00      	cmp	r3, #0
 8002446:	d007      	beq.n	8002458 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f042 0208 	orr.w	r2, r2, #8
 8002456:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f042 0201 	orr.w	r2, r2, #1
 8002466:	601a      	str	r2, [r3, #0]
 8002468:	e005      	b.n	8002476 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2200      	movs	r2, #0
 800246e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002472:	2302      	movs	r3, #2
 8002474:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002476:	7dfb      	ldrb	r3, [r7, #23]
}
 8002478:	4618      	mov	r0, r3
 800247a:	3718      	adds	r7, #24
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}

08002480 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b084      	sub	sp, #16
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800248c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800248e:	f7ff f9a3 	bl	80017d8 <HAL_GetTick>
 8002492:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800249a:	b2db      	uxtb	r3, r3
 800249c:	2b02      	cmp	r3, #2
 800249e:	d008      	beq.n	80024b2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2280      	movs	r2, #128	@ 0x80
 80024a4:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2200      	movs	r2, #0
 80024aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e052      	b.n	8002558 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f022 0216 	bic.w	r2, r2, #22
 80024c0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	695a      	ldr	r2, [r3, #20]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80024d0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d103      	bne.n	80024e2 <HAL_DMA_Abort+0x62>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d007      	beq.n	80024f2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f022 0208 	bic.w	r2, r2, #8
 80024f0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f022 0201 	bic.w	r2, r2, #1
 8002500:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002502:	e013      	b.n	800252c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002504:	f7ff f968 	bl	80017d8 <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	2b05      	cmp	r3, #5
 8002510:	d90c      	bls.n	800252c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2220      	movs	r2, #32
 8002516:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2203      	movs	r2, #3
 800251c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2200      	movs	r2, #0
 8002524:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002528:	2303      	movs	r3, #3
 800252a:	e015      	b.n	8002558 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0301 	and.w	r3, r3, #1
 8002536:	2b00      	cmp	r3, #0
 8002538:	d1e4      	bne.n	8002504 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800253e:	223f      	movs	r2, #63	@ 0x3f
 8002540:	409a      	lsls	r2, r3
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2201      	movs	r2, #1
 800254a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2200      	movs	r2, #0
 8002552:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002556:	2300      	movs	r3, #0
}
 8002558:	4618      	mov	r0, r3
 800255a:	3710      	adds	r7, #16
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}

08002560 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b086      	sub	sp, #24
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002568:	2300      	movs	r3, #0
 800256a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800256c:	4b8e      	ldr	r3, [pc, #568]	@ (80027a8 <HAL_DMA_IRQHandler+0x248>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a8e      	ldr	r2, [pc, #568]	@ (80027ac <HAL_DMA_IRQHandler+0x24c>)
 8002572:	fba2 2303 	umull	r2, r3, r2, r3
 8002576:	0a9b      	lsrs	r3, r3, #10
 8002578:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800257e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800258a:	2208      	movs	r2, #8
 800258c:	409a      	lsls	r2, r3
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	4013      	ands	r3, r2
 8002592:	2b00      	cmp	r3, #0
 8002594:	d01a      	beq.n	80025cc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0304 	and.w	r3, r3, #4
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d013      	beq.n	80025cc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f022 0204 	bic.w	r2, r2, #4
 80025b2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025b8:	2208      	movs	r2, #8
 80025ba:	409a      	lsls	r2, r3
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025c4:	f043 0201 	orr.w	r2, r3, #1
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025d0:	2201      	movs	r2, #1
 80025d2:	409a      	lsls	r2, r3
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	4013      	ands	r3, r2
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d012      	beq.n	8002602 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	695b      	ldr	r3, [r3, #20]
 80025e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d00b      	beq.n	8002602 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025ee:	2201      	movs	r2, #1
 80025f0:	409a      	lsls	r2, r3
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025fa:	f043 0202 	orr.w	r2, r3, #2
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002606:	2204      	movs	r2, #4
 8002608:	409a      	lsls	r2, r3
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	4013      	ands	r3, r2
 800260e:	2b00      	cmp	r3, #0
 8002610:	d012      	beq.n	8002638 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0302 	and.w	r3, r3, #2
 800261c:	2b00      	cmp	r3, #0
 800261e:	d00b      	beq.n	8002638 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002624:	2204      	movs	r2, #4
 8002626:	409a      	lsls	r2, r3
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002630:	f043 0204 	orr.w	r2, r3, #4
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800263c:	2210      	movs	r2, #16
 800263e:	409a      	lsls	r2, r3
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	4013      	ands	r3, r2
 8002644:	2b00      	cmp	r3, #0
 8002646:	d043      	beq.n	80026d0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0308 	and.w	r3, r3, #8
 8002652:	2b00      	cmp	r3, #0
 8002654:	d03c      	beq.n	80026d0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800265a:	2210      	movs	r2, #16
 800265c:	409a      	lsls	r2, r3
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800266c:	2b00      	cmp	r3, #0
 800266e:	d018      	beq.n	80026a2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d108      	bne.n	8002690 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002682:	2b00      	cmp	r3, #0
 8002684:	d024      	beq.n	80026d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	4798      	blx	r3
 800268e:	e01f      	b.n	80026d0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002694:	2b00      	cmp	r3, #0
 8002696:	d01b      	beq.n	80026d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	4798      	blx	r3
 80026a0:	e016      	b.n	80026d0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d107      	bne.n	80026c0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f022 0208 	bic.w	r2, r2, #8
 80026be:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d003      	beq.n	80026d0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026d4:	2220      	movs	r2, #32
 80026d6:	409a      	lsls	r2, r3
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	4013      	ands	r3, r2
 80026dc:	2b00      	cmp	r3, #0
 80026de:	f000 808f 	beq.w	8002800 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 0310 	and.w	r3, r3, #16
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	f000 8087 	beq.w	8002800 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026f6:	2220      	movs	r2, #32
 80026f8:	409a      	lsls	r2, r3
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002704:	b2db      	uxtb	r3, r3
 8002706:	2b05      	cmp	r3, #5
 8002708:	d136      	bne.n	8002778 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f022 0216 	bic.w	r2, r2, #22
 8002718:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	695a      	ldr	r2, [r3, #20]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002728:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800272e:	2b00      	cmp	r3, #0
 8002730:	d103      	bne.n	800273a <HAL_DMA_IRQHandler+0x1da>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002736:	2b00      	cmp	r3, #0
 8002738:	d007      	beq.n	800274a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f022 0208 	bic.w	r2, r2, #8
 8002748:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800274e:	223f      	movs	r2, #63	@ 0x3f
 8002750:	409a      	lsls	r2, r3
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2201      	movs	r2, #1
 800275a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2200      	movs	r2, #0
 8002762:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800276a:	2b00      	cmp	r3, #0
 800276c:	d07e      	beq.n	800286c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	4798      	blx	r3
        }
        return;
 8002776:	e079      	b.n	800286c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d01d      	beq.n	80027c2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002790:	2b00      	cmp	r3, #0
 8002792:	d10d      	bne.n	80027b0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002798:	2b00      	cmp	r3, #0
 800279a:	d031      	beq.n	8002800 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	4798      	blx	r3
 80027a4:	e02c      	b.n	8002800 <HAL_DMA_IRQHandler+0x2a0>
 80027a6:	bf00      	nop
 80027a8:	20000018 	.word	0x20000018
 80027ac:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d023      	beq.n	8002800 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	4798      	blx	r3
 80027c0:	e01e      	b.n	8002800 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d10f      	bne.n	80027f0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f022 0210 	bic.w	r2, r2, #16
 80027de:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2201      	movs	r2, #1
 80027e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2200      	movs	r2, #0
 80027ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d003      	beq.n	8002800 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002804:	2b00      	cmp	r3, #0
 8002806:	d032      	beq.n	800286e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800280c:	f003 0301 	and.w	r3, r3, #1
 8002810:	2b00      	cmp	r3, #0
 8002812:	d022      	beq.n	800285a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2205      	movs	r2, #5
 8002818:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f022 0201 	bic.w	r2, r2, #1
 800282a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	3301      	adds	r3, #1
 8002830:	60bb      	str	r3, [r7, #8]
 8002832:	697a      	ldr	r2, [r7, #20]
 8002834:	429a      	cmp	r2, r3
 8002836:	d307      	bcc.n	8002848 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0301 	and.w	r3, r3, #1
 8002842:	2b00      	cmp	r3, #0
 8002844:	d1f2      	bne.n	800282c <HAL_DMA_IRQHandler+0x2cc>
 8002846:	e000      	b.n	800284a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002848:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2201      	movs	r2, #1
 800284e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2200      	movs	r2, #0
 8002856:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800285e:	2b00      	cmp	r3, #0
 8002860:	d005      	beq.n	800286e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	4798      	blx	r3
 800286a:	e000      	b.n	800286e <HAL_DMA_IRQHandler+0x30e>
        return;
 800286c:	bf00      	nop
    }
  }
}
 800286e:	3718      	adds	r7, #24
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}

08002874 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002874:	b480      	push	{r7}
 8002876:	b085      	sub	sp, #20
 8002878:	af00      	add	r7, sp, #0
 800287a:	60f8      	str	r0, [r7, #12]
 800287c:	60b9      	str	r1, [r7, #8]
 800287e:	607a      	str	r2, [r7, #4]
 8002880:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002890:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	683a      	ldr	r2, [r7, #0]
 8002898:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	2b40      	cmp	r3, #64	@ 0x40
 80028a0:	d108      	bne.n	80028b4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	68ba      	ldr	r2, [r7, #8]
 80028b0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80028b2:	e007      	b.n	80028c4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	68ba      	ldr	r2, [r7, #8]
 80028ba:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	687a      	ldr	r2, [r7, #4]
 80028c2:	60da      	str	r2, [r3, #12]
}
 80028c4:	bf00      	nop
 80028c6:	3714      	adds	r7, #20
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr

080028d0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b085      	sub	sp, #20
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	3b10      	subs	r3, #16
 80028e0:	4a14      	ldr	r2, [pc, #80]	@ (8002934 <DMA_CalcBaseAndBitshift+0x64>)
 80028e2:	fba2 2303 	umull	r2, r3, r2, r3
 80028e6:	091b      	lsrs	r3, r3, #4
 80028e8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80028ea:	4a13      	ldr	r2, [pc, #76]	@ (8002938 <DMA_CalcBaseAndBitshift+0x68>)
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	4413      	add	r3, r2
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	461a      	mov	r2, r3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2b03      	cmp	r3, #3
 80028fc:	d909      	bls.n	8002912 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002906:	f023 0303 	bic.w	r3, r3, #3
 800290a:	1d1a      	adds	r2, r3, #4
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	659a      	str	r2, [r3, #88]	@ 0x58
 8002910:	e007      	b.n	8002922 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800291a:	f023 0303 	bic.w	r3, r3, #3
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002926:	4618      	mov	r0, r3
 8002928:	3714      	adds	r7, #20
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr
 8002932:	bf00      	nop
 8002934:	aaaaaaab 	.word	0xaaaaaaab
 8002938:	0800af84 	.word	0x0800af84

0800293c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800293c:	b480      	push	{r7}
 800293e:	b085      	sub	sp, #20
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002944:	2300      	movs	r3, #0
 8002946:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800294c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	699b      	ldr	r3, [r3, #24]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d11f      	bne.n	8002996 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	2b03      	cmp	r3, #3
 800295a:	d856      	bhi.n	8002a0a <DMA_CheckFifoParam+0xce>
 800295c:	a201      	add	r2, pc, #4	@ (adr r2, 8002964 <DMA_CheckFifoParam+0x28>)
 800295e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002962:	bf00      	nop
 8002964:	08002975 	.word	0x08002975
 8002968:	08002987 	.word	0x08002987
 800296c:	08002975 	.word	0x08002975
 8002970:	08002a0b 	.word	0x08002a0b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002978:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800297c:	2b00      	cmp	r3, #0
 800297e:	d046      	beq.n	8002a0e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002984:	e043      	b.n	8002a0e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800298a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800298e:	d140      	bne.n	8002a12 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002994:	e03d      	b.n	8002a12 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	699b      	ldr	r3, [r3, #24]
 800299a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800299e:	d121      	bne.n	80029e4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	2b03      	cmp	r3, #3
 80029a4:	d837      	bhi.n	8002a16 <DMA_CheckFifoParam+0xda>
 80029a6:	a201      	add	r2, pc, #4	@ (adr r2, 80029ac <DMA_CheckFifoParam+0x70>)
 80029a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029ac:	080029bd 	.word	0x080029bd
 80029b0:	080029c3 	.word	0x080029c3
 80029b4:	080029bd 	.word	0x080029bd
 80029b8:	080029d5 	.word	0x080029d5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	73fb      	strb	r3, [r7, #15]
      break;
 80029c0:	e030      	b.n	8002a24 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029c6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d025      	beq.n	8002a1a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029d2:	e022      	b.n	8002a1a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029d8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80029dc:	d11f      	bne.n	8002a1e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80029e2:	e01c      	b.n	8002a1e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d903      	bls.n	80029f2 <DMA_CheckFifoParam+0xb6>
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	2b03      	cmp	r3, #3
 80029ee:	d003      	beq.n	80029f8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80029f0:	e018      	b.n	8002a24 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	73fb      	strb	r3, [r7, #15]
      break;
 80029f6:	e015      	b.n	8002a24 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029fc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d00e      	beq.n	8002a22 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	73fb      	strb	r3, [r7, #15]
      break;
 8002a08:	e00b      	b.n	8002a22 <DMA_CheckFifoParam+0xe6>
      break;
 8002a0a:	bf00      	nop
 8002a0c:	e00a      	b.n	8002a24 <DMA_CheckFifoParam+0xe8>
      break;
 8002a0e:	bf00      	nop
 8002a10:	e008      	b.n	8002a24 <DMA_CheckFifoParam+0xe8>
      break;
 8002a12:	bf00      	nop
 8002a14:	e006      	b.n	8002a24 <DMA_CheckFifoParam+0xe8>
      break;
 8002a16:	bf00      	nop
 8002a18:	e004      	b.n	8002a24 <DMA_CheckFifoParam+0xe8>
      break;
 8002a1a:	bf00      	nop
 8002a1c:	e002      	b.n	8002a24 <DMA_CheckFifoParam+0xe8>
      break;   
 8002a1e:	bf00      	nop
 8002a20:	e000      	b.n	8002a24 <DMA_CheckFifoParam+0xe8>
      break;
 8002a22:	bf00      	nop
    }
  } 
  
  return status; 
 8002a24:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3714      	adds	r7, #20
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr
 8002a32:	bf00      	nop

08002a34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b089      	sub	sp, #36	@ 0x24
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a42:	2300      	movs	r3, #0
 8002a44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a46:	2300      	movs	r3, #0
 8002a48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	61fb      	str	r3, [r7, #28]
 8002a4e:	e159      	b.n	8002d04 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a50:	2201      	movs	r2, #1
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	fa02 f303 	lsl.w	r3, r2, r3
 8002a58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	697a      	ldr	r2, [r7, #20]
 8002a60:	4013      	ands	r3, r2
 8002a62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a64:	693a      	ldr	r2, [r7, #16]
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	f040 8148 	bne.w	8002cfe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	f003 0303 	and.w	r3, r3, #3
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d005      	beq.n	8002a86 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d130      	bne.n	8002ae8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	005b      	lsls	r3, r3, #1
 8002a90:	2203      	movs	r2, #3
 8002a92:	fa02 f303 	lsl.w	r3, r2, r3
 8002a96:	43db      	mvns	r3, r3
 8002a98:	69ba      	ldr	r2, [r7, #24]
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	68da      	ldr	r2, [r3, #12]
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	005b      	lsls	r3, r3, #1
 8002aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aaa:	69ba      	ldr	r2, [r7, #24]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	69ba      	ldr	r2, [r7, #24]
 8002ab4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002abc:	2201      	movs	r2, #1
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac4:	43db      	mvns	r3, r3
 8002ac6:	69ba      	ldr	r2, [r7, #24]
 8002ac8:	4013      	ands	r3, r2
 8002aca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	091b      	lsrs	r3, r3, #4
 8002ad2:	f003 0201 	and.w	r2, r3, #1
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8002adc:	69ba      	ldr	r2, [r7, #24]
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	69ba      	ldr	r2, [r7, #24]
 8002ae6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	f003 0303 	and.w	r3, r3, #3
 8002af0:	2b03      	cmp	r3, #3
 8002af2:	d017      	beq.n	8002b24 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	005b      	lsls	r3, r3, #1
 8002afe:	2203      	movs	r2, #3
 8002b00:	fa02 f303 	lsl.w	r3, r2, r3
 8002b04:	43db      	mvns	r3, r3
 8002b06:	69ba      	ldr	r2, [r7, #24]
 8002b08:	4013      	ands	r3, r2
 8002b0a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	689a      	ldr	r2, [r3, #8]
 8002b10:	69fb      	ldr	r3, [r7, #28]
 8002b12:	005b      	lsls	r3, r3, #1
 8002b14:	fa02 f303 	lsl.w	r3, r2, r3
 8002b18:	69ba      	ldr	r2, [r7, #24]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	69ba      	ldr	r2, [r7, #24]
 8002b22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f003 0303 	and.w	r3, r3, #3
 8002b2c:	2b02      	cmp	r3, #2
 8002b2e:	d123      	bne.n	8002b78 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	08da      	lsrs	r2, r3, #3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	3208      	adds	r2, #8
 8002b38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	f003 0307 	and.w	r3, r3, #7
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	220f      	movs	r2, #15
 8002b48:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4c:	43db      	mvns	r3, r3
 8002b4e:	69ba      	ldr	r2, [r7, #24]
 8002b50:	4013      	ands	r3, r2
 8002b52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	691a      	ldr	r2, [r3, #16]
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	f003 0307 	and.w	r3, r3, #7
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	fa02 f303 	lsl.w	r3, r2, r3
 8002b64:	69ba      	ldr	r2, [r7, #24]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	08da      	lsrs	r2, r3, #3
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	3208      	adds	r2, #8
 8002b72:	69b9      	ldr	r1, [r7, #24]
 8002b74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	005b      	lsls	r3, r3, #1
 8002b82:	2203      	movs	r2, #3
 8002b84:	fa02 f303 	lsl.w	r3, r2, r3
 8002b88:	43db      	mvns	r3, r3
 8002b8a:	69ba      	ldr	r2, [r7, #24]
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f003 0203 	and.w	r2, r3, #3
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	005b      	lsls	r3, r3, #1
 8002b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba0:	69ba      	ldr	r2, [r7, #24]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	69ba      	ldr	r2, [r7, #24]
 8002baa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	f000 80a2 	beq.w	8002cfe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bba:	2300      	movs	r3, #0
 8002bbc:	60fb      	str	r3, [r7, #12]
 8002bbe:	4b57      	ldr	r3, [pc, #348]	@ (8002d1c <HAL_GPIO_Init+0x2e8>)
 8002bc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bc2:	4a56      	ldr	r2, [pc, #344]	@ (8002d1c <HAL_GPIO_Init+0x2e8>)
 8002bc4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002bc8:	6453      	str	r3, [r2, #68]	@ 0x44
 8002bca:	4b54      	ldr	r3, [pc, #336]	@ (8002d1c <HAL_GPIO_Init+0x2e8>)
 8002bcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002bd2:	60fb      	str	r3, [r7, #12]
 8002bd4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002bd6:	4a52      	ldr	r2, [pc, #328]	@ (8002d20 <HAL_GPIO_Init+0x2ec>)
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	089b      	lsrs	r3, r3, #2
 8002bdc:	3302      	adds	r3, #2
 8002bde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002be2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	f003 0303 	and.w	r3, r3, #3
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	220f      	movs	r2, #15
 8002bee:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf2:	43db      	mvns	r3, r3
 8002bf4:	69ba      	ldr	r2, [r7, #24]
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4a49      	ldr	r2, [pc, #292]	@ (8002d24 <HAL_GPIO_Init+0x2f0>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d019      	beq.n	8002c36 <HAL_GPIO_Init+0x202>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4a48      	ldr	r2, [pc, #288]	@ (8002d28 <HAL_GPIO_Init+0x2f4>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d013      	beq.n	8002c32 <HAL_GPIO_Init+0x1fe>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	4a47      	ldr	r2, [pc, #284]	@ (8002d2c <HAL_GPIO_Init+0x2f8>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d00d      	beq.n	8002c2e <HAL_GPIO_Init+0x1fa>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4a46      	ldr	r2, [pc, #280]	@ (8002d30 <HAL_GPIO_Init+0x2fc>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d007      	beq.n	8002c2a <HAL_GPIO_Init+0x1f6>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4a45      	ldr	r2, [pc, #276]	@ (8002d34 <HAL_GPIO_Init+0x300>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d101      	bne.n	8002c26 <HAL_GPIO_Init+0x1f2>
 8002c22:	2304      	movs	r3, #4
 8002c24:	e008      	b.n	8002c38 <HAL_GPIO_Init+0x204>
 8002c26:	2307      	movs	r3, #7
 8002c28:	e006      	b.n	8002c38 <HAL_GPIO_Init+0x204>
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e004      	b.n	8002c38 <HAL_GPIO_Init+0x204>
 8002c2e:	2302      	movs	r3, #2
 8002c30:	e002      	b.n	8002c38 <HAL_GPIO_Init+0x204>
 8002c32:	2301      	movs	r3, #1
 8002c34:	e000      	b.n	8002c38 <HAL_GPIO_Init+0x204>
 8002c36:	2300      	movs	r3, #0
 8002c38:	69fa      	ldr	r2, [r7, #28]
 8002c3a:	f002 0203 	and.w	r2, r2, #3
 8002c3e:	0092      	lsls	r2, r2, #2
 8002c40:	4093      	lsls	r3, r2
 8002c42:	69ba      	ldr	r2, [r7, #24]
 8002c44:	4313      	orrs	r3, r2
 8002c46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c48:	4935      	ldr	r1, [pc, #212]	@ (8002d20 <HAL_GPIO_Init+0x2ec>)
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	089b      	lsrs	r3, r3, #2
 8002c4e:	3302      	adds	r3, #2
 8002c50:	69ba      	ldr	r2, [r7, #24]
 8002c52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c56:	4b38      	ldr	r3, [pc, #224]	@ (8002d38 <HAL_GPIO_Init+0x304>)
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	43db      	mvns	r3, r3
 8002c60:	69ba      	ldr	r2, [r7, #24]
 8002c62:	4013      	ands	r3, r2
 8002c64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d003      	beq.n	8002c7a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002c72:	69ba      	ldr	r2, [r7, #24]
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	4313      	orrs	r3, r2
 8002c78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c7a:	4a2f      	ldr	r2, [pc, #188]	@ (8002d38 <HAL_GPIO_Init+0x304>)
 8002c7c:	69bb      	ldr	r3, [r7, #24]
 8002c7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c80:	4b2d      	ldr	r3, [pc, #180]	@ (8002d38 <HAL_GPIO_Init+0x304>)
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	43db      	mvns	r3, r3
 8002c8a:	69ba      	ldr	r2, [r7, #24]
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d003      	beq.n	8002ca4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002c9c:	69ba      	ldr	r2, [r7, #24]
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ca4:	4a24      	ldr	r2, [pc, #144]	@ (8002d38 <HAL_GPIO_Init+0x304>)
 8002ca6:	69bb      	ldr	r3, [r7, #24]
 8002ca8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002caa:	4b23      	ldr	r3, [pc, #140]	@ (8002d38 <HAL_GPIO_Init+0x304>)
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	43db      	mvns	r3, r3
 8002cb4:	69ba      	ldr	r2, [r7, #24]
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d003      	beq.n	8002cce <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002cc6:	69ba      	ldr	r2, [r7, #24]
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002cce:	4a1a      	ldr	r2, [pc, #104]	@ (8002d38 <HAL_GPIO_Init+0x304>)
 8002cd0:	69bb      	ldr	r3, [r7, #24]
 8002cd2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002cd4:	4b18      	ldr	r3, [pc, #96]	@ (8002d38 <HAL_GPIO_Init+0x304>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	43db      	mvns	r3, r3
 8002cde:	69ba      	ldr	r2, [r7, #24]
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d003      	beq.n	8002cf8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002cf0:	69ba      	ldr	r2, [r7, #24]
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002cf8:	4a0f      	ldr	r2, [pc, #60]	@ (8002d38 <HAL_GPIO_Init+0x304>)
 8002cfa:	69bb      	ldr	r3, [r7, #24]
 8002cfc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	3301      	adds	r3, #1
 8002d02:	61fb      	str	r3, [r7, #28]
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	2b0f      	cmp	r3, #15
 8002d08:	f67f aea2 	bls.w	8002a50 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d0c:	bf00      	nop
 8002d0e:	bf00      	nop
 8002d10:	3724      	adds	r7, #36	@ 0x24
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr
 8002d1a:	bf00      	nop
 8002d1c:	40023800 	.word	0x40023800
 8002d20:	40013800 	.word	0x40013800
 8002d24:	40020000 	.word	0x40020000
 8002d28:	40020400 	.word	0x40020400
 8002d2c:	40020800 	.word	0x40020800
 8002d30:	40020c00 	.word	0x40020c00
 8002d34:	40021000 	.word	0x40021000
 8002d38:	40013c00 	.word	0x40013c00

08002d3c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b087      	sub	sp, #28
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d46:	2300      	movs	r3, #0
 8002d48:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d52:	2300      	movs	r3, #0
 8002d54:	617b      	str	r3, [r7, #20]
 8002d56:	e0bb      	b.n	8002ed0 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d58:	2201      	movs	r2, #1
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d60:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8002d62:	683a      	ldr	r2, [r7, #0]
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	4013      	ands	r3, r2
 8002d68:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8002d6a:	68fa      	ldr	r2, [r7, #12]
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	f040 80ab 	bne.w	8002eca <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002d74:	4a5c      	ldr	r2, [pc, #368]	@ (8002ee8 <HAL_GPIO_DeInit+0x1ac>)
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	089b      	lsrs	r3, r3, #2
 8002d7a:	3302      	adds	r3, #2
 8002d7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d80:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	f003 0303 	and.w	r3, r3, #3
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	220f      	movs	r2, #15
 8002d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d90:	68ba      	ldr	r2, [r7, #8]
 8002d92:	4013      	ands	r3, r2
 8002d94:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4a54      	ldr	r2, [pc, #336]	@ (8002eec <HAL_GPIO_DeInit+0x1b0>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d019      	beq.n	8002dd2 <HAL_GPIO_DeInit+0x96>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4a53      	ldr	r2, [pc, #332]	@ (8002ef0 <HAL_GPIO_DeInit+0x1b4>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d013      	beq.n	8002dce <HAL_GPIO_DeInit+0x92>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4a52      	ldr	r2, [pc, #328]	@ (8002ef4 <HAL_GPIO_DeInit+0x1b8>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d00d      	beq.n	8002dca <HAL_GPIO_DeInit+0x8e>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4a51      	ldr	r2, [pc, #324]	@ (8002ef8 <HAL_GPIO_DeInit+0x1bc>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d007      	beq.n	8002dc6 <HAL_GPIO_DeInit+0x8a>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4a50      	ldr	r2, [pc, #320]	@ (8002efc <HAL_GPIO_DeInit+0x1c0>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d101      	bne.n	8002dc2 <HAL_GPIO_DeInit+0x86>
 8002dbe:	2304      	movs	r3, #4
 8002dc0:	e008      	b.n	8002dd4 <HAL_GPIO_DeInit+0x98>
 8002dc2:	2307      	movs	r3, #7
 8002dc4:	e006      	b.n	8002dd4 <HAL_GPIO_DeInit+0x98>
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	e004      	b.n	8002dd4 <HAL_GPIO_DeInit+0x98>
 8002dca:	2302      	movs	r3, #2
 8002dcc:	e002      	b.n	8002dd4 <HAL_GPIO_DeInit+0x98>
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e000      	b.n	8002dd4 <HAL_GPIO_DeInit+0x98>
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	697a      	ldr	r2, [r7, #20]
 8002dd6:	f002 0203 	and.w	r2, r2, #3
 8002dda:	0092      	lsls	r2, r2, #2
 8002ddc:	4093      	lsls	r3, r2
 8002dde:	68ba      	ldr	r2, [r7, #8]
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d132      	bne.n	8002e4a <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002de4:	4b46      	ldr	r3, [pc, #280]	@ (8002f00 <HAL_GPIO_DeInit+0x1c4>)
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	43db      	mvns	r3, r3
 8002dec:	4944      	ldr	r1, [pc, #272]	@ (8002f00 <HAL_GPIO_DeInit+0x1c4>)
 8002dee:	4013      	ands	r3, r2
 8002df0:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002df2:	4b43      	ldr	r3, [pc, #268]	@ (8002f00 <HAL_GPIO_DeInit+0x1c4>)
 8002df4:	685a      	ldr	r2, [r3, #4]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	43db      	mvns	r3, r3
 8002dfa:	4941      	ldr	r1, [pc, #260]	@ (8002f00 <HAL_GPIO_DeInit+0x1c4>)
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002e00:	4b3f      	ldr	r3, [pc, #252]	@ (8002f00 <HAL_GPIO_DeInit+0x1c4>)
 8002e02:	68da      	ldr	r2, [r3, #12]
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	43db      	mvns	r3, r3
 8002e08:	493d      	ldr	r1, [pc, #244]	@ (8002f00 <HAL_GPIO_DeInit+0x1c4>)
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002e0e:	4b3c      	ldr	r3, [pc, #240]	@ (8002f00 <HAL_GPIO_DeInit+0x1c4>)
 8002e10:	689a      	ldr	r2, [r3, #8]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	43db      	mvns	r3, r3
 8002e16:	493a      	ldr	r1, [pc, #232]	@ (8002f00 <HAL_GPIO_DeInit+0x1c4>)
 8002e18:	4013      	ands	r3, r2
 8002e1a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	f003 0303 	and.w	r3, r3, #3
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	220f      	movs	r2, #15
 8002e26:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002e2c:	4a2e      	ldr	r2, [pc, #184]	@ (8002ee8 <HAL_GPIO_DeInit+0x1ac>)
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	089b      	lsrs	r3, r3, #2
 8002e32:	3302      	adds	r3, #2
 8002e34:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	43da      	mvns	r2, r3
 8002e3c:	482a      	ldr	r0, [pc, #168]	@ (8002ee8 <HAL_GPIO_DeInit+0x1ac>)
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	089b      	lsrs	r3, r3, #2
 8002e42:	400a      	ands	r2, r1
 8002e44:	3302      	adds	r3, #2
 8002e46:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	005b      	lsls	r3, r3, #1
 8002e52:	2103      	movs	r1, #3
 8002e54:	fa01 f303 	lsl.w	r3, r1, r3
 8002e58:	43db      	mvns	r3, r3
 8002e5a:	401a      	ands	r2, r3
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	08da      	lsrs	r2, r3, #3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	3208      	adds	r2, #8
 8002e68:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	f003 0307 	and.w	r3, r3, #7
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	220f      	movs	r2, #15
 8002e76:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7a:	43db      	mvns	r3, r3
 8002e7c:	697a      	ldr	r2, [r7, #20]
 8002e7e:	08d2      	lsrs	r2, r2, #3
 8002e80:	4019      	ands	r1, r3
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	3208      	adds	r2, #8
 8002e86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	68da      	ldr	r2, [r3, #12]
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	005b      	lsls	r3, r3, #1
 8002e92:	2103      	movs	r1, #3
 8002e94:	fa01 f303 	lsl.w	r3, r1, r3
 8002e98:	43db      	mvns	r3, r3
 8002e9a:	401a      	ands	r2, r3
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	685a      	ldr	r2, [r3, #4]
 8002ea4:	2101      	movs	r1, #1
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	fa01 f303 	lsl.w	r3, r1, r3
 8002eac:	43db      	mvns	r3, r3
 8002eae:	401a      	ands	r2, r3
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	689a      	ldr	r2, [r3, #8]
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	005b      	lsls	r3, r3, #1
 8002ebc:	2103      	movs	r1, #3
 8002ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8002ec2:	43db      	mvns	r3, r3
 8002ec4:	401a      	ands	r2, r3
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	3301      	adds	r3, #1
 8002ece:	617b      	str	r3, [r7, #20]
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	2b0f      	cmp	r3, #15
 8002ed4:	f67f af40 	bls.w	8002d58 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8002ed8:	bf00      	nop
 8002eda:	bf00      	nop
 8002edc:	371c      	adds	r7, #28
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr
 8002ee6:	bf00      	nop
 8002ee8:	40013800 	.word	0x40013800
 8002eec:	40020000 	.word	0x40020000
 8002ef0:	40020400 	.word	0x40020400
 8002ef4:	40020800 	.word	0x40020800
 8002ef8:	40020c00 	.word	0x40020c00
 8002efc:	40021000 	.word	0x40021000
 8002f00:	40013c00 	.word	0x40013c00

08002f04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	460b      	mov	r3, r1
 8002f0e:	807b      	strh	r3, [r7, #2]
 8002f10:	4613      	mov	r3, r2
 8002f12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f14:	787b      	ldrb	r3, [r7, #1]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d003      	beq.n	8002f22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f1a:	887a      	ldrh	r2, [r7, #2]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f20:	e003      	b.n	8002f2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f22:	887b      	ldrh	r3, [r7, #2]
 8002f24:	041a      	lsls	r2, r3, #16
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	619a      	str	r2, [r3, #24]
}
 8002f2a:	bf00      	nop
 8002f2c:	370c      	adds	r7, #12
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr
	...

08002f38 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b088      	sub	sp, #32
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d101      	bne.n	8002f4a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e128      	b.n	800319c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d109      	bne.n	8002f6a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4a90      	ldr	r2, [pc, #576]	@ (80031a4 <HAL_I2S_Init+0x26c>)
 8002f62:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	f7fe f9c5 	bl	80012f4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2202      	movs	r2, #2
 8002f6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	69db      	ldr	r3, [r3, #28]
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	6812      	ldr	r2, [r2, #0]
 8002f7c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8002f80:	f023 030f 	bic.w	r3, r3, #15
 8002f84:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	2202      	movs	r2, #2
 8002f8c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	695b      	ldr	r3, [r3, #20]
 8002f92:	2b02      	cmp	r3, #2
 8002f94:	d060      	beq.n	8003058 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d102      	bne.n	8002fa4 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002f9e:	2310      	movs	r3, #16
 8002fa0:	617b      	str	r3, [r7, #20]
 8002fa2:	e001      	b.n	8002fa8 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002fa4:	2320      	movs	r3, #32
 8002fa6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	2b20      	cmp	r3, #32
 8002fae:	d802      	bhi.n	8002fb6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	005b      	lsls	r3, r3, #1
 8002fb4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002fb6:	2001      	movs	r0, #1
 8002fb8:	f002 ff30 	bl	8005e1c <HAL_RCCEx_GetPeriphCLKFreq>
 8002fbc:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	691b      	ldr	r3, [r3, #16]
 8002fc2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002fc6:	d125      	bne.n	8003014 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d010      	beq.n	8002ff2 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	68fa      	ldr	r2, [r7, #12]
 8002fd6:	fbb2 f2f3 	udiv	r2, r2, r3
 8002fda:	4613      	mov	r3, r2
 8002fdc:	009b      	lsls	r3, r3, #2
 8002fde:	4413      	add	r3, r2
 8002fe0:	005b      	lsls	r3, r3, #1
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	695b      	ldr	r3, [r3, #20]
 8002fe8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fec:	3305      	adds	r3, #5
 8002fee:	613b      	str	r3, [r7, #16]
 8002ff0:	e01f      	b.n	8003032 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	00db      	lsls	r3, r3, #3
 8002ff6:	68fa      	ldr	r2, [r7, #12]
 8002ff8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	4413      	add	r3, r2
 8003002:	005b      	lsls	r3, r3, #1
 8003004:	461a      	mov	r2, r3
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	695b      	ldr	r3, [r3, #20]
 800300a:	fbb2 f3f3 	udiv	r3, r2, r3
 800300e:	3305      	adds	r3, #5
 8003010:	613b      	str	r3, [r7, #16]
 8003012:	e00e      	b.n	8003032 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003014:	68fa      	ldr	r2, [r7, #12]
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	fbb2 f2f3 	udiv	r2, r2, r3
 800301c:	4613      	mov	r3, r2
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	4413      	add	r3, r2
 8003022:	005b      	lsls	r3, r3, #1
 8003024:	461a      	mov	r2, r3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	695b      	ldr	r3, [r3, #20]
 800302a:	fbb2 f3f3 	udiv	r3, r2, r3
 800302e:	3305      	adds	r3, #5
 8003030:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	4a5c      	ldr	r2, [pc, #368]	@ (80031a8 <HAL_I2S_Init+0x270>)
 8003036:	fba2 2303 	umull	r2, r3, r2, r3
 800303a:	08db      	lsrs	r3, r3, #3
 800303c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	f003 0301 	and.w	r3, r3, #1
 8003044:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003046:	693a      	ldr	r2, [r7, #16]
 8003048:	69bb      	ldr	r3, [r7, #24]
 800304a:	1ad3      	subs	r3, r2, r3
 800304c:	085b      	lsrs	r3, r3, #1
 800304e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003050:	69bb      	ldr	r3, [r7, #24]
 8003052:	021b      	lsls	r3, r3, #8
 8003054:	61bb      	str	r3, [r7, #24]
 8003056:	e003      	b.n	8003060 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003058:	2302      	movs	r3, #2
 800305a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800305c:	2300      	movs	r3, #0
 800305e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	2b01      	cmp	r3, #1
 8003064:	d902      	bls.n	800306c <HAL_I2S_Init+0x134>
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	2bff      	cmp	r3, #255	@ 0xff
 800306a:	d907      	bls.n	800307c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003070:	f043 0210 	orr.w	r2, r3, #16
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	e08f      	b.n	800319c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	691a      	ldr	r2, [r3, #16]
 8003080:	69bb      	ldr	r3, [r7, #24]
 8003082:	ea42 0103 	orr.w	r1, r2, r3
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	69fa      	ldr	r2, [r7, #28]
 800308c:	430a      	orrs	r2, r1
 800308e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	69db      	ldr	r3, [r3, #28]
 8003096:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800309a:	f023 030f 	bic.w	r3, r3, #15
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	6851      	ldr	r1, [r2, #4]
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	6892      	ldr	r2, [r2, #8]
 80030a6:	4311      	orrs	r1, r2
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	68d2      	ldr	r2, [r2, #12]
 80030ac:	4311      	orrs	r1, r2
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	6992      	ldr	r2, [r2, #24]
 80030b2:	430a      	orrs	r2, r1
 80030b4:	431a      	orrs	r2, r3
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80030be:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6a1b      	ldr	r3, [r3, #32]
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d161      	bne.n	800318c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	4a38      	ldr	r2, [pc, #224]	@ (80031ac <HAL_I2S_Init+0x274>)
 80030cc:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a37      	ldr	r2, [pc, #220]	@ (80031b0 <HAL_I2S_Init+0x278>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d101      	bne.n	80030dc <HAL_I2S_Init+0x1a4>
 80030d8:	4b36      	ldr	r3, [pc, #216]	@ (80031b4 <HAL_I2S_Init+0x27c>)
 80030da:	e001      	b.n	80030e0 <HAL_I2S_Init+0x1a8>
 80030dc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80030e0:	69db      	ldr	r3, [r3, #28]
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	6812      	ldr	r2, [r2, #0]
 80030e6:	4932      	ldr	r1, [pc, #200]	@ (80031b0 <HAL_I2S_Init+0x278>)
 80030e8:	428a      	cmp	r2, r1
 80030ea:	d101      	bne.n	80030f0 <HAL_I2S_Init+0x1b8>
 80030ec:	4a31      	ldr	r2, [pc, #196]	@ (80031b4 <HAL_I2S_Init+0x27c>)
 80030ee:	e001      	b.n	80030f4 <HAL_I2S_Init+0x1bc>
 80030f0:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80030f4:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80030f8:	f023 030f 	bic.w	r3, r3, #15
 80030fc:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a2b      	ldr	r2, [pc, #172]	@ (80031b0 <HAL_I2S_Init+0x278>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d101      	bne.n	800310c <HAL_I2S_Init+0x1d4>
 8003108:	4b2a      	ldr	r3, [pc, #168]	@ (80031b4 <HAL_I2S_Init+0x27c>)
 800310a:	e001      	b.n	8003110 <HAL_I2S_Init+0x1d8>
 800310c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003110:	2202      	movs	r2, #2
 8003112:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a25      	ldr	r2, [pc, #148]	@ (80031b0 <HAL_I2S_Init+0x278>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d101      	bne.n	8003122 <HAL_I2S_Init+0x1ea>
 800311e:	4b25      	ldr	r3, [pc, #148]	@ (80031b4 <HAL_I2S_Init+0x27c>)
 8003120:	e001      	b.n	8003126 <HAL_I2S_Init+0x1ee>
 8003122:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003126:	69db      	ldr	r3, [r3, #28]
 8003128:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003132:	d003      	beq.n	800313c <HAL_I2S_Init+0x204>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d103      	bne.n	8003144 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800313c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003140:	613b      	str	r3, [r7, #16]
 8003142:	e001      	b.n	8003148 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003144:	2300      	movs	r3, #0
 8003146:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003152:	4313      	orrs	r3, r2
 8003154:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800315c:	4313      	orrs	r3, r2
 800315e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	699b      	ldr	r3, [r3, #24]
 8003164:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003166:	4313      	orrs	r3, r2
 8003168:	b29a      	uxth	r2, r3
 800316a:	897b      	ldrh	r3, [r7, #10]
 800316c:	4313      	orrs	r3, r2
 800316e:	b29b      	uxth	r3, r3
 8003170:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003174:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a0d      	ldr	r2, [pc, #52]	@ (80031b0 <HAL_I2S_Init+0x278>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d101      	bne.n	8003184 <HAL_I2S_Init+0x24c>
 8003180:	4b0c      	ldr	r3, [pc, #48]	@ (80031b4 <HAL_I2S_Init+0x27c>)
 8003182:	e001      	b.n	8003188 <HAL_I2S_Init+0x250>
 8003184:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003188:	897a      	ldrh	r2, [r7, #10]
 800318a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2201      	movs	r2, #1
 8003196:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 800319a:	2300      	movs	r3, #0
}
 800319c:	4618      	mov	r0, r3
 800319e:	3720      	adds	r7, #32
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	08003891 	.word	0x08003891
 80031a8:	cccccccd 	.word	0xcccccccd
 80031ac:	08003a19 	.word	0x08003a19
 80031b0:	40003800 	.word	0x40003800
 80031b4:	40003400 	.word	0x40003400

080031b8 <HAL_I2S_DeInit>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DeInit(I2S_HandleTypeDef *hi2s)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b082      	sub	sp, #8
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d101      	bne.n	80031ca <HAL_I2S_DeInit+0x12>
  {
    return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e01a      	b.n	8003200 <HAL_I2S_DeInit+0x48>
  }

  /* Check the parameters */
  assert_param(IS_I2S_ALL_INSTANCE(hi2s->Instance));

  hi2s->State = HAL_I2S_STATE_BUSY;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2202      	movs	r2, #2
 80031ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2S Peripheral Clock */
  __HAL_I2S_DISABLE(hi2s);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	69da      	ldr	r2, [r3, #28]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031e0:	61da      	str	r2, [r3, #28]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hi2s->MspDeInitCallback(hi2s);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_I2S_MspDeInit(hi2s);
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f7fe f944 	bl	8001470 <HAL_I2S_MspDeInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2200      	movs	r2, #0
 80031ec:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_RESET;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2200      	movs	r2, #0
 80031f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Release Lock */
  __HAL_UNLOCK(hi2s);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80031fe:	2300      	movs	r3, #0
}
 8003200:	4618      	mov	r0, r3
 8003202:	3708      	adds	r7, #8
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}

08003208 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b086      	sub	sp, #24
 800320c:	af00      	add	r7, sp, #0
 800320e:	60f8      	str	r0, [r7, #12]
 8003210:	60b9      	str	r1, [r7, #8]
 8003212:	4613      	mov	r3, r2
 8003214:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d002      	beq.n	8003222 <HAL_I2S_Transmit_DMA+0x1a>
 800321c:	88fb      	ldrh	r3, [r7, #6]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d101      	bne.n	8003226 <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e08a      	b.n	800333c <HAL_I2S_Transmit_DMA+0x134>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800322c:	b2db      	uxtb	r3, r3
 800322e:	2b01      	cmp	r3, #1
 8003230:	d001      	beq.n	8003236 <HAL_I2S_Transmit_DMA+0x2e>
  {
    return HAL_BUSY;
 8003232:	2302      	movs	r3, #2
 8003234:	e082      	b.n	800333c <HAL_I2S_Transmit_DMA+0x134>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800323c:	b2db      	uxtb	r3, r3
 800323e:	2b01      	cmp	r3, #1
 8003240:	d101      	bne.n	8003246 <HAL_I2S_Transmit_DMA+0x3e>
 8003242:	2302      	movs	r3, #2
 8003244:	e07a      	b.n	800333c <HAL_I2S_Transmit_DMA+0x134>
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2201      	movs	r2, #1
 800324a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2203      	movs	r2, #3
 8003252:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2200      	movs	r2, #0
 800325a:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pTxBuffPtr = pData;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	68ba      	ldr	r2, [r7, #8]
 8003260:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	69db      	ldr	r3, [r3, #28]
 8003268:	f003 0307 	and.w	r3, r3, #7
 800326c:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	2b03      	cmp	r3, #3
 8003272:	d002      	beq.n	800327a <HAL_I2S_Transmit_DMA+0x72>
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	2b05      	cmp	r3, #5
 8003278:	d10a      	bne.n	8003290 <HAL_I2S_Transmit_DMA+0x88>
  {
    hi2s->TxXferSize = (Size << 1U);
 800327a:	88fb      	ldrh	r3, [r7, #6]
 800327c:	005b      	lsls	r3, r3, #1
 800327e:	b29a      	uxth	r2, r3
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = (Size << 1U);
 8003284:	88fb      	ldrh	r3, [r7, #6]
 8003286:	005b      	lsls	r3, r3, #1
 8003288:	b29a      	uxth	r2, r3
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800328e:	e005      	b.n	800329c <HAL_I2S_Transmit_DMA+0x94>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	88fa      	ldrh	r2, [r7, #6]
 8003294:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = Size;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	88fa      	ldrh	r2, [r7, #6]
 800329a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032a0:	4a28      	ldr	r2, [pc, #160]	@ (8003344 <HAL_I2S_Transmit_DMA+0x13c>)
 80032a2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032a8:	4a27      	ldr	r2, [pc, #156]	@ (8003348 <HAL_I2S_Transmit_DMA+0x140>)
 80032aa:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032b0:	4a26      	ldr	r2, [pc, #152]	@ (800334c <HAL_I2S_Transmit_DMA+0x144>)
 80032b2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80032bc:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80032c4:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032ca:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80032cc:	f7ff f880 	bl	80023d0 <HAL_DMA_Start_IT>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d00f      	beq.n	80032f6 <HAL_I2S_Transmit_DMA+0xee>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032da:	f043 0208 	orr.w	r2, r3, #8
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2201      	movs	r2, #1
 80032e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    __HAL_UNLOCK(hi2s);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2200      	movs	r2, #0
 80032ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e022      	b.n	800333c <HAL_I2S_Transmit_DMA+0x134>
  }

  __HAL_UNLOCK(hi2s);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2200      	movs	r2, #0
 80032fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	f003 0302 	and.w	r3, r3, #2
 8003308:	2b00      	cmp	r3, #0
 800330a:	d107      	bne.n	800331c <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	685a      	ldr	r2, [r3, #4]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f042 0202 	orr.w	r2, r2, #2
 800331a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	69db      	ldr	r3, [r3, #28]
 8003322:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003326:	2b00      	cmp	r3, #0
 8003328:	d107      	bne.n	800333a <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	69da      	ldr	r2, [r3, #28]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003338:	61da      	str	r2, [r3, #28]
  }

  return HAL_OK;
 800333a:	2300      	movs	r3, #0
}
 800333c:	4618      	mov	r0, r3
 800333e:	3718      	adds	r7, #24
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}
 8003344:	0800376f 	.word	0x0800376f
 8003348:	0800372d 	.word	0x0800372d
 800334c:	0800378b 	.word	0x0800378b

08003350 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b088      	sub	sp, #32
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint32_t tickstart;
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003358:	2300      	movs	r3, #0
 800335a:	77fb      	strb	r3, [r7, #31]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003364:	d004      	beq.n	8003370 <HAL_I2S_DMAStop+0x20>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	2b00      	cmp	r3, #0
 800336c:	f040 80d1 	bne.w	8003512 <HAL_I2S_DMAStop+0x1c2>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003374:	2b00      	cmp	r3, #0
 8003376:	d00f      	beq.n	8003398 <HAL_I2S_DMAStop+0x48>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800337c:	4618      	mov	r0, r3
 800337e:	f7ff f87f 	bl	8002480 <HAL_DMA_Abort>
 8003382:	4603      	mov	r3, r0
 8003384:	2b00      	cmp	r3, #0
 8003386:	d007      	beq.n	8003398 <HAL_I2S_DMAStop+0x48>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800338c:	f043 0208 	orr.w	r2, r3, #8
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	645a      	str	r2, [r3, #68]	@ 0x44
        errorcode = HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	77fb      	strb	r3, [r7, #31]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8003398:	2364      	movs	r3, #100	@ 0x64
 800339a:	2201      	movs	r2, #1
 800339c:	2102      	movs	r1, #2
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f000 fb00 	bl	80039a4 <I2S_WaitFlagStateUntilTimeout>
 80033a4:	4603      	mov	r3, r0
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d00b      	beq.n	80033c2 <HAL_I2S_DMAStop+0x72>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033ae:	f043 0201 	orr.w	r2, r3, #1
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2201      	movs	r2, #1
 80033ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      errorcode   = HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	77fb      	strb	r3, [r7, #31]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 80033c2:	2364      	movs	r3, #100	@ 0x64
 80033c4:	2200      	movs	r2, #0
 80033c6:	2180      	movs	r1, #128	@ 0x80
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	f000 faeb 	bl	80039a4 <I2S_WaitFlagStateUntilTimeout>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d00b      	beq.n	80033ec <HAL_I2S_DMAStop+0x9c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033d8:	f043 0201 	orr.w	r2, r3, #1
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2201      	movs	r2, #1
 80033e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      errorcode   = HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	77fb      	strb	r3, [r7, #31]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	69da      	ldr	r2, [r3, #28]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80033fa:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80033fc:	2300      	movs	r3, #0
 80033fe:	617b      	str	r3, [r7, #20]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	617b      	str	r3, [r7, #20]
 8003408:	697b      	ldr	r3, [r7, #20]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	685a      	ldr	r2, [r3, #4]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f022 0202 	bic.w	r2, r2, #2
 8003418:	605a      	str	r2, [r3, #4]

#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003420:	b2db      	uxtb	r3, r3
 8003422:	2b05      	cmp	r3, #5
 8003424:	f040 8165 	bne.w	80036f2 <HAL_I2S_DMAStop+0x3a2>
    {
      /* Abort the I2S DMA rx Stream/Channel */
      if (hi2s->hdmarx != NULL)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800342c:	2b00      	cmp	r3, #0
 800342e:	d00f      	beq.n	8003450 <HAL_I2S_DMAStop+0x100>
      {
        /* Disable the I2S DMA rx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003434:	4618      	mov	r0, r3
 8003436:	f7ff f823 	bl	8002480 <HAL_DMA_Abort>
 800343a:	4603      	mov	r3, r0
 800343c:	2b00      	cmp	r3, #0
 800343e:	d007      	beq.n	8003450 <HAL_I2S_DMAStop+0x100>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003444:	f043 0208 	orr.w	r2, r3, #8
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	645a      	str	r2, [r3, #68]	@ 0x44
          errorcode = HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	77fb      	strb	r3, [r7, #31]
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a8a      	ldr	r2, [pc, #552]	@ (8003680 <HAL_I2S_DMAStop+0x330>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d101      	bne.n	800345e <HAL_I2S_DMAStop+0x10e>
 800345a:	4b8a      	ldr	r3, [pc, #552]	@ (8003684 <HAL_I2S_DMAStop+0x334>)
 800345c:	e001      	b.n	8003462 <HAL_I2S_DMAStop+0x112>
 800345e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003462:	69da      	ldr	r2, [r3, #28]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4985      	ldr	r1, [pc, #532]	@ (8003680 <HAL_I2S_DMAStop+0x330>)
 800346a:	428b      	cmp	r3, r1
 800346c:	d101      	bne.n	8003472 <HAL_I2S_DMAStop+0x122>
 800346e:	4b85      	ldr	r3, [pc, #532]	@ (8003684 <HAL_I2S_DMAStop+0x334>)
 8003470:	e001      	b.n	8003476 <HAL_I2S_DMAStop+0x126>
 8003472:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003476:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800347a:	61da      	str	r2, [r3, #28]

      /* Clear OVR flag */
      __HAL_I2SEXT_CLEAR_OVRFLAG(hi2s);
 800347c:	2300      	movs	r3, #0
 800347e:	613b      	str	r3, [r7, #16]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a7e      	ldr	r2, [pc, #504]	@ (8003680 <HAL_I2S_DMAStop+0x330>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d101      	bne.n	800348e <HAL_I2S_DMAStop+0x13e>
 800348a:	4b7e      	ldr	r3, [pc, #504]	@ (8003684 <HAL_I2S_DMAStop+0x334>)
 800348c:	e001      	b.n	8003492 <HAL_I2S_DMAStop+0x142>
 800348e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	613b      	str	r3, [r7, #16]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a79      	ldr	r2, [pc, #484]	@ (8003680 <HAL_I2S_DMAStop+0x330>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d101      	bne.n	80034a4 <HAL_I2S_DMAStop+0x154>
 80034a0:	4b78      	ldr	r3, [pc, #480]	@ (8003684 <HAL_I2S_DMAStop+0x334>)
 80034a2:	e001      	b.n	80034a8 <HAL_I2S_DMAStop+0x158>
 80034a4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	613b      	str	r3, [r7, #16]
 80034ac:	693b      	ldr	r3, [r7, #16]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a73      	ldr	r2, [pc, #460]	@ (8003680 <HAL_I2S_DMAStop+0x330>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d101      	bne.n	80034bc <HAL_I2S_DMAStop+0x16c>
 80034b8:	4b72      	ldr	r3, [pc, #456]	@ (8003684 <HAL_I2S_DMAStop+0x334>)
 80034ba:	e001      	b.n	80034c0 <HAL_I2S_DMAStop+0x170>
 80034bc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80034c0:	685a      	ldr	r2, [r3, #4]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	496e      	ldr	r1, [pc, #440]	@ (8003680 <HAL_I2S_DMAStop+0x330>)
 80034c8:	428b      	cmp	r3, r1
 80034ca:	d101      	bne.n	80034d0 <HAL_I2S_DMAStop+0x180>
 80034cc:	4b6d      	ldr	r3, [pc, #436]	@ (8003684 <HAL_I2S_DMAStop+0x334>)
 80034ce:	e001      	b.n	80034d4 <HAL_I2S_DMAStop+0x184>
 80034d0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80034d4:	f022 0201 	bic.w	r2, r2, #1
 80034d8:	605a      	str	r2, [r3, #4]

      if (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d10c      	bne.n	80034fc <HAL_I2S_DMAStop+0x1ac>
      {
        /* Set the error code */
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034e6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2201      	movs	r2, #1
 80034f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        errorcode = HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	77fb      	strb	r3, [r7, #31]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80034fa:	e0fa      	b.n	80036f2 <HAL_I2S_DMAStop+0x3a2>
      }
      else
      {
        /* Read DR to Flush RX Data */
        READ_REG(I2SxEXT(hi2s->Instance)->DR);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a5f      	ldr	r2, [pc, #380]	@ (8003680 <HAL_I2S_DMAStop+0x330>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d101      	bne.n	800350a <HAL_I2S_DMAStop+0x1ba>
 8003506:	4b5f      	ldr	r3, [pc, #380]	@ (8003684 <HAL_I2S_DMAStop+0x334>)
 8003508:	e001      	b.n	800350e <HAL_I2S_DMAStop+0x1be>
 800350a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800350e:	68db      	ldr	r3, [r3, #12]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8003510:	e0ef      	b.n	80036f2 <HAL_I2S_DMAStop+0x3a2>
      }
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800351a:	d005      	beq.n	8003528 <HAL_I2S_DMAStop+0x1d8>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003524:	f040 80e5 	bne.w	80036f2 <HAL_I2S_DMAStop+0x3a2>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800352c:	2b00      	cmp	r3, #0
 800352e:	d00f      	beq.n	8003550 <HAL_I2S_DMAStop+0x200>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003534:	4618      	mov	r0, r3
 8003536:	f7fe ffa3 	bl	8002480 <HAL_DMA_Abort>
 800353a:	4603      	mov	r3, r0
 800353c:	2b00      	cmp	r3, #0
 800353e:	d007      	beq.n	8003550 <HAL_I2S_DMAStop+0x200>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003544:	f043 0208 	orr.w	r2, r3, #8
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	645a      	str	r2, [r3, #68]	@ 0x44
        errorcode = HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	77fb      	strb	r3, [r7, #31]
      }
    }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003556:	b2db      	uxtb	r3, r3
 8003558:	2b05      	cmp	r3, #5
 800355a:	f040 809a 	bne.w	8003692 <HAL_I2S_DMAStop+0x342>
    {
      /* Abort the I2S DMA tx Stream/Channel */
      if (hi2s->hdmatx != NULL)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003562:	2b00      	cmp	r3, #0
 8003564:	d00f      	beq.n	8003586 <HAL_I2S_DMAStop+0x236>
      {
        /* Disable the I2S DMA tx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800356a:	4618      	mov	r0, r3
 800356c:	f7fe ff88 	bl	8002480 <HAL_DMA_Abort>
 8003570:	4603      	mov	r3, r0
 8003572:	2b00      	cmp	r3, #0
 8003574:	d007      	beq.n	8003586 <HAL_I2S_DMAStop+0x236>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800357a:	f043 0208 	orr.w	r2, r3, #8
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	645a      	str	r2, [r3, #68]	@ 0x44
          errorcode = HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	77fb      	strb	r3, [r7, #31]
        }
      }

      tickstart = HAL_GetTick();
 8003586:	f7fe f927 	bl	80017d8 <HAL_GetTick>
 800358a:	61b8      	str	r0, [r7, #24]

      /* Wait until TXE flag is set */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 800358c:	e012      	b.n	80035b4 <HAL_I2S_DMAStop+0x264>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 800358e:	f7fe f923 	bl	80017d8 <HAL_GetTick>
 8003592:	4602      	mov	r2, r0
 8003594:	69bb      	ldr	r3, [r7, #24]
 8003596:	1ad3      	subs	r3, r2, r3
 8003598:	2b64      	cmp	r3, #100	@ 0x64
 800359a:	d90b      	bls.n	80035b4 <HAL_I2S_DMAStop+0x264>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035a0:	f043 0201 	orr.w	r2, r3, #1
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2201      	movs	r2, #1
 80035ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          errorcode   = HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a31      	ldr	r2, [pc, #196]	@ (8003680 <HAL_I2S_DMAStop+0x330>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d101      	bne.n	80035c2 <HAL_I2S_DMAStop+0x272>
 80035be:	4b31      	ldr	r3, [pc, #196]	@ (8003684 <HAL_I2S_DMAStop+0x334>)
 80035c0:	e001      	b.n	80035c6 <HAL_I2S_DMAStop+0x276>
 80035c2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	f003 0302 	and.w	r3, r3, #2
 80035cc:	2b02      	cmp	r3, #2
 80035ce:	d1de      	bne.n	800358e <HAL_I2S_DMAStop+0x23e>
        }
      }

      /* Wait until BSY flag is Reset */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 80035d0:	e012      	b.n	80035f8 <HAL_I2S_DMAStop+0x2a8>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 80035d2:	f7fe f901 	bl	80017d8 <HAL_GetTick>
 80035d6:	4602      	mov	r2, r0
 80035d8:	69bb      	ldr	r3, [r7, #24]
 80035da:	1ad3      	subs	r3, r2, r3
 80035dc:	2b64      	cmp	r3, #100	@ 0x64
 80035de:	d90b      	bls.n	80035f8 <HAL_I2S_DMAStop+0x2a8>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035e4:	f043 0201 	orr.w	r2, r3, #1
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2201      	movs	r2, #1
 80035f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          errorcode   = HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a20      	ldr	r2, [pc, #128]	@ (8003680 <HAL_I2S_DMAStop+0x330>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d101      	bne.n	8003606 <HAL_I2S_DMAStop+0x2b6>
 8003602:	4b20      	ldr	r3, [pc, #128]	@ (8003684 <HAL_I2S_DMAStop+0x334>)
 8003604:	e001      	b.n	800360a <HAL_I2S_DMAStop+0x2ba>
 8003606:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003610:	2b80      	cmp	r3, #128	@ 0x80
 8003612:	d0de      	beq.n	80035d2 <HAL_I2S_DMAStop+0x282>
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a19      	ldr	r2, [pc, #100]	@ (8003680 <HAL_I2S_DMAStop+0x330>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d101      	bne.n	8003622 <HAL_I2S_DMAStop+0x2d2>
 800361e:	4b19      	ldr	r3, [pc, #100]	@ (8003684 <HAL_I2S_DMAStop+0x334>)
 8003620:	e001      	b.n	8003626 <HAL_I2S_DMAStop+0x2d6>
 8003622:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003626:	69da      	ldr	r2, [r3, #28]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4914      	ldr	r1, [pc, #80]	@ (8003680 <HAL_I2S_DMAStop+0x330>)
 800362e:	428b      	cmp	r3, r1
 8003630:	d101      	bne.n	8003636 <HAL_I2S_DMAStop+0x2e6>
 8003632:	4b14      	ldr	r3, [pc, #80]	@ (8003684 <HAL_I2S_DMAStop+0x334>)
 8003634:	e001      	b.n	800363a <HAL_I2S_DMAStop+0x2ea>
 8003636:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800363a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800363e:	61da      	str	r2, [r3, #28]

      /* Clear UDR flag */
      __HAL_I2SEXT_CLEAR_UDRFLAG(hi2s);
 8003640:	2300      	movs	r3, #0
 8003642:	60fb      	str	r3, [r7, #12]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a0d      	ldr	r2, [pc, #52]	@ (8003680 <HAL_I2S_DMAStop+0x330>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d101      	bne.n	8003652 <HAL_I2S_DMAStop+0x302>
 800364e:	4b0d      	ldr	r3, [pc, #52]	@ (8003684 <HAL_I2S_DMAStop+0x334>)
 8003650:	e001      	b.n	8003656 <HAL_I2S_DMAStop+0x306>
 8003652:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	60fb      	str	r3, [r7, #12]
 800365a:	68fb      	ldr	r3, [r7, #12]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a07      	ldr	r2, [pc, #28]	@ (8003680 <HAL_I2S_DMAStop+0x330>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d101      	bne.n	800366a <HAL_I2S_DMAStop+0x31a>
 8003666:	4b07      	ldr	r3, [pc, #28]	@ (8003684 <HAL_I2S_DMAStop+0x334>)
 8003668:	e001      	b.n	800366e <HAL_I2S_DMAStop+0x31e>
 800366a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800366e:	685a      	ldr	r2, [r3, #4]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4902      	ldr	r1, [pc, #8]	@ (8003680 <HAL_I2S_DMAStop+0x330>)
 8003676:	428b      	cmp	r3, r1
 8003678:	d106      	bne.n	8003688 <HAL_I2S_DMAStop+0x338>
 800367a:	4b02      	ldr	r3, [pc, #8]	@ (8003684 <HAL_I2S_DMAStop+0x334>)
 800367c:	e006      	b.n	800368c <HAL_I2S_DMAStop+0x33c>
 800367e:	bf00      	nop
 8003680:	40003800 	.word	0x40003800
 8003684:	40003400 	.word	0x40003400
 8003688:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800368c:	f022 0202 	bic.w	r2, r2, #2
 8003690:	605a      	str	r2, [r3, #4]
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	69da      	ldr	r2, [r3, #28]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036a0:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80036a2:	2300      	movs	r3, #0
 80036a4:	60bb      	str	r3, [r7, #8]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	60bb      	str	r3, [r7, #8]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	60bb      	str	r3, [r7, #8]
 80036b6:	68bb      	ldr	r3, [r7, #8]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	685a      	ldr	r2, [r3, #4]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f022 0201 	bic.w	r2, r2, #1
 80036c6:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80036d0:	d10c      	bne.n	80036ec <HAL_I2S_DMAStop+0x39c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036d6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2201      	movs	r2, #1
 80036e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      errorcode = HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	77fb      	strb	r3, [r7, #31]
 80036ea:	e002      	b.n	80036f2 <HAL_I2S_DMAStop+0x3a2>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2201      	movs	r2, #1
 80036f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return errorcode;
 80036fa:	7ffb      	ldrb	r3, [r7, #31]
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3720      	adds	r7, #32
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}

08003704 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003704:	b480      	push	{r7}
 8003706:	b083      	sub	sp, #12
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800370c:	bf00      	nop
 800370e:	370c      	adds	r7, #12
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr

08003718 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003718:	b480      	push	{r7}
 800371a:	b083      	sub	sp, #12
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003720:	bf00      	nop
 8003722:	370c      	adds	r7, #12
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr

0800372c <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b084      	sub	sp, #16
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003738:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	69db      	ldr	r3, [r3, #28]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d10e      	bne.n	8003760 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	685a      	ldr	r2, [r3, #4]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f022 0202 	bic.w	r2, r2, #2
 8003750:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2200      	movs	r2, #0
 8003756:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2201      	movs	r2, #1
 800375c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8003760:	68f8      	ldr	r0, [r7, #12]
 8003762:	f7fd f9c5 	bl	8000af0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003766:	bf00      	nop
 8003768:	3710      	adds	r7, #16
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}

0800376e <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800376e:	b580      	push	{r7, lr}
 8003770:	b084      	sub	sp, #16
 8003772:	af00      	add	r7, sp, #0
 8003774:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800377a:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 800377c:	68f8      	ldr	r0, [r7, #12]
 800377e:	f7fd f9c7 	bl	8000b10 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003782:	bf00      	nop
 8003784:	3710      	adds	r7, #16
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}

0800378a <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 800378a:	b580      	push	{r7, lr}
 800378c:	b084      	sub	sp, #16
 800378e:	af00      	add	r7, sp, #0
 8003790:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003796:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	685a      	ldr	r2, [r3, #4]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f022 0203 	bic.w	r2, r2, #3
 80037a6:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2200      	movs	r2, #0
 80037ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2s->RxXferCount = 0U;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2200      	movs	r2, #0
 80037b2:	865a      	strh	r2, [r3, #50]	@ 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2201      	movs	r2, #1
 80037b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037c0:	f043 0208 	orr.w	r2, r3, #8
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 80037c8:	68f8      	ldr	r0, [r7, #12]
 80037ca:	f7ff ffa5 	bl	8003718 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80037ce:	bf00      	nop
 80037d0:	3710      	adds	r7, #16
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}

080037d6 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80037d6:	b580      	push	{r7, lr}
 80037d8:	b082      	sub	sp, #8
 80037da:	af00      	add	r7, sp, #0
 80037dc:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037e2:	881a      	ldrh	r2, [r3, #0]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ee:	1c9a      	adds	r2, r3, #2
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037f8:	b29b      	uxth	r3, r3
 80037fa:	3b01      	subs	r3, #1
 80037fc:	b29a      	uxth	r2, r3
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003806:	b29b      	uxth	r3, r3
 8003808:	2b00      	cmp	r3, #0
 800380a:	d10e      	bne.n	800382a <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	685a      	ldr	r2, [r3, #4]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800381a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2201      	movs	r2, #1
 8003820:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	f7fd f963 	bl	8000af0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800382a:	bf00      	nop
 800382c:	3708      	adds	r7, #8
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}

08003832 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003832:	b580      	push	{r7, lr}
 8003834:	b082      	sub	sp, #8
 8003836:	af00      	add	r7, sp, #0
 8003838:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	68da      	ldr	r2, [r3, #12]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003844:	b292      	uxth	r2, r2
 8003846:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800384c:	1c9a      	adds	r2, r3, #2
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003856:	b29b      	uxth	r3, r3
 8003858:	3b01      	subs	r3, #1
 800385a:	b29a      	uxth	r2, r3
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003864:	b29b      	uxth	r3, r3
 8003866:	2b00      	cmp	r3, #0
 8003868:	d10e      	bne.n	8003888 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	685a      	ldr	r2, [r3, #4]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003878:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2201      	movs	r2, #1
 800387e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f7ff ff3e 	bl	8003704 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003888:	bf00      	nop
 800388a:	3708      	adds	r7, #8
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}

08003890 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b086      	sub	sp, #24
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	2b04      	cmp	r3, #4
 80038aa:	d13a      	bne.n	8003922 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	f003 0301 	and.w	r3, r3, #1
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d109      	bne.n	80038ca <I2S_IRQHandler+0x3a>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038c0:	2b40      	cmp	r3, #64	@ 0x40
 80038c2:	d102      	bne.n	80038ca <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f7ff ffb4 	bl	8003832 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038d0:	2b40      	cmp	r3, #64	@ 0x40
 80038d2:	d126      	bne.n	8003922 <I2S_IRQHandler+0x92>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	f003 0320 	and.w	r3, r3, #32
 80038de:	2b20      	cmp	r3, #32
 80038e0:	d11f      	bne.n	8003922 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	685a      	ldr	r2, [r3, #4]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80038f0:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80038f2:	2300      	movs	r3, #0
 80038f4:	613b      	str	r3, [r7, #16]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	68db      	ldr	r3, [r3, #12]
 80038fc:	613b      	str	r3, [r7, #16]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	613b      	str	r3, [r7, #16]
 8003906:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2201      	movs	r2, #1
 800390c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003914:	f043 0202 	orr.w	r2, r3, #2
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	f7ff fefb 	bl	8003718 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003928:	b2db      	uxtb	r3, r3
 800392a:	2b03      	cmp	r3, #3
 800392c:	d136      	bne.n	800399c <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	f003 0302 	and.w	r3, r3, #2
 8003934:	2b02      	cmp	r3, #2
 8003936:	d109      	bne.n	800394c <I2S_IRQHandler+0xbc>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003942:	2b80      	cmp	r3, #128	@ 0x80
 8003944:	d102      	bne.n	800394c <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f7ff ff45 	bl	80037d6 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	f003 0308 	and.w	r3, r3, #8
 8003952:	2b08      	cmp	r3, #8
 8003954:	d122      	bne.n	800399c <I2S_IRQHandler+0x10c>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	f003 0320 	and.w	r3, r3, #32
 8003960:	2b20      	cmp	r3, #32
 8003962:	d11b      	bne.n	800399c <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	685a      	ldr	r2, [r3, #4]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003972:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003974:	2300      	movs	r3, #0
 8003976:	60fb      	str	r3, [r7, #12]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	60fb      	str	r3, [r7, #12]
 8003980:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2201      	movs	r2, #1
 8003986:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800398e:	f043 0204 	orr.w	r2, r3, #4
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f7ff febe 	bl	8003718 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800399c:	bf00      	nop
 800399e:	3718      	adds	r7, #24
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}

080039a4 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b086      	sub	sp, #24
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	60f8      	str	r0, [r7, #12]
 80039ac:	60b9      	str	r1, [r7, #8]
 80039ae:	603b      	str	r3, [r7, #0]
 80039b0:	4613      	mov	r3, r2
 80039b2:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 80039b4:	f7fd ff10 	bl	80017d8 <HAL_GetTick>
 80039b8:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80039ba:	e018      	b.n	80039ee <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039c2:	d014      	beq.n	80039ee <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 80039c4:	f7fd ff08 	bl	80017d8 <HAL_GetTick>
 80039c8:	4602      	mov	r2, r0
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	683a      	ldr	r2, [r7, #0]
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d902      	bls.n	80039da <I2S_WaitFlagStateUntilTimeout+0x36>
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d109      	bne.n	80039ee <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2201      	movs	r2, #1
 80039de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2200      	movs	r2, #0
 80039e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 80039ea:	2303      	movs	r3, #3
 80039ec:	e00f      	b.n	8003a0e <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	689a      	ldr	r2, [r3, #8]
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	4013      	ands	r3, r2
 80039f8:	68ba      	ldr	r2, [r7, #8]
 80039fa:	429a      	cmp	r2, r3
 80039fc:	bf0c      	ite	eq
 80039fe:	2301      	moveq	r3, #1
 8003a00:	2300      	movne	r3, #0
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	461a      	mov	r2, r3
 8003a06:	79fb      	ldrb	r3, [r7, #7]
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d1d7      	bne.n	80039bc <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 8003a0c:	2300      	movs	r3, #0
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3718      	adds	r7, #24
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
	...

08003a18 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b088      	sub	sp, #32
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a92      	ldr	r2, [pc, #584]	@ (8003c78 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d101      	bne.n	8003a36 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003a32:	4b92      	ldr	r3, [pc, #584]	@ (8003c7c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003a34:	e001      	b.n	8003a3a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003a36:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a8b      	ldr	r2, [pc, #556]	@ (8003c78 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d101      	bne.n	8003a54 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003a50:	4b8a      	ldr	r3, [pc, #552]	@ (8003c7c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003a52:	e001      	b.n	8003a58 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003a54:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a64:	d004      	beq.n	8003a70 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	f040 8099 	bne.w	8003ba2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	f003 0302 	and.w	r3, r3, #2
 8003a76:	2b02      	cmp	r3, #2
 8003a78:	d107      	bne.n	8003a8a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d002      	beq.n	8003a8a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	f000 f925 	bl	8003cd4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003a8a:	69bb      	ldr	r3, [r7, #24]
 8003a8c:	f003 0301 	and.w	r3, r3, #1
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d107      	bne.n	8003aa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d002      	beq.n	8003aa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f000 f9c8 	bl	8003e34 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003aa4:	69bb      	ldr	r3, [r7, #24]
 8003aa6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003aaa:	2b40      	cmp	r3, #64	@ 0x40
 8003aac:	d13a      	bne.n	8003b24 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	f003 0320 	and.w	r3, r3, #32
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d035      	beq.n	8003b24 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a6e      	ldr	r2, [pc, #440]	@ (8003c78 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d101      	bne.n	8003ac6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003ac2:	4b6e      	ldr	r3, [pc, #440]	@ (8003c7c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ac4:	e001      	b.n	8003aca <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003ac6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003aca:	685a      	ldr	r2, [r3, #4]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4969      	ldr	r1, [pc, #420]	@ (8003c78 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003ad2:	428b      	cmp	r3, r1
 8003ad4:	d101      	bne.n	8003ada <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003ad6:	4b69      	ldr	r3, [pc, #420]	@ (8003c7c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ad8:	e001      	b.n	8003ade <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003ada:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003ade:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003ae2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	685a      	ldr	r2, [r3, #4]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003af2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003af4:	2300      	movs	r3, #0
 8003af6:	60fb      	str	r3, [r7, #12]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	68db      	ldr	r3, [r3, #12]
 8003afe:	60fb      	str	r3, [r7, #12]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	60fb      	str	r3, [r7, #12]
 8003b08:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b16:	f043 0202 	orr.w	r2, r3, #2
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f7ff fdfa 	bl	8003718 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	f003 0308 	and.w	r3, r3, #8
 8003b2a:	2b08      	cmp	r3, #8
 8003b2c:	f040 80c3 	bne.w	8003cb6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	f003 0320 	and.w	r3, r3, #32
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	f000 80bd 	beq.w	8003cb6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	685a      	ldr	r2, [r3, #4]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003b4a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a49      	ldr	r2, [pc, #292]	@ (8003c78 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d101      	bne.n	8003b5a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003b56:	4b49      	ldr	r3, [pc, #292]	@ (8003c7c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003b58:	e001      	b.n	8003b5e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003b5a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003b5e:	685a      	ldr	r2, [r3, #4]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4944      	ldr	r1, [pc, #272]	@ (8003c78 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003b66:	428b      	cmp	r3, r1
 8003b68:	d101      	bne.n	8003b6e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003b6a:	4b44      	ldr	r3, [pc, #272]	@ (8003c7c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003b6c:	e001      	b.n	8003b72 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003b6e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003b72:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003b76:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003b78:	2300      	movs	r3, #0
 8003b7a:	60bb      	str	r3, [r7, #8]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	60bb      	str	r3, [r7, #8]
 8003b84:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2201      	movs	r2, #1
 8003b8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b92:	f043 0204 	orr.w	r2, r3, #4
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f7ff fdbc 	bl	8003718 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003ba0:	e089      	b.n	8003cb6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003ba2:	69bb      	ldr	r3, [r7, #24]
 8003ba4:	f003 0302 	and.w	r3, r3, #2
 8003ba8:	2b02      	cmp	r3, #2
 8003baa:	d107      	bne.n	8003bbc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d002      	beq.n	8003bbc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f000 f8be 	bl	8003d38 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003bbc:	69fb      	ldr	r3, [r7, #28]
 8003bbe:	f003 0301 	and.w	r3, r3, #1
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d107      	bne.n	8003bd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d002      	beq.n	8003bd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f000 f8fd 	bl	8003dd0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003bd6:	69fb      	ldr	r3, [r7, #28]
 8003bd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bdc:	2b40      	cmp	r3, #64	@ 0x40
 8003bde:	d12f      	bne.n	8003c40 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	f003 0320 	and.w	r3, r3, #32
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d02a      	beq.n	8003c40 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	685a      	ldr	r2, [r3, #4]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003bf8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a1e      	ldr	r2, [pc, #120]	@ (8003c78 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d101      	bne.n	8003c08 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003c04:	4b1d      	ldr	r3, [pc, #116]	@ (8003c7c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003c06:	e001      	b.n	8003c0c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003c08:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003c0c:	685a      	ldr	r2, [r3, #4]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4919      	ldr	r1, [pc, #100]	@ (8003c78 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003c14:	428b      	cmp	r3, r1
 8003c16:	d101      	bne.n	8003c1c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003c18:	4b18      	ldr	r3, [pc, #96]	@ (8003c7c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003c1a:	e001      	b.n	8003c20 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003c1c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003c20:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003c24:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2201      	movs	r2, #1
 8003c2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c32:	f043 0202 	orr.w	r2, r3, #2
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f7ff fd6c 	bl	8003718 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003c40:	69bb      	ldr	r3, [r7, #24]
 8003c42:	f003 0308 	and.w	r3, r3, #8
 8003c46:	2b08      	cmp	r3, #8
 8003c48:	d136      	bne.n	8003cb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	f003 0320 	and.w	r3, r3, #32
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d031      	beq.n	8003cb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a07      	ldr	r2, [pc, #28]	@ (8003c78 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d101      	bne.n	8003c62 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003c5e:	4b07      	ldr	r3, [pc, #28]	@ (8003c7c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003c60:	e001      	b.n	8003c66 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003c62:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003c66:	685a      	ldr	r2, [r3, #4]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4902      	ldr	r1, [pc, #8]	@ (8003c78 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003c6e:	428b      	cmp	r3, r1
 8003c70:	d106      	bne.n	8003c80 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003c72:	4b02      	ldr	r3, [pc, #8]	@ (8003c7c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003c74:	e006      	b.n	8003c84 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003c76:	bf00      	nop
 8003c78:	40003800 	.word	0x40003800
 8003c7c:	40003400 	.word	0x40003400
 8003c80:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003c84:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003c88:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	685a      	ldr	r2, [r3, #4]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003c98:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ca6:	f043 0204 	orr.w	r2, r3, #4
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f7ff fd32 	bl	8003718 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003cb4:	e000      	b.n	8003cb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003cb6:	bf00      	nop
}
 8003cb8:	bf00      	nop
 8003cba:	3720      	adds	r7, #32
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}

08003cc0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b083      	sub	sp, #12
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003cc8:	bf00      	nop
 8003cca:	370c      	adds	r7, #12
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr

08003cd4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b082      	sub	sp, #8
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ce0:	1c99      	adds	r1, r3, #2
 8003ce2:	687a      	ldr	r2, [r7, #4]
 8003ce4:	6251      	str	r1, [r2, #36]	@ 0x24
 8003ce6:	881a      	ldrh	r2, [r3, #0]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	3b01      	subs	r3, #1
 8003cf6:	b29a      	uxth	r2, r3
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d113      	bne.n	8003d2e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	685a      	ldr	r2, [r3, #4]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003d14:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d106      	bne.n	8003d2e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2201      	movs	r2, #1
 8003d24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f7ff ffc9 	bl	8003cc0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003d2e:	bf00      	nop
 8003d30:	3708      	adds	r7, #8
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
	...

08003d38 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b082      	sub	sp, #8
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d44:	1c99      	adds	r1, r3, #2
 8003d46:	687a      	ldr	r2, [r7, #4]
 8003d48:	6251      	str	r1, [r2, #36]	@ 0x24
 8003d4a:	8819      	ldrh	r1, [r3, #0]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a1d      	ldr	r2, [pc, #116]	@ (8003dc8 <I2SEx_TxISR_I2SExt+0x90>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d101      	bne.n	8003d5a <I2SEx_TxISR_I2SExt+0x22>
 8003d56:	4b1d      	ldr	r3, [pc, #116]	@ (8003dcc <I2SEx_TxISR_I2SExt+0x94>)
 8003d58:	e001      	b.n	8003d5e <I2SEx_TxISR_I2SExt+0x26>
 8003d5a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003d5e:	460a      	mov	r2, r1
 8003d60:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	3b01      	subs	r3, #1
 8003d6a:	b29a      	uxth	r2, r3
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d74:	b29b      	uxth	r3, r3
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d121      	bne.n	8003dbe <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a12      	ldr	r2, [pc, #72]	@ (8003dc8 <I2SEx_TxISR_I2SExt+0x90>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d101      	bne.n	8003d88 <I2SEx_TxISR_I2SExt+0x50>
 8003d84:	4b11      	ldr	r3, [pc, #68]	@ (8003dcc <I2SEx_TxISR_I2SExt+0x94>)
 8003d86:	e001      	b.n	8003d8c <I2SEx_TxISR_I2SExt+0x54>
 8003d88:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003d8c:	685a      	ldr	r2, [r3, #4]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	490d      	ldr	r1, [pc, #52]	@ (8003dc8 <I2SEx_TxISR_I2SExt+0x90>)
 8003d94:	428b      	cmp	r3, r1
 8003d96:	d101      	bne.n	8003d9c <I2SEx_TxISR_I2SExt+0x64>
 8003d98:	4b0c      	ldr	r3, [pc, #48]	@ (8003dcc <I2SEx_TxISR_I2SExt+0x94>)
 8003d9a:	e001      	b.n	8003da0 <I2SEx_TxISR_I2SExt+0x68>
 8003d9c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003da0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003da4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003daa:	b29b      	uxth	r3, r3
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d106      	bne.n	8003dbe <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2201      	movs	r2, #1
 8003db4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	f7ff ff81 	bl	8003cc0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003dbe:	bf00      	nop
 8003dc0:	3708      	adds	r7, #8
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	40003800 	.word	0x40003800
 8003dcc:	40003400 	.word	0x40003400

08003dd0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b082      	sub	sp, #8
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	68d8      	ldr	r0, [r3, #12]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003de2:	1c99      	adds	r1, r3, #2
 8003de4:	687a      	ldr	r2, [r7, #4]
 8003de6:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8003de8:	b282      	uxth	r2, r0
 8003dea:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003df0:	b29b      	uxth	r3, r3
 8003df2:	3b01      	subs	r3, #1
 8003df4:	b29a      	uxth	r2, r3
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003dfe:	b29b      	uxth	r3, r3
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d113      	bne.n	8003e2c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	685a      	ldr	r2, [r3, #4]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003e12:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e18:	b29b      	uxth	r3, r3
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d106      	bne.n	8003e2c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2201      	movs	r2, #1
 8003e22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f7ff ff4a 	bl	8003cc0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003e2c:	bf00      	nop
 8003e2e:	3708      	adds	r7, #8
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}

08003e34 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b082      	sub	sp, #8
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a20      	ldr	r2, [pc, #128]	@ (8003ec4 <I2SEx_RxISR_I2SExt+0x90>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d101      	bne.n	8003e4a <I2SEx_RxISR_I2SExt+0x16>
 8003e46:	4b20      	ldr	r3, [pc, #128]	@ (8003ec8 <I2SEx_RxISR_I2SExt+0x94>)
 8003e48:	e001      	b.n	8003e4e <I2SEx_RxISR_I2SExt+0x1a>
 8003e4a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003e4e:	68d8      	ldr	r0, [r3, #12]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e54:	1c99      	adds	r1, r3, #2
 8003e56:	687a      	ldr	r2, [r7, #4]
 8003e58:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8003e5a:	b282      	uxth	r2, r0
 8003e5c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	3b01      	subs	r3, #1
 8003e66:	b29a      	uxth	r2, r3
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003e70:	b29b      	uxth	r3, r3
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d121      	bne.n	8003eba <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a12      	ldr	r2, [pc, #72]	@ (8003ec4 <I2SEx_RxISR_I2SExt+0x90>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d101      	bne.n	8003e84 <I2SEx_RxISR_I2SExt+0x50>
 8003e80:	4b11      	ldr	r3, [pc, #68]	@ (8003ec8 <I2SEx_RxISR_I2SExt+0x94>)
 8003e82:	e001      	b.n	8003e88 <I2SEx_RxISR_I2SExt+0x54>
 8003e84:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003e88:	685a      	ldr	r2, [r3, #4]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	490d      	ldr	r1, [pc, #52]	@ (8003ec4 <I2SEx_RxISR_I2SExt+0x90>)
 8003e90:	428b      	cmp	r3, r1
 8003e92:	d101      	bne.n	8003e98 <I2SEx_RxISR_I2SExt+0x64>
 8003e94:	4b0c      	ldr	r3, [pc, #48]	@ (8003ec8 <I2SEx_RxISR_I2SExt+0x94>)
 8003e96:	e001      	b.n	8003e9c <I2SEx_RxISR_I2SExt+0x68>
 8003e98:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003e9c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003ea0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d106      	bne.n	8003eba <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003eb4:	6878      	ldr	r0, [r7, #4]
 8003eb6:	f7ff ff03 	bl	8003cc0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003eba:	bf00      	nop
 8003ebc:	3708      	adds	r7, #8
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}
 8003ec2:	bf00      	nop
 8003ec4:	40003800 	.word	0x40003800
 8003ec8:	40003400 	.word	0x40003400

08003ecc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b086      	sub	sp, #24
 8003ed0:	af02      	add	r7, sp, #8
 8003ed2:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d101      	bne.n	8003ede <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e101      	b.n	80040e2 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003eea:	b2db      	uxtb	r3, r3
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d106      	bne.n	8003efe <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	f005 fd51 	bl	80099a0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2203      	movs	r2, #3
 8003f02:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003f0c:	d102      	bne.n	8003f14 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2200      	movs	r2, #0
 8003f12:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f002 f8f6 	bl	800610a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6818      	ldr	r0, [r3, #0]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	7c1a      	ldrb	r2, [r3, #16]
 8003f26:	f88d 2000 	strb.w	r2, [sp]
 8003f2a:	3304      	adds	r3, #4
 8003f2c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003f2e:	f001 ffd5 	bl	8005edc <USB_CoreInit>
 8003f32:	4603      	mov	r3, r0
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d005      	beq.n	8003f44 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2202      	movs	r2, #2
 8003f3c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	e0ce      	b.n	80040e2 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	2100      	movs	r1, #0
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f002 f8ee 	bl	800612c <USB_SetCurrentMode>
 8003f50:	4603      	mov	r3, r0
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d005      	beq.n	8003f62 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2202      	movs	r2, #2
 8003f5a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e0bf      	b.n	80040e2 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f62:	2300      	movs	r3, #0
 8003f64:	73fb      	strb	r3, [r7, #15]
 8003f66:	e04a      	b.n	8003ffe <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003f68:	7bfa      	ldrb	r2, [r7, #15]
 8003f6a:	6879      	ldr	r1, [r7, #4]
 8003f6c:	4613      	mov	r3, r2
 8003f6e:	00db      	lsls	r3, r3, #3
 8003f70:	4413      	add	r3, r2
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	440b      	add	r3, r1
 8003f76:	3315      	adds	r3, #21
 8003f78:	2201      	movs	r2, #1
 8003f7a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003f7c:	7bfa      	ldrb	r2, [r7, #15]
 8003f7e:	6879      	ldr	r1, [r7, #4]
 8003f80:	4613      	mov	r3, r2
 8003f82:	00db      	lsls	r3, r3, #3
 8003f84:	4413      	add	r3, r2
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	440b      	add	r3, r1
 8003f8a:	3314      	adds	r3, #20
 8003f8c:	7bfa      	ldrb	r2, [r7, #15]
 8003f8e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003f90:	7bfa      	ldrb	r2, [r7, #15]
 8003f92:	7bfb      	ldrb	r3, [r7, #15]
 8003f94:	b298      	uxth	r0, r3
 8003f96:	6879      	ldr	r1, [r7, #4]
 8003f98:	4613      	mov	r3, r2
 8003f9a:	00db      	lsls	r3, r3, #3
 8003f9c:	4413      	add	r3, r2
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	440b      	add	r3, r1
 8003fa2:	332e      	adds	r3, #46	@ 0x2e
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003fa8:	7bfa      	ldrb	r2, [r7, #15]
 8003faa:	6879      	ldr	r1, [r7, #4]
 8003fac:	4613      	mov	r3, r2
 8003fae:	00db      	lsls	r3, r3, #3
 8003fb0:	4413      	add	r3, r2
 8003fb2:	009b      	lsls	r3, r3, #2
 8003fb4:	440b      	add	r3, r1
 8003fb6:	3318      	adds	r3, #24
 8003fb8:	2200      	movs	r2, #0
 8003fba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003fbc:	7bfa      	ldrb	r2, [r7, #15]
 8003fbe:	6879      	ldr	r1, [r7, #4]
 8003fc0:	4613      	mov	r3, r2
 8003fc2:	00db      	lsls	r3, r3, #3
 8003fc4:	4413      	add	r3, r2
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	440b      	add	r3, r1
 8003fca:	331c      	adds	r3, #28
 8003fcc:	2200      	movs	r2, #0
 8003fce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003fd0:	7bfa      	ldrb	r2, [r7, #15]
 8003fd2:	6879      	ldr	r1, [r7, #4]
 8003fd4:	4613      	mov	r3, r2
 8003fd6:	00db      	lsls	r3, r3, #3
 8003fd8:	4413      	add	r3, r2
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	440b      	add	r3, r1
 8003fde:	3320      	adds	r3, #32
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003fe4:	7bfa      	ldrb	r2, [r7, #15]
 8003fe6:	6879      	ldr	r1, [r7, #4]
 8003fe8:	4613      	mov	r3, r2
 8003fea:	00db      	lsls	r3, r3, #3
 8003fec:	4413      	add	r3, r2
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	440b      	add	r3, r1
 8003ff2:	3324      	adds	r3, #36	@ 0x24
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ff8:	7bfb      	ldrb	r3, [r7, #15]
 8003ffa:	3301      	adds	r3, #1
 8003ffc:	73fb      	strb	r3, [r7, #15]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	791b      	ldrb	r3, [r3, #4]
 8004002:	7bfa      	ldrb	r2, [r7, #15]
 8004004:	429a      	cmp	r2, r3
 8004006:	d3af      	bcc.n	8003f68 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004008:	2300      	movs	r3, #0
 800400a:	73fb      	strb	r3, [r7, #15]
 800400c:	e044      	b.n	8004098 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800400e:	7bfa      	ldrb	r2, [r7, #15]
 8004010:	6879      	ldr	r1, [r7, #4]
 8004012:	4613      	mov	r3, r2
 8004014:	00db      	lsls	r3, r3, #3
 8004016:	4413      	add	r3, r2
 8004018:	009b      	lsls	r3, r3, #2
 800401a:	440b      	add	r3, r1
 800401c:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8004020:	2200      	movs	r2, #0
 8004022:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004024:	7bfa      	ldrb	r2, [r7, #15]
 8004026:	6879      	ldr	r1, [r7, #4]
 8004028:	4613      	mov	r3, r2
 800402a:	00db      	lsls	r3, r3, #3
 800402c:	4413      	add	r3, r2
 800402e:	009b      	lsls	r3, r3, #2
 8004030:	440b      	add	r3, r1
 8004032:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8004036:	7bfa      	ldrb	r2, [r7, #15]
 8004038:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800403a:	7bfa      	ldrb	r2, [r7, #15]
 800403c:	6879      	ldr	r1, [r7, #4]
 800403e:	4613      	mov	r3, r2
 8004040:	00db      	lsls	r3, r3, #3
 8004042:	4413      	add	r3, r2
 8004044:	009b      	lsls	r3, r3, #2
 8004046:	440b      	add	r3, r1
 8004048:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800404c:	2200      	movs	r2, #0
 800404e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004050:	7bfa      	ldrb	r2, [r7, #15]
 8004052:	6879      	ldr	r1, [r7, #4]
 8004054:	4613      	mov	r3, r2
 8004056:	00db      	lsls	r3, r3, #3
 8004058:	4413      	add	r3, r2
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	440b      	add	r3, r1
 800405e:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8004062:	2200      	movs	r2, #0
 8004064:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004066:	7bfa      	ldrb	r2, [r7, #15]
 8004068:	6879      	ldr	r1, [r7, #4]
 800406a:	4613      	mov	r3, r2
 800406c:	00db      	lsls	r3, r3, #3
 800406e:	4413      	add	r3, r2
 8004070:	009b      	lsls	r3, r3, #2
 8004072:	440b      	add	r3, r1
 8004074:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004078:	2200      	movs	r2, #0
 800407a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800407c:	7bfa      	ldrb	r2, [r7, #15]
 800407e:	6879      	ldr	r1, [r7, #4]
 8004080:	4613      	mov	r3, r2
 8004082:	00db      	lsls	r3, r3, #3
 8004084:	4413      	add	r3, r2
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	440b      	add	r3, r1
 800408a:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800408e:	2200      	movs	r2, #0
 8004090:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004092:	7bfb      	ldrb	r3, [r7, #15]
 8004094:	3301      	adds	r3, #1
 8004096:	73fb      	strb	r3, [r7, #15]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	791b      	ldrb	r3, [r3, #4]
 800409c:	7bfa      	ldrb	r2, [r7, #15]
 800409e:	429a      	cmp	r2, r3
 80040a0:	d3b5      	bcc.n	800400e <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6818      	ldr	r0, [r3, #0]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	7c1a      	ldrb	r2, [r3, #16]
 80040aa:	f88d 2000 	strb.w	r2, [sp]
 80040ae:	3304      	adds	r3, #4
 80040b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80040b2:	f002 f887 	bl	80061c4 <USB_DevInit>
 80040b6:	4603      	mov	r3, r0
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d005      	beq.n	80040c8 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2202      	movs	r2, #2
 80040c0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e00c      	b.n	80040e2 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2200      	movs	r2, #0
 80040cc:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2201      	movs	r2, #1
 80040d2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4618      	mov	r0, r3
 80040dc:	f003 f8d1 	bl	8007282 <USB_DevDisconnect>

  return HAL_OK;
 80040e0:	2300      	movs	r3, #0
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	3710      	adds	r7, #16
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}

080040ea <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80040ea:	b580      	push	{r7, lr}
 80040ec:	b084      	sub	sp, #16
 80040ee:	af00      	add	r7, sp, #0
 80040f0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d101      	bne.n	8004106 <HAL_PCD_Start+0x1c>
 8004102:	2302      	movs	r3, #2
 8004104:	e022      	b.n	800414c <HAL_PCD_Start+0x62>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2201      	movs	r2, #1
 800410a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	68db      	ldr	r3, [r3, #12]
 8004112:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004116:	2b00      	cmp	r3, #0
 8004118:	d009      	beq.n	800412e <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800411e:	2b01      	cmp	r3, #1
 8004120:	d105      	bne.n	800412e <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004126:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4618      	mov	r0, r3
 8004134:	f001 ffd8 	bl	80060e8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4618      	mov	r0, r3
 800413e:	f003 f87f 	bl	8007240 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2200      	movs	r2, #0
 8004146:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800414a:	2300      	movs	r3, #0
}
 800414c:	4618      	mov	r0, r3
 800414e:	3710      	adds	r7, #16
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}

08004154 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004154:	b590      	push	{r4, r7, lr}
 8004156:	b08d      	sub	sp, #52	@ 0x34
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004162:	6a3b      	ldr	r3, [r7, #32]
 8004164:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4618      	mov	r0, r3
 800416c:	f003 f93d 	bl	80073ea <USB_GetMode>
 8004170:	4603      	mov	r3, r0
 8004172:	2b00      	cmp	r3, #0
 8004174:	f040 8491 	bne.w	8004a9a <HAL_PCD_IRQHandler+0x946>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4618      	mov	r0, r3
 800417e:	f003 f8a1 	bl	80072c4 <USB_ReadInterrupts>
 8004182:	4603      	mov	r3, r0
 8004184:	2b00      	cmp	r3, #0
 8004186:	f000 8487 	beq.w	8004a98 <HAL_PCD_IRQHandler+0x944>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800418a:	69fb      	ldr	r3, [r7, #28]
 800418c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	0a1b      	lsrs	r3, r3, #8
 8004194:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4618      	mov	r0, r3
 80041a4:	f003 f88e 	bl	80072c4 <USB_ReadInterrupts>
 80041a8:	4603      	mov	r3, r0
 80041aa:	f003 0302 	and.w	r3, r3, #2
 80041ae:	2b02      	cmp	r3, #2
 80041b0:	d107      	bne.n	80041c2 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	695a      	ldr	r2, [r3, #20]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f002 0202 	and.w	r2, r2, #2
 80041c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4618      	mov	r0, r3
 80041c8:	f003 f87c 	bl	80072c4 <USB_ReadInterrupts>
 80041cc:	4603      	mov	r3, r0
 80041ce:	f003 0310 	and.w	r3, r3, #16
 80041d2:	2b10      	cmp	r3, #16
 80041d4:	d161      	bne.n	800429a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	699a      	ldr	r2, [r3, #24]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f022 0210 	bic.w	r2, r2, #16
 80041e4:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80041e6:	6a3b      	ldr	r3, [r7, #32]
 80041e8:	6a1b      	ldr	r3, [r3, #32]
 80041ea:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80041ec:	69bb      	ldr	r3, [r7, #24]
 80041ee:	f003 020f 	and.w	r2, r3, #15
 80041f2:	4613      	mov	r3, r2
 80041f4:	00db      	lsls	r3, r3, #3
 80041f6:	4413      	add	r3, r2
 80041f8:	009b      	lsls	r3, r3, #2
 80041fa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80041fe:	687a      	ldr	r2, [r7, #4]
 8004200:	4413      	add	r3, r2
 8004202:	3304      	adds	r3, #4
 8004204:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004206:	69bb      	ldr	r3, [r7, #24]
 8004208:	0c5b      	lsrs	r3, r3, #17
 800420a:	f003 030f 	and.w	r3, r3, #15
 800420e:	2b02      	cmp	r3, #2
 8004210:	d124      	bne.n	800425c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004212:	69ba      	ldr	r2, [r7, #24]
 8004214:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8004218:	4013      	ands	r3, r2
 800421a:	2b00      	cmp	r3, #0
 800421c:	d035      	beq.n	800428a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004222:	69bb      	ldr	r3, [r7, #24]
 8004224:	091b      	lsrs	r3, r3, #4
 8004226:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004228:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800422c:	b29b      	uxth	r3, r3
 800422e:	461a      	mov	r2, r3
 8004230:	6a38      	ldr	r0, [r7, #32]
 8004232:	f002 feb3 	bl	8006f9c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	68da      	ldr	r2, [r3, #12]
 800423a:	69bb      	ldr	r3, [r7, #24]
 800423c:	091b      	lsrs	r3, r3, #4
 800423e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004242:	441a      	add	r2, r3
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	695a      	ldr	r2, [r3, #20]
 800424c:	69bb      	ldr	r3, [r7, #24]
 800424e:	091b      	lsrs	r3, r3, #4
 8004250:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004254:	441a      	add	r2, r3
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	615a      	str	r2, [r3, #20]
 800425a:	e016      	b.n	800428a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800425c:	69bb      	ldr	r3, [r7, #24]
 800425e:	0c5b      	lsrs	r3, r3, #17
 8004260:	f003 030f 	and.w	r3, r3, #15
 8004264:	2b06      	cmp	r3, #6
 8004266:	d110      	bne.n	800428a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800426e:	2208      	movs	r2, #8
 8004270:	4619      	mov	r1, r3
 8004272:	6a38      	ldr	r0, [r7, #32]
 8004274:	f002 fe92 	bl	8006f9c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	695a      	ldr	r2, [r3, #20]
 800427c:	69bb      	ldr	r3, [r7, #24]
 800427e:	091b      	lsrs	r3, r3, #4
 8004280:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004284:	441a      	add	r2, r3
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	699a      	ldr	r2, [r3, #24]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f042 0210 	orr.w	r2, r2, #16
 8004298:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4618      	mov	r0, r3
 80042a0:	f003 f810 	bl	80072c4 <USB_ReadInterrupts>
 80042a4:	4603      	mov	r3, r0
 80042a6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80042aa:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80042ae:	f040 80ac 	bne.w	800440a <HAL_PCD_IRQHandler+0x2b6>
    {
      epnum = 0U;
 80042b2:	2300      	movs	r3, #0
 80042b4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4618      	mov	r0, r3
 80042bc:	f003 f815 	bl	80072ea <USB_ReadDevAllOutEpInterrupt>
 80042c0:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80042c2:	e09e      	b.n	8004402 <HAL_PCD_IRQHandler+0x2ae>
      {
        if ((ep_intr & 0x1U) != 0U)
 80042c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042c6:	f003 0301 	and.w	r3, r3, #1
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	f000 8093 	beq.w	80043f6 <HAL_PCD_IRQHandler+0x2a2>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042d6:	b2d2      	uxtb	r2, r2
 80042d8:	4611      	mov	r1, r2
 80042da:	4618      	mov	r0, r3
 80042dc:	f003 f839 	bl	8007352 <USB_ReadDevOutEPInterrupt>
 80042e0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	f003 0301 	and.w	r3, r3, #1
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d011      	beq.n	8004310 <HAL_PCD_IRQHandler+0x1bc>
          {
        	if(epnum){
 80042ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d001      	beq.n	80042f6 <HAL_PCD_IRQHandler+0x1a2>
        		int hello = 0;
 80042f2:	2300      	movs	r3, #0
 80042f4:	60fb      	str	r3, [r7, #12]
        	}
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80042f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042f8:	015a      	lsls	r2, r3, #5
 80042fa:	69fb      	ldr	r3, [r7, #28]
 80042fc:	4413      	add	r3, r2
 80042fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004302:	461a      	mov	r2, r3
 8004304:	2301      	movs	r3, #1
 8004306:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004308:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f000 fed6 	bl	80050bc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	f003 0308 	and.w	r3, r3, #8
 8004316:	2b00      	cmp	r3, #0
 8004318:	d00c      	beq.n	8004334 <HAL_PCD_IRQHandler+0x1e0>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800431a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800431c:	015a      	lsls	r2, r3, #5
 800431e:	69fb      	ldr	r3, [r7, #28]
 8004320:	4413      	add	r3, r2
 8004322:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004326:	461a      	mov	r2, r3
 8004328:	2308      	movs	r3, #8
 800432a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800432c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f000 ffac 	bl	800528c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	f003 0310 	and.w	r3, r3, #16
 800433a:	2b00      	cmp	r3, #0
 800433c:	d008      	beq.n	8004350 <HAL_PCD_IRQHandler+0x1fc>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800433e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004340:	015a      	lsls	r2, r3, #5
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	4413      	add	r3, r2
 8004346:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800434a:	461a      	mov	r2, r3
 800434c:	2310      	movs	r3, #16
 800434e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	f003 0302 	and.w	r3, r3, #2
 8004356:	2b00      	cmp	r3, #0
 8004358:	d030      	beq.n	80043bc <HAL_PCD_IRQHandler+0x268>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800435a:	6a3b      	ldr	r3, [r7, #32]
 800435c:	695b      	ldr	r3, [r3, #20]
 800435e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004362:	2b80      	cmp	r3, #128	@ 0x80
 8004364:	d109      	bne.n	800437a <HAL_PCD_IRQHandler+0x226>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004366:	69fb      	ldr	r3, [r7, #28]
 8004368:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	69fa      	ldr	r2, [r7, #28]
 8004370:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004374:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004378:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800437a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800437c:	4613      	mov	r3, r2
 800437e:	00db      	lsls	r3, r3, #3
 8004380:	4413      	add	r3, r2
 8004382:	009b      	lsls	r3, r3, #2
 8004384:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004388:	687a      	ldr	r2, [r7, #4]
 800438a:	4413      	add	r3, r2
 800438c:	3304      	adds	r3, #4
 800438e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	78db      	ldrb	r3, [r3, #3]
 8004394:	2b01      	cmp	r3, #1
 8004396:	d108      	bne.n	80043aa <HAL_PCD_IRQHandler+0x256>
            {
              ep->is_iso_incomplete = 0U;
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	2200      	movs	r2, #0
 800439c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800439e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	4619      	mov	r1, r3
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f005 fbf7 	bl	8009b98 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80043aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ac:	015a      	lsls	r2, r3, #5
 80043ae:	69fb      	ldr	r3, [r7, #28]
 80043b0:	4413      	add	r3, r2
 80043b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043b6:	461a      	mov	r2, r3
 80043b8:	2302      	movs	r3, #2
 80043ba:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	f003 0320 	and.w	r3, r3, #32
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d008      	beq.n	80043d8 <HAL_PCD_IRQHandler+0x284>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80043c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043c8:	015a      	lsls	r2, r3, #5
 80043ca:	69fb      	ldr	r3, [r7, #28]
 80043cc:	4413      	add	r3, r2
 80043ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043d2:	461a      	mov	r2, r3
 80043d4:	2320      	movs	r3, #32
 80043d6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d009      	beq.n	80043f6 <HAL_PCD_IRQHandler+0x2a2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80043e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043e4:	015a      	lsls	r2, r3, #5
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	4413      	add	r3, r2
 80043ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043ee:	461a      	mov	r2, r3
 80043f0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80043f4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80043f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043f8:	3301      	adds	r3, #1
 80043fa:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80043fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043fe:	085b      	lsrs	r3, r3, #1
 8004400:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004402:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004404:	2b00      	cmp	r3, #0
 8004406:	f47f af5d 	bne.w	80042c4 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4618      	mov	r0, r3
 8004410:	f002 ff58 	bl	80072c4 <USB_ReadInterrupts>
 8004414:	4603      	mov	r3, r0
 8004416:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800441a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800441e:	f040 80db 	bne.w	80045d8 <HAL_PCD_IRQHandler+0x484>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4618      	mov	r0, r3
 8004428:	f002 ff79 	bl	800731e <USB_ReadDevAllInEpInterrupt>
 800442c:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800442e:	2300      	movs	r3, #0
 8004430:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8004432:	e0cd      	b.n	80045d0 <HAL_PCD_IRQHandler+0x47c>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004434:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004436:	f003 0301 	and.w	r3, r3, #1
 800443a:	2b00      	cmp	r3, #0
 800443c:	f000 80c2 	beq.w	80045c4 <HAL_PCD_IRQHandler+0x470>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004446:	b2d2      	uxtb	r2, r2
 8004448:	4611      	mov	r1, r2
 800444a:	4618      	mov	r0, r3
 800444c:	f002 ff9f 	bl	800738e <USB_ReadDevInEPInterrupt>
 8004450:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	f003 0301 	and.w	r3, r3, #1
 8004458:	2b00      	cmp	r3, #0
 800445a:	d057      	beq.n	800450c <HAL_PCD_IRQHandler+0x3b8>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800445c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800445e:	f003 030f 	and.w	r3, r3, #15
 8004462:	2201      	movs	r2, #1
 8004464:	fa02 f303 	lsl.w	r3, r2, r3
 8004468:	60bb      	str	r3, [r7, #8]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800446a:	69fb      	ldr	r3, [r7, #28]
 800446c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004470:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	43db      	mvns	r3, r3
 8004476:	69f9      	ldr	r1, [r7, #28]
 8004478:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800447c:	4013      	ands	r3, r2
 800447e:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004482:	015a      	lsls	r2, r3, #5
 8004484:	69fb      	ldr	r3, [r7, #28]
 8004486:	4413      	add	r3, r2
 8004488:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800448c:	461a      	mov	r2, r3
 800448e:	2301      	movs	r3, #1
 8004490:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	799b      	ldrb	r3, [r3, #6]
 8004496:	2b01      	cmp	r3, #1
 8004498:	d132      	bne.n	8004500 <HAL_PCD_IRQHandler+0x3ac>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800449a:	6879      	ldr	r1, [r7, #4]
 800449c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800449e:	4613      	mov	r3, r2
 80044a0:	00db      	lsls	r3, r3, #3
 80044a2:	4413      	add	r3, r2
 80044a4:	009b      	lsls	r3, r3, #2
 80044a6:	440b      	add	r3, r1
 80044a8:	3320      	adds	r3, #32
 80044aa:	6819      	ldr	r1, [r3, #0]
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044b0:	4613      	mov	r3, r2
 80044b2:	00db      	lsls	r3, r3, #3
 80044b4:	4413      	add	r3, r2
 80044b6:	009b      	lsls	r3, r3, #2
 80044b8:	4403      	add	r3, r0
 80044ba:	331c      	adds	r3, #28
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4419      	add	r1, r3
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044c4:	4613      	mov	r3, r2
 80044c6:	00db      	lsls	r3, r3, #3
 80044c8:	4413      	add	r3, r2
 80044ca:	009b      	lsls	r3, r3, #2
 80044cc:	4403      	add	r3, r0
 80044ce:	3320      	adds	r3, #32
 80044d0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80044d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d113      	bne.n	8004500 <HAL_PCD_IRQHandler+0x3ac>
 80044d8:	6879      	ldr	r1, [r7, #4]
 80044da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044dc:	4613      	mov	r3, r2
 80044de:	00db      	lsls	r3, r3, #3
 80044e0:	4413      	add	r3, r2
 80044e2:	009b      	lsls	r3, r3, #2
 80044e4:	440b      	add	r3, r1
 80044e6:	3324      	adds	r3, #36	@ 0x24
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d108      	bne.n	8004500 <HAL_PCD_IRQHandler+0x3ac>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6818      	ldr	r0, [r3, #0]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80044f8:	461a      	mov	r2, r3
 80044fa:	2101      	movs	r1, #1
 80044fc:	f002 ffa6 	bl	800744c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004502:	b2db      	uxtb	r3, r3
 8004504:	4619      	mov	r1, r3
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f005 facb 	bl	8009aa2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	f003 0308 	and.w	r3, r3, #8
 8004512:	2b00      	cmp	r3, #0
 8004514:	d008      	beq.n	8004528 <HAL_PCD_IRQHandler+0x3d4>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004518:	015a      	lsls	r2, r3, #5
 800451a:	69fb      	ldr	r3, [r7, #28]
 800451c:	4413      	add	r3, r2
 800451e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004522:	461a      	mov	r2, r3
 8004524:	2308      	movs	r3, #8
 8004526:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	f003 0310 	and.w	r3, r3, #16
 800452e:	2b00      	cmp	r3, #0
 8004530:	d008      	beq.n	8004544 <HAL_PCD_IRQHandler+0x3f0>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004534:	015a      	lsls	r2, r3, #5
 8004536:	69fb      	ldr	r3, [r7, #28]
 8004538:	4413      	add	r3, r2
 800453a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800453e:	461a      	mov	r2, r3
 8004540:	2310      	movs	r3, #16
 8004542:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800454a:	2b00      	cmp	r3, #0
 800454c:	d008      	beq.n	8004560 <HAL_PCD_IRQHandler+0x40c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800454e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004550:	015a      	lsls	r2, r3, #5
 8004552:	69fb      	ldr	r3, [r7, #28]
 8004554:	4413      	add	r3, r2
 8004556:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800455a:	461a      	mov	r2, r3
 800455c:	2340      	movs	r3, #64	@ 0x40
 800455e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	f003 0302 	and.w	r3, r3, #2
 8004566:	2b00      	cmp	r3, #0
 8004568:	d023      	beq.n	80045b2 <HAL_PCD_IRQHandler+0x45e>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800456a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800456c:	6a38      	ldr	r0, [r7, #32]
 800456e:	f001 ff8d 	bl	800648c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004572:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004574:	4613      	mov	r3, r2
 8004576:	00db      	lsls	r3, r3, #3
 8004578:	4413      	add	r3, r2
 800457a:	009b      	lsls	r3, r3, #2
 800457c:	3310      	adds	r3, #16
 800457e:	687a      	ldr	r2, [r7, #4]
 8004580:	4413      	add	r3, r2
 8004582:	3304      	adds	r3, #4
 8004584:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	78db      	ldrb	r3, [r3, #3]
 800458a:	2b01      	cmp	r3, #1
 800458c:	d108      	bne.n	80045a0 <HAL_PCD_IRQHandler+0x44c>
            {
              ep->is_iso_incomplete = 0U;
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	2200      	movs	r2, #0
 8004592:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004596:	b2db      	uxtb	r3, r3
 8004598:	4619      	mov	r1, r3
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f005 fb0e 	bl	8009bbc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80045a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045a2:	015a      	lsls	r2, r3, #5
 80045a4:	69fb      	ldr	r3, [r7, #28]
 80045a6:	4413      	add	r3, r2
 80045a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80045ac:	461a      	mov	r2, r3
 80045ae:	2302      	movs	r3, #2
 80045b0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d003      	beq.n	80045c4 <HAL_PCD_IRQHandler+0x470>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80045bc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	f000 fcef 	bl	8004fa2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80045c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045c6:	3301      	adds	r3, #1
 80045c8:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80045ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045cc:	085b      	lsrs	r3, r3, #1
 80045ce:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80045d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	f47f af2e 	bne.w	8004434 <HAL_PCD_IRQHandler+0x2e0>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4618      	mov	r0, r3
 80045de:	f002 fe71 	bl	80072c4 <USB_ReadInterrupts>
 80045e2:	4603      	mov	r3, r0
 80045e4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80045e8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80045ec:	d122      	bne.n	8004634 <HAL_PCD_IRQHandler+0x4e0>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80045ee:	69fb      	ldr	r3, [r7, #28]
 80045f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	69fa      	ldr	r2, [r7, #28]
 80045f8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80045fc:	f023 0301 	bic.w	r3, r3, #1
 8004600:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8004608:	2b01      	cmp	r3, #1
 800460a:	d108      	bne.n	800461e <HAL_PCD_IRQHandler+0x4ca>
      {
        hpcd->LPM_State = LPM_L0;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2200      	movs	r2, #0
 8004610:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004614:	2100      	movs	r1, #0
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f000 fed6 	bl	80053c8 <HAL_PCDEx_LPM_Callback>
 800461c:	e002      	b.n	8004624 <HAL_PCD_IRQHandler+0x4d0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f005 faac 	bl	8009b7c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	695a      	ldr	r2, [r3, #20]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8004632:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4618      	mov	r0, r3
 800463a:	f002 fe43 	bl	80072c4 <USB_ReadInterrupts>
 800463e:	4603      	mov	r3, r0
 8004640:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004644:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004648:	d112      	bne.n	8004670 <HAL_PCD_IRQHandler+0x51c>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800464a:	69fb      	ldr	r3, [r7, #28]
 800464c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	f003 0301 	and.w	r3, r3, #1
 8004656:	2b01      	cmp	r3, #1
 8004658:	d102      	bne.n	8004660 <HAL_PCD_IRQHandler+0x50c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f005 fa68 	bl	8009b30 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	695a      	ldr	r2, [r3, #20]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800466e:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4618      	mov	r0, r3
 8004676:	f002 fe25 	bl	80072c4 <USB_ReadInterrupts>
 800467a:	4603      	mov	r3, r0
 800467c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004680:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004684:	f040 80b7 	bne.w	80047f6 <HAL_PCD_IRQHandler+0x6a2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004688:	69fb      	ldr	r3, [r7, #28]
 800468a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	69fa      	ldr	r2, [r7, #28]
 8004692:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004696:	f023 0301 	bic.w	r3, r3, #1
 800469a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	2110      	movs	r1, #16
 80046a2:	4618      	mov	r0, r3
 80046a4:	f001 fef2 	bl	800648c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046a8:	2300      	movs	r3, #0
 80046aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80046ac:	e046      	b.n	800473c <HAL_PCD_IRQHandler+0x5e8>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80046ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046b0:	015a      	lsls	r2, r3, #5
 80046b2:	69fb      	ldr	r3, [r7, #28]
 80046b4:	4413      	add	r3, r2
 80046b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046ba:	461a      	mov	r2, r3
 80046bc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80046c0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80046c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046c4:	015a      	lsls	r2, r3, #5
 80046c6:	69fb      	ldr	r3, [r7, #28]
 80046c8:	4413      	add	r3, r2
 80046ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80046d2:	0151      	lsls	r1, r2, #5
 80046d4:	69fa      	ldr	r2, [r7, #28]
 80046d6:	440a      	add	r2, r1
 80046d8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80046dc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80046e0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80046e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046e4:	015a      	lsls	r2, r3, #5
 80046e6:	69fb      	ldr	r3, [r7, #28]
 80046e8:	4413      	add	r3, r2
 80046ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046ee:	461a      	mov	r2, r3
 80046f0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80046f4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80046f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046f8:	015a      	lsls	r2, r3, #5
 80046fa:	69fb      	ldr	r3, [r7, #28]
 80046fc:	4413      	add	r3, r2
 80046fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004706:	0151      	lsls	r1, r2, #5
 8004708:	69fa      	ldr	r2, [r7, #28]
 800470a:	440a      	add	r2, r1
 800470c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004710:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004714:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004716:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004718:	015a      	lsls	r2, r3, #5
 800471a:	69fb      	ldr	r3, [r7, #28]
 800471c:	4413      	add	r3, r2
 800471e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004726:	0151      	lsls	r1, r2, #5
 8004728:	69fa      	ldr	r2, [r7, #28]
 800472a:	440a      	add	r2, r1
 800472c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004730:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004734:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004736:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004738:	3301      	adds	r3, #1
 800473a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	791b      	ldrb	r3, [r3, #4]
 8004740:	461a      	mov	r2, r3
 8004742:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004744:	4293      	cmp	r3, r2
 8004746:	d3b2      	bcc.n	80046ae <HAL_PCD_IRQHandler+0x55a>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004748:	69fb      	ldr	r3, [r7, #28]
 800474a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800474e:	69db      	ldr	r3, [r3, #28]
 8004750:	69fa      	ldr	r2, [r7, #28]
 8004752:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004756:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800475a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	7bdb      	ldrb	r3, [r3, #15]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d016      	beq.n	8004792 <HAL_PCD_IRQHandler+0x63e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004764:	69fb      	ldr	r3, [r7, #28]
 8004766:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800476a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800476e:	69fa      	ldr	r2, [r7, #28]
 8004770:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004774:	f043 030b 	orr.w	r3, r3, #11
 8004778:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800477c:	69fb      	ldr	r3, [r7, #28]
 800477e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004782:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004784:	69fa      	ldr	r2, [r7, #28]
 8004786:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800478a:	f043 030b 	orr.w	r3, r3, #11
 800478e:	6453      	str	r3, [r2, #68]	@ 0x44
 8004790:	e015      	b.n	80047be <HAL_PCD_IRQHandler+0x66a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004792:	69fb      	ldr	r3, [r7, #28]
 8004794:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004798:	695b      	ldr	r3, [r3, #20]
 800479a:	69fa      	ldr	r2, [r7, #28]
 800479c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80047a0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80047a4:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80047a8:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80047aa:	69fb      	ldr	r3, [r7, #28]
 80047ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80047b0:	691b      	ldr	r3, [r3, #16]
 80047b2:	69fa      	ldr	r2, [r7, #28]
 80047b4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80047b8:	f043 030b 	orr.w	r3, r3, #11
 80047bc:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80047be:	69fb      	ldr	r3, [r7, #28]
 80047c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	69fa      	ldr	r2, [r7, #28]
 80047c8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80047cc:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80047d0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6818      	ldr	r0, [r3, #0]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80047e0:	461a      	mov	r2, r3
 80047e2:	f002 fe33 	bl	800744c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	695a      	ldr	r2, [r3, #20]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80047f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4618      	mov	r0, r3
 80047fc:	f002 fd62 	bl	80072c4 <USB_ReadInterrupts>
 8004800:	4603      	mov	r3, r0
 8004802:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004806:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800480a:	d123      	bne.n	8004854 <HAL_PCD_IRQHandler+0x700>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4618      	mov	r0, r3
 8004812:	f002 fdf8 	bl	8007406 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4618      	mov	r0, r3
 800481c:	f001 feaf 	bl	800657e <USB_GetDevSpeed>
 8004820:	4603      	mov	r3, r0
 8004822:	461a      	mov	r2, r3
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681c      	ldr	r4, [r3, #0]
 800482c:	f001 f9fc 	bl	8005c28 <HAL_RCC_GetHCLKFreq>
 8004830:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004836:	461a      	mov	r2, r3
 8004838:	4620      	mov	r0, r4
 800483a:	f001 fbb3 	bl	8005fa4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f005 f957 	bl	8009af2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	695a      	ldr	r2, [r3, #20]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8004852:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4618      	mov	r0, r3
 800485a:	f002 fd33 	bl	80072c4 <USB_ReadInterrupts>
 800485e:	4603      	mov	r3, r0
 8004860:	f003 0308 	and.w	r3, r3, #8
 8004864:	2b08      	cmp	r3, #8
 8004866:	d10a      	bne.n	800487e <HAL_PCD_IRQHandler+0x72a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	f005 f934 	bl	8009ad6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	695a      	ldr	r2, [r3, #20]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f002 0208 	and.w	r2, r2, #8
 800487c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4618      	mov	r0, r3
 8004884:	f002 fd1e 	bl	80072c4 <USB_ReadInterrupts>
 8004888:	4603      	mov	r3, r0
 800488a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800488e:	2b80      	cmp	r3, #128	@ 0x80
 8004890:	d123      	bne.n	80048da <HAL_PCD_IRQHandler+0x786>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004892:	6a3b      	ldr	r3, [r7, #32]
 8004894:	699b      	ldr	r3, [r3, #24]
 8004896:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800489a:	6a3b      	ldr	r3, [r7, #32]
 800489c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800489e:	2301      	movs	r3, #1
 80048a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80048a2:	e014      	b.n	80048ce <HAL_PCD_IRQHandler+0x77a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80048a4:	6879      	ldr	r1, [r7, #4]
 80048a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048a8:	4613      	mov	r3, r2
 80048aa:	00db      	lsls	r3, r3, #3
 80048ac:	4413      	add	r3, r2
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	440b      	add	r3, r1
 80048b2:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80048b6:	781b      	ldrb	r3, [r3, #0]
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d105      	bne.n	80048c8 <HAL_PCD_IRQHandler+0x774>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80048bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048be:	b2db      	uxtb	r3, r3
 80048c0:	4619      	mov	r1, r3
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f000 fb0f 	bl	8004ee6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80048c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ca:	3301      	adds	r3, #1
 80048cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	791b      	ldrb	r3, [r3, #4]
 80048d2:	461a      	mov	r2, r3
 80048d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d3e4      	bcc.n	80048a4 <HAL_PCD_IRQHandler+0x750>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4618      	mov	r0, r3
 80048e0:	f002 fcf0 	bl	80072c4 <USB_ReadInterrupts>
 80048e4:	4603      	mov	r3, r0
 80048e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80048ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80048ee:	d13c      	bne.n	800496a <HAL_PCD_IRQHandler+0x816>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80048f0:	2301      	movs	r3, #1
 80048f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80048f4:	e02b      	b.n	800494e <HAL_PCD_IRQHandler+0x7fa>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80048f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048f8:	015a      	lsls	r2, r3, #5
 80048fa:	69fb      	ldr	r3, [r7, #28]
 80048fc:	4413      	add	r3, r2
 80048fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004906:	6879      	ldr	r1, [r7, #4]
 8004908:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800490a:	4613      	mov	r3, r2
 800490c:	00db      	lsls	r3, r3, #3
 800490e:	4413      	add	r3, r2
 8004910:	009b      	lsls	r3, r3, #2
 8004912:	440b      	add	r3, r1
 8004914:	3318      	adds	r3, #24
 8004916:	781b      	ldrb	r3, [r3, #0]
 8004918:	2b01      	cmp	r3, #1
 800491a:	d115      	bne.n	8004948 <HAL_PCD_IRQHandler+0x7f4>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800491c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800491e:	2b00      	cmp	r3, #0
 8004920:	da12      	bge.n	8004948 <HAL_PCD_IRQHandler+0x7f4>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004922:	6879      	ldr	r1, [r7, #4]
 8004924:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004926:	4613      	mov	r3, r2
 8004928:	00db      	lsls	r3, r3, #3
 800492a:	4413      	add	r3, r2
 800492c:	009b      	lsls	r3, r3, #2
 800492e:	440b      	add	r3, r1
 8004930:	3317      	adds	r3, #23
 8004932:	2201      	movs	r2, #1
 8004934:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004938:	b2db      	uxtb	r3, r3
 800493a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800493e:	b2db      	uxtb	r3, r3
 8004940:	4619      	mov	r1, r3
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f000 facf 	bl	8004ee6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800494a:	3301      	adds	r3, #1
 800494c:	627b      	str	r3, [r7, #36]	@ 0x24
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	791b      	ldrb	r3, [r3, #4]
 8004952:	461a      	mov	r2, r3
 8004954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004956:	4293      	cmp	r3, r2
 8004958:	d3cd      	bcc.n	80048f6 <HAL_PCD_IRQHandler+0x7a2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	695a      	ldr	r2, [r3, #20]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8004968:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4618      	mov	r0, r3
 8004970:	f002 fca8 	bl	80072c4 <USB_ReadInterrupts>
 8004974:	4603      	mov	r3, r0
 8004976:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800497a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800497e:	d156      	bne.n	8004a2e <HAL_PCD_IRQHandler+0x8da>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004980:	2301      	movs	r3, #1
 8004982:	627b      	str	r3, [r7, #36]	@ 0x24
 8004984:	e045      	b.n	8004a12 <HAL_PCD_IRQHandler+0x8be>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004988:	015a      	lsls	r2, r3, #5
 800498a:	69fb      	ldr	r3, [r7, #28]
 800498c:	4413      	add	r3, r2
 800498e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004996:	6879      	ldr	r1, [r7, #4]
 8004998:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800499a:	4613      	mov	r3, r2
 800499c:	00db      	lsls	r3, r3, #3
 800499e:	4413      	add	r3, r2
 80049a0:	009b      	lsls	r3, r3, #2
 80049a2:	440b      	add	r3, r1
 80049a4:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80049a8:	781b      	ldrb	r3, [r3, #0]
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	d12e      	bne.n	8004a0c <HAL_PCD_IRQHandler+0x8b8>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80049ae:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	da2b      	bge.n	8004a0c <HAL_PCD_IRQHandler+0x8b8>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80049b4:	69bb      	ldr	r3, [r7, #24]
 80049b6:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80049c0:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d121      	bne.n	8004a0c <HAL_PCD_IRQHandler+0x8b8>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80049c8:	6879      	ldr	r1, [r7, #4]
 80049ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049cc:	4613      	mov	r3, r2
 80049ce:	00db      	lsls	r3, r3, #3
 80049d0:	4413      	add	r3, r2
 80049d2:	009b      	lsls	r3, r3, #2
 80049d4:	440b      	add	r3, r1
 80049d6:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80049da:	2201      	movs	r2, #1
 80049dc:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80049de:	6a3b      	ldr	r3, [r7, #32]
 80049e0:	699b      	ldr	r3, [r3, #24]
 80049e2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80049e6:	6a3b      	ldr	r3, [r7, #32]
 80049e8:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80049ea:	6a3b      	ldr	r3, [r7, #32]
 80049ec:	695b      	ldr	r3, [r3, #20]
 80049ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d10a      	bne.n	8004a0c <HAL_PCD_IRQHandler+0x8b8>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80049f6:	69fb      	ldr	r3, [r7, #28]
 80049f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	69fa      	ldr	r2, [r7, #28]
 8004a00:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004a04:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004a08:	6053      	str	r3, [r2, #4]
            break;
 8004a0a:	e008      	b.n	8004a1e <HAL_PCD_IRQHandler+0x8ca>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a0e:	3301      	adds	r3, #1
 8004a10:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	791b      	ldrb	r3, [r3, #4]
 8004a16:	461a      	mov	r2, r3
 8004a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d3b3      	bcc.n	8004986 <HAL_PCD_IRQHandler+0x832>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	695a      	ldr	r2, [r3, #20]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8004a2c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4618      	mov	r0, r3
 8004a34:	f002 fc46 	bl	80072c4 <USB_ReadInterrupts>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004a3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a42:	d10a      	bne.n	8004a5a <HAL_PCD_IRQHandler+0x906>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	f005 f8cb 	bl	8009be0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	695a      	ldr	r2, [r3, #20]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004a58:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f002 fc30 	bl	80072c4 <USB_ReadInterrupts>
 8004a64:	4603      	mov	r3, r0
 8004a66:	f003 0304 	and.w	r3, r3, #4
 8004a6a:	2b04      	cmp	r3, #4
 8004a6c:	d115      	bne.n	8004a9a <HAL_PCD_IRQHandler+0x946>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004a76:	69bb      	ldr	r3, [r7, #24]
 8004a78:	f003 0304 	and.w	r3, r3, #4
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d002      	beq.n	8004a86 <HAL_PCD_IRQHandler+0x932>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f005 f8bb 	bl	8009bfc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	6859      	ldr	r1, [r3, #4]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	69ba      	ldr	r2, [r7, #24]
 8004a92:	430a      	orrs	r2, r1
 8004a94:	605a      	str	r2, [r3, #4]
 8004a96:	e000      	b.n	8004a9a <HAL_PCD_IRQHandler+0x946>
      return;
 8004a98:	bf00      	nop
    }
  }
}
 8004a9a:	3734      	adds	r7, #52	@ 0x34
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd90      	pop	{r4, r7, pc}

08004aa0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b082      	sub	sp, #8
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
 8004aa8:	460b      	mov	r3, r1
 8004aaa:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004ab2:	2b01      	cmp	r3, #1
 8004ab4:	d101      	bne.n	8004aba <HAL_PCD_SetAddress+0x1a>
 8004ab6:	2302      	movs	r3, #2
 8004ab8:	e012      	b.n	8004ae0 <HAL_PCD_SetAddress+0x40>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2201      	movs	r2, #1
 8004abe:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	78fa      	ldrb	r2, [r7, #3]
 8004ac6:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	78fa      	ldrb	r2, [r7, #3]
 8004ace:	4611      	mov	r1, r2
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f002 fb8f 	bl	80071f4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004ade:	2300      	movs	r3, #0
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	3708      	adds	r7, #8
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}

08004ae8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b084      	sub	sp, #16
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
 8004af0:	4608      	mov	r0, r1
 8004af2:	4611      	mov	r1, r2
 8004af4:	461a      	mov	r2, r3
 8004af6:	4603      	mov	r3, r0
 8004af8:	70fb      	strb	r3, [r7, #3]
 8004afa:	460b      	mov	r3, r1
 8004afc:	803b      	strh	r3, [r7, #0]
 8004afe:	4613      	mov	r3, r2
 8004b00:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8004b02:	2300      	movs	r3, #0
 8004b04:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004b06:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	da0f      	bge.n	8004b2e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b0e:	78fb      	ldrb	r3, [r7, #3]
 8004b10:	f003 020f 	and.w	r2, r3, #15
 8004b14:	4613      	mov	r3, r2
 8004b16:	00db      	lsls	r3, r3, #3
 8004b18:	4413      	add	r3, r2
 8004b1a:	009b      	lsls	r3, r3, #2
 8004b1c:	3310      	adds	r3, #16
 8004b1e:	687a      	ldr	r2, [r7, #4]
 8004b20:	4413      	add	r3, r2
 8004b22:	3304      	adds	r3, #4
 8004b24:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2201      	movs	r2, #1
 8004b2a:	705a      	strb	r2, [r3, #1]
 8004b2c:	e00f      	b.n	8004b4e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004b2e:	78fb      	ldrb	r3, [r7, #3]
 8004b30:	f003 020f 	and.w	r2, r3, #15
 8004b34:	4613      	mov	r3, r2
 8004b36:	00db      	lsls	r3, r3, #3
 8004b38:	4413      	add	r3, r2
 8004b3a:	009b      	lsls	r3, r3, #2
 8004b3c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004b40:	687a      	ldr	r2, [r7, #4]
 8004b42:	4413      	add	r3, r2
 8004b44:	3304      	adds	r3, #4
 8004b46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004b4e:	78fb      	ldrb	r3, [r7, #3]
 8004b50:	f003 030f 	and.w	r3, r3, #15
 8004b54:	b2da      	uxtb	r2, r3
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8004b5a:	883b      	ldrh	r3, [r7, #0]
 8004b5c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	78ba      	ldrb	r2, [r7, #2]
 8004b68:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	785b      	ldrb	r3, [r3, #1]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d004      	beq.n	8004b7c <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	781b      	ldrb	r3, [r3, #0]
 8004b76:	461a      	mov	r2, r3
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004b7c:	78bb      	ldrb	r3, [r7, #2]
 8004b7e:	2b02      	cmp	r3, #2
 8004b80:	d102      	bne.n	8004b88 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2200      	movs	r2, #0
 8004b86:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	d101      	bne.n	8004b96 <HAL_PCD_EP_Open+0xae>
 8004b92:	2302      	movs	r3, #2
 8004b94:	e00e      	b.n	8004bb4 <HAL_PCD_EP_Open+0xcc>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2201      	movs	r2, #1
 8004b9a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	68f9      	ldr	r1, [r7, #12]
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f001 fd0f 	bl	80065c8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2200      	movs	r2, #0
 8004bae:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8004bb2:	7afb      	ldrb	r3, [r7, #11]
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	3710      	adds	r7, #16
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}

08004bbc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b084      	sub	sp, #16
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
 8004bc4:	460b      	mov	r3, r1
 8004bc6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004bc8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	da0f      	bge.n	8004bf0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004bd0:	78fb      	ldrb	r3, [r7, #3]
 8004bd2:	f003 020f 	and.w	r2, r3, #15
 8004bd6:	4613      	mov	r3, r2
 8004bd8:	00db      	lsls	r3, r3, #3
 8004bda:	4413      	add	r3, r2
 8004bdc:	009b      	lsls	r3, r3, #2
 8004bde:	3310      	adds	r3, #16
 8004be0:	687a      	ldr	r2, [r7, #4]
 8004be2:	4413      	add	r3, r2
 8004be4:	3304      	adds	r3, #4
 8004be6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	2201      	movs	r2, #1
 8004bec:	705a      	strb	r2, [r3, #1]
 8004bee:	e00f      	b.n	8004c10 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004bf0:	78fb      	ldrb	r3, [r7, #3]
 8004bf2:	f003 020f 	and.w	r2, r3, #15
 8004bf6:	4613      	mov	r3, r2
 8004bf8:	00db      	lsls	r3, r3, #3
 8004bfa:	4413      	add	r3, r2
 8004bfc:	009b      	lsls	r3, r3, #2
 8004bfe:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004c02:	687a      	ldr	r2, [r7, #4]
 8004c04:	4413      	add	r3, r2
 8004c06:	3304      	adds	r3, #4
 8004c08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004c10:	78fb      	ldrb	r3, [r7, #3]
 8004c12:	f003 030f 	and.w	r3, r3, #15
 8004c16:	b2da      	uxtb	r2, r3
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004c22:	2b01      	cmp	r3, #1
 8004c24:	d101      	bne.n	8004c2a <HAL_PCD_EP_Close+0x6e>
 8004c26:	2302      	movs	r3, #2
 8004c28:	e00e      	b.n	8004c48 <HAL_PCD_EP_Close+0x8c>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2201      	movs	r2, #1
 8004c2e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	68f9      	ldr	r1, [r7, #12]
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f001 fd4d 	bl	80066d8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2200      	movs	r2, #0
 8004c42:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8004c46:	2300      	movs	r3, #0
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	3710      	adds	r7, #16
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}

08004c50 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b086      	sub	sp, #24
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	60f8      	str	r0, [r7, #12]
 8004c58:	607a      	str	r2, [r7, #4]
 8004c5a:	603b      	str	r3, [r7, #0]
 8004c5c:	460b      	mov	r3, r1
 8004c5e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004c60:	7afb      	ldrb	r3, [r7, #11]
 8004c62:	f003 020f 	and.w	r2, r3, #15
 8004c66:	4613      	mov	r3, r2
 8004c68:	00db      	lsls	r3, r3, #3
 8004c6a:	4413      	add	r3, r2
 8004c6c:	009b      	lsls	r3, r3, #2
 8004c6e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004c72:	68fa      	ldr	r2, [r7, #12]
 8004c74:	4413      	add	r3, r2
 8004c76:	3304      	adds	r3, #4
 8004c78:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	687a      	ldr	r2, [r7, #4]
 8004c7e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	683a      	ldr	r2, [r7, #0]
 8004c84:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004c92:	7afb      	ldrb	r3, [r7, #11]
 8004c94:	f003 030f 	and.w	r3, r3, #15
 8004c98:	b2da      	uxtb	r2, r3
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	799b      	ldrb	r3, [r3, #6]
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	d102      	bne.n	8004cac <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004ca6:	687a      	ldr	r2, [r7, #4]
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	6818      	ldr	r0, [r3, #0]
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	799b      	ldrb	r3, [r3, #6]
 8004cb4:	461a      	mov	r2, r3
 8004cb6:	6979      	ldr	r1, [r7, #20]
 8004cb8:	f001 fdea 	bl	8006890 <USB_EPStartXfer>

  if(ep_addr){
 8004cbc:	7afb      	ldrb	r3, [r7, #11]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d001      	beq.n	8004cc6 <HAL_PCD_EP_Receive+0x76>
	  uint16_t hello = 1;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	827b      	strh	r3, [r7, #18]
  }

  return HAL_OK;
 8004cc6:	2300      	movs	r3, #0
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	3718      	adds	r7, #24
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}

08004cd0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b083      	sub	sp, #12
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
 8004cd8:	460b      	mov	r3, r1
 8004cda:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004cdc:	78fb      	ldrb	r3, [r7, #3]
 8004cde:	f003 020f 	and.w	r2, r3, #15
 8004ce2:	6879      	ldr	r1, [r7, #4]
 8004ce4:	4613      	mov	r3, r2
 8004ce6:	00db      	lsls	r3, r3, #3
 8004ce8:	4413      	add	r3, r2
 8004cea:	009b      	lsls	r3, r3, #2
 8004cec:	440b      	add	r3, r1
 8004cee:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8004cf2:	681b      	ldr	r3, [r3, #0]
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	370c      	adds	r7, #12
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr

08004d00 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b086      	sub	sp, #24
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	60f8      	str	r0, [r7, #12]
 8004d08:	607a      	str	r2, [r7, #4]
 8004d0a:	603b      	str	r3, [r7, #0]
 8004d0c:	460b      	mov	r3, r1
 8004d0e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d10:	7afb      	ldrb	r3, [r7, #11]
 8004d12:	f003 020f 	and.w	r2, r3, #15
 8004d16:	4613      	mov	r3, r2
 8004d18:	00db      	lsls	r3, r3, #3
 8004d1a:	4413      	add	r3, r2
 8004d1c:	009b      	lsls	r3, r3, #2
 8004d1e:	3310      	adds	r3, #16
 8004d20:	68fa      	ldr	r2, [r7, #12]
 8004d22:	4413      	add	r3, r2
 8004d24:	3304      	adds	r3, #4
 8004d26:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	687a      	ldr	r2, [r7, #4]
 8004d2c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	683a      	ldr	r2, [r7, #0]
 8004d32:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	2200      	movs	r2, #0
 8004d38:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	2201      	movs	r2, #1
 8004d3e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004d40:	7afb      	ldrb	r3, [r7, #11]
 8004d42:	f003 030f 	and.w	r3, r3, #15
 8004d46:	b2da      	uxtb	r2, r3
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	799b      	ldrb	r3, [r3, #6]
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d102      	bne.n	8004d5a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004d54:	687a      	ldr	r2, [r7, #4]
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	6818      	ldr	r0, [r3, #0]
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	799b      	ldrb	r3, [r3, #6]
 8004d62:	461a      	mov	r2, r3
 8004d64:	6979      	ldr	r1, [r7, #20]
 8004d66:	f001 fd93 	bl	8006890 <USB_EPStartXfer>

  return HAL_OK;
 8004d6a:	2300      	movs	r3, #0
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	3718      	adds	r7, #24
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}

08004d74 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b084      	sub	sp, #16
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
 8004d7c:	460b      	mov	r3, r1
 8004d7e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004d80:	78fb      	ldrb	r3, [r7, #3]
 8004d82:	f003 030f 	and.w	r3, r3, #15
 8004d86:	687a      	ldr	r2, [r7, #4]
 8004d88:	7912      	ldrb	r2, [r2, #4]
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d901      	bls.n	8004d92 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e04f      	b.n	8004e32 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004d92:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	da0f      	bge.n	8004dba <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d9a:	78fb      	ldrb	r3, [r7, #3]
 8004d9c:	f003 020f 	and.w	r2, r3, #15
 8004da0:	4613      	mov	r3, r2
 8004da2:	00db      	lsls	r3, r3, #3
 8004da4:	4413      	add	r3, r2
 8004da6:	009b      	lsls	r3, r3, #2
 8004da8:	3310      	adds	r3, #16
 8004daa:	687a      	ldr	r2, [r7, #4]
 8004dac:	4413      	add	r3, r2
 8004dae:	3304      	adds	r3, #4
 8004db0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2201      	movs	r2, #1
 8004db6:	705a      	strb	r2, [r3, #1]
 8004db8:	e00d      	b.n	8004dd6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004dba:	78fa      	ldrb	r2, [r7, #3]
 8004dbc:	4613      	mov	r3, r2
 8004dbe:	00db      	lsls	r3, r3, #3
 8004dc0:	4413      	add	r3, r2
 8004dc2:	009b      	lsls	r3, r3, #2
 8004dc4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004dc8:	687a      	ldr	r2, [r7, #4]
 8004dca:	4413      	add	r3, r2
 8004dcc:	3304      	adds	r3, #4
 8004dce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2201      	movs	r2, #1
 8004dda:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004ddc:	78fb      	ldrb	r3, [r7, #3]
 8004dde:	f003 030f 	and.w	r3, r3, #15
 8004de2:	b2da      	uxtb	r2, r3
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004dee:	2b01      	cmp	r3, #1
 8004df0:	d101      	bne.n	8004df6 <HAL_PCD_EP_SetStall+0x82>
 8004df2:	2302      	movs	r3, #2
 8004df4:	e01d      	b.n	8004e32 <HAL_PCD_EP_SetStall+0xbe>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2201      	movs	r2, #1
 8004dfa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	68f9      	ldr	r1, [r7, #12]
 8004e04:	4618      	mov	r0, r3
 8004e06:	f002 f921 	bl	800704c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004e0a:	78fb      	ldrb	r3, [r7, #3]
 8004e0c:	f003 030f 	and.w	r3, r3, #15
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d109      	bne.n	8004e28 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6818      	ldr	r0, [r3, #0]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	7999      	ldrb	r1, [r3, #6]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004e22:	461a      	mov	r2, r3
 8004e24:	f002 fb12 	bl	800744c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004e30:	2300      	movs	r3, #0
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3710      	adds	r7, #16
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}

08004e3a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004e3a:	b580      	push	{r7, lr}
 8004e3c:	b084      	sub	sp, #16
 8004e3e:	af00      	add	r7, sp, #0
 8004e40:	6078      	str	r0, [r7, #4]
 8004e42:	460b      	mov	r3, r1
 8004e44:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004e46:	78fb      	ldrb	r3, [r7, #3]
 8004e48:	f003 030f 	and.w	r3, r3, #15
 8004e4c:	687a      	ldr	r2, [r7, #4]
 8004e4e:	7912      	ldrb	r2, [r2, #4]
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d901      	bls.n	8004e58 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
 8004e56:	e042      	b.n	8004ede <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004e58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	da0f      	bge.n	8004e80 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e60:	78fb      	ldrb	r3, [r7, #3]
 8004e62:	f003 020f 	and.w	r2, r3, #15
 8004e66:	4613      	mov	r3, r2
 8004e68:	00db      	lsls	r3, r3, #3
 8004e6a:	4413      	add	r3, r2
 8004e6c:	009b      	lsls	r3, r3, #2
 8004e6e:	3310      	adds	r3, #16
 8004e70:	687a      	ldr	r2, [r7, #4]
 8004e72:	4413      	add	r3, r2
 8004e74:	3304      	adds	r3, #4
 8004e76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	705a      	strb	r2, [r3, #1]
 8004e7e:	e00f      	b.n	8004ea0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004e80:	78fb      	ldrb	r3, [r7, #3]
 8004e82:	f003 020f 	and.w	r2, r3, #15
 8004e86:	4613      	mov	r3, r2
 8004e88:	00db      	lsls	r3, r3, #3
 8004e8a:	4413      	add	r3, r2
 8004e8c:	009b      	lsls	r3, r3, #2
 8004e8e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004e92:	687a      	ldr	r2, [r7, #4]
 8004e94:	4413      	add	r3, r2
 8004e96:	3304      	adds	r3, #4
 8004e98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004ea6:	78fb      	ldrb	r3, [r7, #3]
 8004ea8:	f003 030f 	and.w	r3, r3, #15
 8004eac:	b2da      	uxtb	r2, r3
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d101      	bne.n	8004ec0 <HAL_PCD_EP_ClrStall+0x86>
 8004ebc:	2302      	movs	r3, #2
 8004ebe:	e00e      	b.n	8004ede <HAL_PCD_EP_ClrStall+0xa4>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	68f9      	ldr	r1, [r7, #12]
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f002 f92a 	bl	8007128 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004edc:	2300      	movs	r3, #0
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3710      	adds	r7, #16
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}

08004ee6 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004ee6:	b580      	push	{r7, lr}
 8004ee8:	b084      	sub	sp, #16
 8004eea:	af00      	add	r7, sp, #0
 8004eec:	6078      	str	r0, [r7, #4]
 8004eee:	460b      	mov	r3, r1
 8004ef0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004ef2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	da0c      	bge.n	8004f14 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004efa:	78fb      	ldrb	r3, [r7, #3]
 8004efc:	f003 020f 	and.w	r2, r3, #15
 8004f00:	4613      	mov	r3, r2
 8004f02:	00db      	lsls	r3, r3, #3
 8004f04:	4413      	add	r3, r2
 8004f06:	009b      	lsls	r3, r3, #2
 8004f08:	3310      	adds	r3, #16
 8004f0a:	687a      	ldr	r2, [r7, #4]
 8004f0c:	4413      	add	r3, r2
 8004f0e:	3304      	adds	r3, #4
 8004f10:	60fb      	str	r3, [r7, #12]
 8004f12:	e00c      	b.n	8004f2e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004f14:	78fb      	ldrb	r3, [r7, #3]
 8004f16:	f003 020f 	and.w	r2, r3, #15
 8004f1a:	4613      	mov	r3, r2
 8004f1c:	00db      	lsls	r3, r3, #3
 8004f1e:	4413      	add	r3, r2
 8004f20:	009b      	lsls	r3, r3, #2
 8004f22:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004f26:	687a      	ldr	r2, [r7, #4]
 8004f28:	4413      	add	r3, r2
 8004f2a:	3304      	adds	r3, #4
 8004f2c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	68f9      	ldr	r1, [r7, #12]
 8004f34:	4618      	mov	r0, r3
 8004f36:	f001 ff49 	bl	8006dcc <USB_EPStopXfer>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004f3e:	7afb      	ldrb	r3, [r7, #11]
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	3710      	adds	r7, #16
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}

08004f48 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b082      	sub	sp, #8
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
 8004f50:	460b      	mov	r3, r1
 8004f52:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	d101      	bne.n	8004f62 <HAL_PCD_EP_Flush+0x1a>
 8004f5e:	2302      	movs	r3, #2
 8004f60:	e01b      	b.n	8004f9a <HAL_PCD_EP_Flush+0x52>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2201      	movs	r2, #1
 8004f66:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if ((ep_addr & 0x80U) == 0x80U)
 8004f6a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	da09      	bge.n	8004f86 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681a      	ldr	r2, [r3, #0]
 8004f76:	78fb      	ldrb	r3, [r7, #3]
 8004f78:	f003 030f 	and.w	r3, r3, #15
 8004f7c:	4619      	mov	r1, r3
 8004f7e:	4610      	mov	r0, r2
 8004f80:	f001 fa84 	bl	800648c <USB_FlushTxFifo>
 8004f84:	e004      	b.n	8004f90 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f001 fab0 	bl	80064f0 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2200      	movs	r2, #0
 8004f94:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004f98:	2300      	movs	r3, #0
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3708      	adds	r7, #8
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}

08004fa2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004fa2:	b580      	push	{r7, lr}
 8004fa4:	b08a      	sub	sp, #40	@ 0x28
 8004fa6:	af02      	add	r7, sp, #8
 8004fa8:	6078      	str	r0, [r7, #4]
 8004faa:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004fb6:	683a      	ldr	r2, [r7, #0]
 8004fb8:	4613      	mov	r3, r2
 8004fba:	00db      	lsls	r3, r3, #3
 8004fbc:	4413      	add	r3, r2
 8004fbe:	009b      	lsls	r3, r3, #2
 8004fc0:	3310      	adds	r3, #16
 8004fc2:	687a      	ldr	r2, [r7, #4]
 8004fc4:	4413      	add	r3, r2
 8004fc6:	3304      	adds	r3, #4
 8004fc8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	695a      	ldr	r2, [r3, #20]
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	691b      	ldr	r3, [r3, #16]
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	d901      	bls.n	8004fda <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e06b      	b.n	80050b2 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	691a      	ldr	r2, [r3, #16]
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	695b      	ldr	r3, [r3, #20]
 8004fe2:	1ad3      	subs	r3, r2, r3
 8004fe4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	689b      	ldr	r3, [r3, #8]
 8004fea:	69fa      	ldr	r2, [r7, #28]
 8004fec:	429a      	cmp	r2, r3
 8004fee:	d902      	bls.n	8004ff6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004ff6:	69fb      	ldr	r3, [r7, #28]
 8004ff8:	3303      	adds	r3, #3
 8004ffa:	089b      	lsrs	r3, r3, #2
 8004ffc:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004ffe:	e02a      	b.n	8005056 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	691a      	ldr	r2, [r3, #16]
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	695b      	ldr	r3, [r3, #20]
 8005008:	1ad3      	subs	r3, r2, r3
 800500a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	69fa      	ldr	r2, [r7, #28]
 8005012:	429a      	cmp	r2, r3
 8005014:	d902      	bls.n	800501c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800501c:	69fb      	ldr	r3, [r7, #28]
 800501e:	3303      	adds	r3, #3
 8005020:	089b      	lsrs	r3, r3, #2
 8005022:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	68d9      	ldr	r1, [r3, #12]
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	b2da      	uxtb	r2, r3
 800502c:	69fb      	ldr	r3, [r7, #28]
 800502e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005034:	9300      	str	r3, [sp, #0]
 8005036:	4603      	mov	r3, r0
 8005038:	6978      	ldr	r0, [r7, #20]
 800503a:	f001 ff71 	bl	8006f20 <USB_WritePacket>

    ep->xfer_buff  += len;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	68da      	ldr	r2, [r3, #12]
 8005042:	69fb      	ldr	r3, [r7, #28]
 8005044:	441a      	add	r2, r3
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	695a      	ldr	r2, [r3, #20]
 800504e:	69fb      	ldr	r3, [r7, #28]
 8005050:	441a      	add	r2, r3
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	015a      	lsls	r2, r3, #5
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	4413      	add	r3, r2
 800505e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005062:	699b      	ldr	r3, [r3, #24]
 8005064:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005066:	69ba      	ldr	r2, [r7, #24]
 8005068:	429a      	cmp	r2, r3
 800506a:	d809      	bhi.n	8005080 <PCD_WriteEmptyTxFifo+0xde>
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	695a      	ldr	r2, [r3, #20]
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005074:	429a      	cmp	r2, r3
 8005076:	d203      	bcs.n	8005080 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	691b      	ldr	r3, [r3, #16]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d1bf      	bne.n	8005000 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	691a      	ldr	r2, [r3, #16]
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	695b      	ldr	r3, [r3, #20]
 8005088:	429a      	cmp	r2, r3
 800508a:	d811      	bhi.n	80050b0 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	f003 030f 	and.w	r3, r3, #15
 8005092:	2201      	movs	r2, #1
 8005094:	fa02 f303 	lsl.w	r3, r2, r3
 8005098:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80050a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	43db      	mvns	r3, r3
 80050a6:	6939      	ldr	r1, [r7, #16]
 80050a8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80050ac:	4013      	ands	r3, r2
 80050ae:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80050b0:	2300      	movs	r3, #0
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3720      	adds	r7, #32
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}
	...

080050bc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b088      	sub	sp, #32
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
 80050c4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050cc:	69fb      	ldr	r3, [r7, #28]
 80050ce:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80050d0:	69fb      	ldr	r3, [r7, #28]
 80050d2:	333c      	adds	r3, #60	@ 0x3c
 80050d4:	3304      	adds	r3, #4
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	015a      	lsls	r2, r3, #5
 80050de:	69bb      	ldr	r3, [r7, #24]
 80050e0:	4413      	add	r3, r2
 80050e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	799b      	ldrb	r3, [r3, #6]
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	d17b      	bne.n	80051ea <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	f003 0308 	and.w	r3, r3, #8
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d015      	beq.n	8005128 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	4a61      	ldr	r2, [pc, #388]	@ (8005284 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005100:	4293      	cmp	r3, r2
 8005102:	f240 80b9 	bls.w	8005278 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800510c:	2b00      	cmp	r3, #0
 800510e:	f000 80b3 	beq.w	8005278 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	015a      	lsls	r2, r3, #5
 8005116:	69bb      	ldr	r3, [r7, #24]
 8005118:	4413      	add	r3, r2
 800511a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800511e:	461a      	mov	r2, r3
 8005120:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005124:	6093      	str	r3, [r2, #8]
 8005126:	e0a7      	b.n	8005278 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	f003 0320 	and.w	r3, r3, #32
 800512e:	2b00      	cmp	r3, #0
 8005130:	d009      	beq.n	8005146 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	015a      	lsls	r2, r3, #5
 8005136:	69bb      	ldr	r3, [r7, #24]
 8005138:	4413      	add	r3, r2
 800513a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800513e:	461a      	mov	r2, r3
 8005140:	2320      	movs	r3, #32
 8005142:	6093      	str	r3, [r2, #8]
 8005144:	e098      	b.n	8005278 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800514c:	2b00      	cmp	r3, #0
 800514e:	f040 8093 	bne.w	8005278 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	4a4b      	ldr	r2, [pc, #300]	@ (8005284 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d90f      	bls.n	800517a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005160:	2b00      	cmp	r3, #0
 8005162:	d00a      	beq.n	800517a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	015a      	lsls	r2, r3, #5
 8005168:	69bb      	ldr	r3, [r7, #24]
 800516a:	4413      	add	r3, r2
 800516c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005170:	461a      	mov	r2, r3
 8005172:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005176:	6093      	str	r3, [r2, #8]
 8005178:	e07e      	b.n	8005278 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800517a:	683a      	ldr	r2, [r7, #0]
 800517c:	4613      	mov	r3, r2
 800517e:	00db      	lsls	r3, r3, #3
 8005180:	4413      	add	r3, r2
 8005182:	009b      	lsls	r3, r3, #2
 8005184:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005188:	687a      	ldr	r2, [r7, #4]
 800518a:	4413      	add	r3, r2
 800518c:	3304      	adds	r3, #4
 800518e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	6a1a      	ldr	r2, [r3, #32]
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	0159      	lsls	r1, r3, #5
 8005198:	69bb      	ldr	r3, [r7, #24]
 800519a:	440b      	add	r3, r1
 800519c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051a0:	691b      	ldr	r3, [r3, #16]
 80051a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051a6:	1ad2      	subs	r2, r2, r3
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d114      	bne.n	80051dc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	691b      	ldr	r3, [r3, #16]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d109      	bne.n	80051ce <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6818      	ldr	r0, [r3, #0]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80051c4:	461a      	mov	r2, r3
 80051c6:	2101      	movs	r1, #1
 80051c8:	f002 f940 	bl	800744c <USB_EP0_OutStart>
 80051cc:	e006      	b.n	80051dc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	68da      	ldr	r2, [r3, #12]
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	695b      	ldr	r3, [r3, #20]
 80051d6:	441a      	add	r2, r3
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	b2db      	uxtb	r3, r3
 80051e0:	4619      	mov	r1, r3
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f004 fc42 	bl	8009a6c <HAL_PCD_DataOutStageCallback>
 80051e8:	e046      	b.n	8005278 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	4a26      	ldr	r2, [pc, #152]	@ (8005288 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d124      	bne.n	800523c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d00a      	beq.n	8005212 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	015a      	lsls	r2, r3, #5
 8005200:	69bb      	ldr	r3, [r7, #24]
 8005202:	4413      	add	r3, r2
 8005204:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005208:	461a      	mov	r2, r3
 800520a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800520e:	6093      	str	r3, [r2, #8]
 8005210:	e032      	b.n	8005278 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	f003 0320 	and.w	r3, r3, #32
 8005218:	2b00      	cmp	r3, #0
 800521a:	d008      	beq.n	800522e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	015a      	lsls	r2, r3, #5
 8005220:	69bb      	ldr	r3, [r7, #24]
 8005222:	4413      	add	r3, r2
 8005224:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005228:	461a      	mov	r2, r3
 800522a:	2320      	movs	r3, #32
 800522c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	b2db      	uxtb	r3, r3
 8005232:	4619      	mov	r1, r3
 8005234:	6878      	ldr	r0, [r7, #4]
 8005236:	f004 fc19 	bl	8009a6c <HAL_PCD_DataOutStageCallback>
 800523a:	e01d      	b.n	8005278 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d114      	bne.n	800526c <PCD_EP_OutXfrComplete_int+0x1b0>
 8005242:	6879      	ldr	r1, [r7, #4]
 8005244:	683a      	ldr	r2, [r7, #0]
 8005246:	4613      	mov	r3, r2
 8005248:	00db      	lsls	r3, r3, #3
 800524a:	4413      	add	r3, r2
 800524c:	009b      	lsls	r3, r3, #2
 800524e:	440b      	add	r3, r1
 8005250:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d108      	bne.n	800526c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6818      	ldr	r0, [r3, #0]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005264:	461a      	mov	r2, r3
 8005266:	2100      	movs	r1, #0
 8005268:	f002 f8f0 	bl	800744c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	b2db      	uxtb	r3, r3
 8005270:	4619      	mov	r1, r3
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	f004 fbfa 	bl	8009a6c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005278:	2300      	movs	r3, #0
}
 800527a:	4618      	mov	r0, r3
 800527c:	3720      	adds	r7, #32
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}
 8005282:	bf00      	nop
 8005284:	4f54300a 	.word	0x4f54300a
 8005288:	4f54310a 	.word	0x4f54310a

0800528c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b086      	sub	sp, #24
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
 8005294:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	333c      	adds	r3, #60	@ 0x3c
 80052a4:	3304      	adds	r3, #4
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	015a      	lsls	r2, r3, #5
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	4413      	add	r3, r2
 80052b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	4a15      	ldr	r2, [pc, #84]	@ (8005314 <PCD_EP_OutSetupPacket_int+0x88>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d90e      	bls.n	80052e0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d009      	beq.n	80052e0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	015a      	lsls	r2, r3, #5
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	4413      	add	r3, r2
 80052d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052d8:	461a      	mov	r2, r3
 80052da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80052de:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	f004 fbb1 	bl	8009a48 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	4a0a      	ldr	r2, [pc, #40]	@ (8005314 <PCD_EP_OutSetupPacket_int+0x88>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d90c      	bls.n	8005308 <PCD_EP_OutSetupPacket_int+0x7c>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	799b      	ldrb	r3, [r3, #6]
 80052f2:	2b01      	cmp	r3, #1
 80052f4:	d108      	bne.n	8005308 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6818      	ldr	r0, [r3, #0]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005300:	461a      	mov	r2, r3
 8005302:	2101      	movs	r1, #1
 8005304:	f002 f8a2 	bl	800744c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005308:	2300      	movs	r3, #0
}
 800530a:	4618      	mov	r0, r3
 800530c:	3718      	adds	r7, #24
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}
 8005312:	bf00      	nop
 8005314:	4f54300a 	.word	0x4f54300a

08005318 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005318:	b480      	push	{r7}
 800531a:	b085      	sub	sp, #20
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
 8005320:	460b      	mov	r3, r1
 8005322:	70fb      	strb	r3, [r7, #3]
 8005324:	4613      	mov	r3, r2
 8005326:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800532e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005330:	78fb      	ldrb	r3, [r7, #3]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d107      	bne.n	8005346 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005336:	883b      	ldrh	r3, [r7, #0]
 8005338:	0419      	lsls	r1, r3, #16
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	68ba      	ldr	r2, [r7, #8]
 8005340:	430a      	orrs	r2, r1
 8005342:	629a      	str	r2, [r3, #40]	@ 0x28
 8005344:	e028      	b.n	8005398 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800534c:	0c1b      	lsrs	r3, r3, #16
 800534e:	68ba      	ldr	r2, [r7, #8]
 8005350:	4413      	add	r3, r2
 8005352:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005354:	2300      	movs	r3, #0
 8005356:	73fb      	strb	r3, [r7, #15]
 8005358:	e00d      	b.n	8005376 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	7bfb      	ldrb	r3, [r7, #15]
 8005360:	3340      	adds	r3, #64	@ 0x40
 8005362:	009b      	lsls	r3, r3, #2
 8005364:	4413      	add	r3, r2
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	0c1b      	lsrs	r3, r3, #16
 800536a:	68ba      	ldr	r2, [r7, #8]
 800536c:	4413      	add	r3, r2
 800536e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005370:	7bfb      	ldrb	r3, [r7, #15]
 8005372:	3301      	adds	r3, #1
 8005374:	73fb      	strb	r3, [r7, #15]
 8005376:	7bfa      	ldrb	r2, [r7, #15]
 8005378:	78fb      	ldrb	r3, [r7, #3]
 800537a:	3b01      	subs	r3, #1
 800537c:	429a      	cmp	r2, r3
 800537e:	d3ec      	bcc.n	800535a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005380:	883b      	ldrh	r3, [r7, #0]
 8005382:	0418      	lsls	r0, r3, #16
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6819      	ldr	r1, [r3, #0]
 8005388:	78fb      	ldrb	r3, [r7, #3]
 800538a:	3b01      	subs	r3, #1
 800538c:	68ba      	ldr	r2, [r7, #8]
 800538e:	4302      	orrs	r2, r0
 8005390:	3340      	adds	r3, #64	@ 0x40
 8005392:	009b      	lsls	r3, r3, #2
 8005394:	440b      	add	r3, r1
 8005396:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005398:	2300      	movs	r3, #0
}
 800539a:	4618      	mov	r0, r3
 800539c:	3714      	adds	r7, #20
 800539e:	46bd      	mov	sp, r7
 80053a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a4:	4770      	bx	lr

080053a6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80053a6:	b480      	push	{r7}
 80053a8:	b083      	sub	sp, #12
 80053aa:	af00      	add	r7, sp, #0
 80053ac:	6078      	str	r0, [r7, #4]
 80053ae:	460b      	mov	r3, r1
 80053b0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	887a      	ldrh	r2, [r7, #2]
 80053b8:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80053ba:	2300      	movs	r3, #0
}
 80053bc:	4618      	mov	r0, r3
 80053be:	370c      	adds	r7, #12
 80053c0:	46bd      	mov	sp, r7
 80053c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c6:	4770      	bx	lr

080053c8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b083      	sub	sp, #12
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
 80053d0:	460b      	mov	r3, r1
 80053d2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80053d4:	bf00      	nop
 80053d6:	370c      	adds	r7, #12
 80053d8:	46bd      	mov	sp, r7
 80053da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053de:	4770      	bx	lr

080053e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b086      	sub	sp, #24
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d101      	bne.n	80053f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	e267      	b.n	80058c2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f003 0301 	and.w	r3, r3, #1
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d075      	beq.n	80054ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80053fe:	4b88      	ldr	r3, [pc, #544]	@ (8005620 <HAL_RCC_OscConfig+0x240>)
 8005400:	689b      	ldr	r3, [r3, #8]
 8005402:	f003 030c 	and.w	r3, r3, #12
 8005406:	2b04      	cmp	r3, #4
 8005408:	d00c      	beq.n	8005424 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800540a:	4b85      	ldr	r3, [pc, #532]	@ (8005620 <HAL_RCC_OscConfig+0x240>)
 800540c:	689b      	ldr	r3, [r3, #8]
 800540e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005412:	2b08      	cmp	r3, #8
 8005414:	d112      	bne.n	800543c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005416:	4b82      	ldr	r3, [pc, #520]	@ (8005620 <HAL_RCC_OscConfig+0x240>)
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800541e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005422:	d10b      	bne.n	800543c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005424:	4b7e      	ldr	r3, [pc, #504]	@ (8005620 <HAL_RCC_OscConfig+0x240>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800542c:	2b00      	cmp	r3, #0
 800542e:	d05b      	beq.n	80054e8 <HAL_RCC_OscConfig+0x108>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d157      	bne.n	80054e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005438:	2301      	movs	r3, #1
 800543a:	e242      	b.n	80058c2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005444:	d106      	bne.n	8005454 <HAL_RCC_OscConfig+0x74>
 8005446:	4b76      	ldr	r3, [pc, #472]	@ (8005620 <HAL_RCC_OscConfig+0x240>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a75      	ldr	r2, [pc, #468]	@ (8005620 <HAL_RCC_OscConfig+0x240>)
 800544c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005450:	6013      	str	r3, [r2, #0]
 8005452:	e01d      	b.n	8005490 <HAL_RCC_OscConfig+0xb0>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800545c:	d10c      	bne.n	8005478 <HAL_RCC_OscConfig+0x98>
 800545e:	4b70      	ldr	r3, [pc, #448]	@ (8005620 <HAL_RCC_OscConfig+0x240>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a6f      	ldr	r2, [pc, #444]	@ (8005620 <HAL_RCC_OscConfig+0x240>)
 8005464:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005468:	6013      	str	r3, [r2, #0]
 800546a:	4b6d      	ldr	r3, [pc, #436]	@ (8005620 <HAL_RCC_OscConfig+0x240>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a6c      	ldr	r2, [pc, #432]	@ (8005620 <HAL_RCC_OscConfig+0x240>)
 8005470:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005474:	6013      	str	r3, [r2, #0]
 8005476:	e00b      	b.n	8005490 <HAL_RCC_OscConfig+0xb0>
 8005478:	4b69      	ldr	r3, [pc, #420]	@ (8005620 <HAL_RCC_OscConfig+0x240>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a68      	ldr	r2, [pc, #416]	@ (8005620 <HAL_RCC_OscConfig+0x240>)
 800547e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005482:	6013      	str	r3, [r2, #0]
 8005484:	4b66      	ldr	r3, [pc, #408]	@ (8005620 <HAL_RCC_OscConfig+0x240>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a65      	ldr	r2, [pc, #404]	@ (8005620 <HAL_RCC_OscConfig+0x240>)
 800548a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800548e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d013      	beq.n	80054c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005498:	f7fc f99e 	bl	80017d8 <HAL_GetTick>
 800549c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800549e:	e008      	b.n	80054b2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80054a0:	f7fc f99a 	bl	80017d8 <HAL_GetTick>
 80054a4:	4602      	mov	r2, r0
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	1ad3      	subs	r3, r2, r3
 80054aa:	2b64      	cmp	r3, #100	@ 0x64
 80054ac:	d901      	bls.n	80054b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80054ae:	2303      	movs	r3, #3
 80054b0:	e207      	b.n	80058c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054b2:	4b5b      	ldr	r3, [pc, #364]	@ (8005620 <HAL_RCC_OscConfig+0x240>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d0f0      	beq.n	80054a0 <HAL_RCC_OscConfig+0xc0>
 80054be:	e014      	b.n	80054ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054c0:	f7fc f98a 	bl	80017d8 <HAL_GetTick>
 80054c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054c6:	e008      	b.n	80054da <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80054c8:	f7fc f986 	bl	80017d8 <HAL_GetTick>
 80054cc:	4602      	mov	r2, r0
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	1ad3      	subs	r3, r2, r3
 80054d2:	2b64      	cmp	r3, #100	@ 0x64
 80054d4:	d901      	bls.n	80054da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80054d6:	2303      	movs	r3, #3
 80054d8:	e1f3      	b.n	80058c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054da:	4b51      	ldr	r3, [pc, #324]	@ (8005620 <HAL_RCC_OscConfig+0x240>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d1f0      	bne.n	80054c8 <HAL_RCC_OscConfig+0xe8>
 80054e6:	e000      	b.n	80054ea <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f003 0302 	and.w	r3, r3, #2
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d063      	beq.n	80055be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80054f6:	4b4a      	ldr	r3, [pc, #296]	@ (8005620 <HAL_RCC_OscConfig+0x240>)
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	f003 030c 	and.w	r3, r3, #12
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d00b      	beq.n	800551a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005502:	4b47      	ldr	r3, [pc, #284]	@ (8005620 <HAL_RCC_OscConfig+0x240>)
 8005504:	689b      	ldr	r3, [r3, #8]
 8005506:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800550a:	2b08      	cmp	r3, #8
 800550c:	d11c      	bne.n	8005548 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800550e:	4b44      	ldr	r3, [pc, #272]	@ (8005620 <HAL_RCC_OscConfig+0x240>)
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005516:	2b00      	cmp	r3, #0
 8005518:	d116      	bne.n	8005548 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800551a:	4b41      	ldr	r3, [pc, #260]	@ (8005620 <HAL_RCC_OscConfig+0x240>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f003 0302 	and.w	r3, r3, #2
 8005522:	2b00      	cmp	r3, #0
 8005524:	d005      	beq.n	8005532 <HAL_RCC_OscConfig+0x152>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	68db      	ldr	r3, [r3, #12]
 800552a:	2b01      	cmp	r3, #1
 800552c:	d001      	beq.n	8005532 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800552e:	2301      	movs	r3, #1
 8005530:	e1c7      	b.n	80058c2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005532:	4b3b      	ldr	r3, [pc, #236]	@ (8005620 <HAL_RCC_OscConfig+0x240>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	691b      	ldr	r3, [r3, #16]
 800553e:	00db      	lsls	r3, r3, #3
 8005540:	4937      	ldr	r1, [pc, #220]	@ (8005620 <HAL_RCC_OscConfig+0x240>)
 8005542:	4313      	orrs	r3, r2
 8005544:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005546:	e03a      	b.n	80055be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	68db      	ldr	r3, [r3, #12]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d020      	beq.n	8005592 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005550:	4b34      	ldr	r3, [pc, #208]	@ (8005624 <HAL_RCC_OscConfig+0x244>)
 8005552:	2201      	movs	r2, #1
 8005554:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005556:	f7fc f93f 	bl	80017d8 <HAL_GetTick>
 800555a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800555c:	e008      	b.n	8005570 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800555e:	f7fc f93b 	bl	80017d8 <HAL_GetTick>
 8005562:	4602      	mov	r2, r0
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	1ad3      	subs	r3, r2, r3
 8005568:	2b02      	cmp	r3, #2
 800556a:	d901      	bls.n	8005570 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800556c:	2303      	movs	r3, #3
 800556e:	e1a8      	b.n	80058c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005570:	4b2b      	ldr	r3, [pc, #172]	@ (8005620 <HAL_RCC_OscConfig+0x240>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f003 0302 	and.w	r3, r3, #2
 8005578:	2b00      	cmp	r3, #0
 800557a:	d0f0      	beq.n	800555e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800557c:	4b28      	ldr	r3, [pc, #160]	@ (8005620 <HAL_RCC_OscConfig+0x240>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	691b      	ldr	r3, [r3, #16]
 8005588:	00db      	lsls	r3, r3, #3
 800558a:	4925      	ldr	r1, [pc, #148]	@ (8005620 <HAL_RCC_OscConfig+0x240>)
 800558c:	4313      	orrs	r3, r2
 800558e:	600b      	str	r3, [r1, #0]
 8005590:	e015      	b.n	80055be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005592:	4b24      	ldr	r3, [pc, #144]	@ (8005624 <HAL_RCC_OscConfig+0x244>)
 8005594:	2200      	movs	r2, #0
 8005596:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005598:	f7fc f91e 	bl	80017d8 <HAL_GetTick>
 800559c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800559e:	e008      	b.n	80055b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80055a0:	f7fc f91a 	bl	80017d8 <HAL_GetTick>
 80055a4:	4602      	mov	r2, r0
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	1ad3      	subs	r3, r2, r3
 80055aa:	2b02      	cmp	r3, #2
 80055ac:	d901      	bls.n	80055b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80055ae:	2303      	movs	r3, #3
 80055b0:	e187      	b.n	80058c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80055b2:	4b1b      	ldr	r3, [pc, #108]	@ (8005620 <HAL_RCC_OscConfig+0x240>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f003 0302 	and.w	r3, r3, #2
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d1f0      	bne.n	80055a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f003 0308 	and.w	r3, r3, #8
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d036      	beq.n	8005638 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	695b      	ldr	r3, [r3, #20]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d016      	beq.n	8005600 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80055d2:	4b15      	ldr	r3, [pc, #84]	@ (8005628 <HAL_RCC_OscConfig+0x248>)
 80055d4:	2201      	movs	r2, #1
 80055d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055d8:	f7fc f8fe 	bl	80017d8 <HAL_GetTick>
 80055dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055de:	e008      	b.n	80055f2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055e0:	f7fc f8fa 	bl	80017d8 <HAL_GetTick>
 80055e4:	4602      	mov	r2, r0
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	1ad3      	subs	r3, r2, r3
 80055ea:	2b02      	cmp	r3, #2
 80055ec:	d901      	bls.n	80055f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80055ee:	2303      	movs	r3, #3
 80055f0:	e167      	b.n	80058c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055f2:	4b0b      	ldr	r3, [pc, #44]	@ (8005620 <HAL_RCC_OscConfig+0x240>)
 80055f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055f6:	f003 0302 	and.w	r3, r3, #2
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d0f0      	beq.n	80055e0 <HAL_RCC_OscConfig+0x200>
 80055fe:	e01b      	b.n	8005638 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005600:	4b09      	ldr	r3, [pc, #36]	@ (8005628 <HAL_RCC_OscConfig+0x248>)
 8005602:	2200      	movs	r2, #0
 8005604:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005606:	f7fc f8e7 	bl	80017d8 <HAL_GetTick>
 800560a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800560c:	e00e      	b.n	800562c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800560e:	f7fc f8e3 	bl	80017d8 <HAL_GetTick>
 8005612:	4602      	mov	r2, r0
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	1ad3      	subs	r3, r2, r3
 8005618:	2b02      	cmp	r3, #2
 800561a:	d907      	bls.n	800562c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800561c:	2303      	movs	r3, #3
 800561e:	e150      	b.n	80058c2 <HAL_RCC_OscConfig+0x4e2>
 8005620:	40023800 	.word	0x40023800
 8005624:	42470000 	.word	0x42470000
 8005628:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800562c:	4b88      	ldr	r3, [pc, #544]	@ (8005850 <HAL_RCC_OscConfig+0x470>)
 800562e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005630:	f003 0302 	and.w	r3, r3, #2
 8005634:	2b00      	cmp	r3, #0
 8005636:	d1ea      	bne.n	800560e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f003 0304 	and.w	r3, r3, #4
 8005640:	2b00      	cmp	r3, #0
 8005642:	f000 8097 	beq.w	8005774 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005646:	2300      	movs	r3, #0
 8005648:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800564a:	4b81      	ldr	r3, [pc, #516]	@ (8005850 <HAL_RCC_OscConfig+0x470>)
 800564c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800564e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005652:	2b00      	cmp	r3, #0
 8005654:	d10f      	bne.n	8005676 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005656:	2300      	movs	r3, #0
 8005658:	60bb      	str	r3, [r7, #8]
 800565a:	4b7d      	ldr	r3, [pc, #500]	@ (8005850 <HAL_RCC_OscConfig+0x470>)
 800565c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800565e:	4a7c      	ldr	r2, [pc, #496]	@ (8005850 <HAL_RCC_OscConfig+0x470>)
 8005660:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005664:	6413      	str	r3, [r2, #64]	@ 0x40
 8005666:	4b7a      	ldr	r3, [pc, #488]	@ (8005850 <HAL_RCC_OscConfig+0x470>)
 8005668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800566a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800566e:	60bb      	str	r3, [r7, #8]
 8005670:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005672:	2301      	movs	r3, #1
 8005674:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005676:	4b77      	ldr	r3, [pc, #476]	@ (8005854 <HAL_RCC_OscConfig+0x474>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800567e:	2b00      	cmp	r3, #0
 8005680:	d118      	bne.n	80056b4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005682:	4b74      	ldr	r3, [pc, #464]	@ (8005854 <HAL_RCC_OscConfig+0x474>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a73      	ldr	r2, [pc, #460]	@ (8005854 <HAL_RCC_OscConfig+0x474>)
 8005688:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800568c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800568e:	f7fc f8a3 	bl	80017d8 <HAL_GetTick>
 8005692:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005694:	e008      	b.n	80056a8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005696:	f7fc f89f 	bl	80017d8 <HAL_GetTick>
 800569a:	4602      	mov	r2, r0
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	1ad3      	subs	r3, r2, r3
 80056a0:	2b02      	cmp	r3, #2
 80056a2:	d901      	bls.n	80056a8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80056a4:	2303      	movs	r3, #3
 80056a6:	e10c      	b.n	80058c2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056a8:	4b6a      	ldr	r3, [pc, #424]	@ (8005854 <HAL_RCC_OscConfig+0x474>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d0f0      	beq.n	8005696 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	689b      	ldr	r3, [r3, #8]
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	d106      	bne.n	80056ca <HAL_RCC_OscConfig+0x2ea>
 80056bc:	4b64      	ldr	r3, [pc, #400]	@ (8005850 <HAL_RCC_OscConfig+0x470>)
 80056be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056c0:	4a63      	ldr	r2, [pc, #396]	@ (8005850 <HAL_RCC_OscConfig+0x470>)
 80056c2:	f043 0301 	orr.w	r3, r3, #1
 80056c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80056c8:	e01c      	b.n	8005704 <HAL_RCC_OscConfig+0x324>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	2b05      	cmp	r3, #5
 80056d0:	d10c      	bne.n	80056ec <HAL_RCC_OscConfig+0x30c>
 80056d2:	4b5f      	ldr	r3, [pc, #380]	@ (8005850 <HAL_RCC_OscConfig+0x470>)
 80056d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056d6:	4a5e      	ldr	r2, [pc, #376]	@ (8005850 <HAL_RCC_OscConfig+0x470>)
 80056d8:	f043 0304 	orr.w	r3, r3, #4
 80056dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80056de:	4b5c      	ldr	r3, [pc, #368]	@ (8005850 <HAL_RCC_OscConfig+0x470>)
 80056e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056e2:	4a5b      	ldr	r2, [pc, #364]	@ (8005850 <HAL_RCC_OscConfig+0x470>)
 80056e4:	f043 0301 	orr.w	r3, r3, #1
 80056e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80056ea:	e00b      	b.n	8005704 <HAL_RCC_OscConfig+0x324>
 80056ec:	4b58      	ldr	r3, [pc, #352]	@ (8005850 <HAL_RCC_OscConfig+0x470>)
 80056ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056f0:	4a57      	ldr	r2, [pc, #348]	@ (8005850 <HAL_RCC_OscConfig+0x470>)
 80056f2:	f023 0301 	bic.w	r3, r3, #1
 80056f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80056f8:	4b55      	ldr	r3, [pc, #340]	@ (8005850 <HAL_RCC_OscConfig+0x470>)
 80056fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056fc:	4a54      	ldr	r2, [pc, #336]	@ (8005850 <HAL_RCC_OscConfig+0x470>)
 80056fe:	f023 0304 	bic.w	r3, r3, #4
 8005702:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	689b      	ldr	r3, [r3, #8]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d015      	beq.n	8005738 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800570c:	f7fc f864 	bl	80017d8 <HAL_GetTick>
 8005710:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005712:	e00a      	b.n	800572a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005714:	f7fc f860 	bl	80017d8 <HAL_GetTick>
 8005718:	4602      	mov	r2, r0
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	1ad3      	subs	r3, r2, r3
 800571e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005722:	4293      	cmp	r3, r2
 8005724:	d901      	bls.n	800572a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005726:	2303      	movs	r3, #3
 8005728:	e0cb      	b.n	80058c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800572a:	4b49      	ldr	r3, [pc, #292]	@ (8005850 <HAL_RCC_OscConfig+0x470>)
 800572c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800572e:	f003 0302 	and.w	r3, r3, #2
 8005732:	2b00      	cmp	r3, #0
 8005734:	d0ee      	beq.n	8005714 <HAL_RCC_OscConfig+0x334>
 8005736:	e014      	b.n	8005762 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005738:	f7fc f84e 	bl	80017d8 <HAL_GetTick>
 800573c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800573e:	e00a      	b.n	8005756 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005740:	f7fc f84a 	bl	80017d8 <HAL_GetTick>
 8005744:	4602      	mov	r2, r0
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	1ad3      	subs	r3, r2, r3
 800574a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800574e:	4293      	cmp	r3, r2
 8005750:	d901      	bls.n	8005756 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005752:	2303      	movs	r3, #3
 8005754:	e0b5      	b.n	80058c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005756:	4b3e      	ldr	r3, [pc, #248]	@ (8005850 <HAL_RCC_OscConfig+0x470>)
 8005758:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800575a:	f003 0302 	and.w	r3, r3, #2
 800575e:	2b00      	cmp	r3, #0
 8005760:	d1ee      	bne.n	8005740 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005762:	7dfb      	ldrb	r3, [r7, #23]
 8005764:	2b01      	cmp	r3, #1
 8005766:	d105      	bne.n	8005774 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005768:	4b39      	ldr	r3, [pc, #228]	@ (8005850 <HAL_RCC_OscConfig+0x470>)
 800576a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800576c:	4a38      	ldr	r2, [pc, #224]	@ (8005850 <HAL_RCC_OscConfig+0x470>)
 800576e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005772:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	699b      	ldr	r3, [r3, #24]
 8005778:	2b00      	cmp	r3, #0
 800577a:	f000 80a1 	beq.w	80058c0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800577e:	4b34      	ldr	r3, [pc, #208]	@ (8005850 <HAL_RCC_OscConfig+0x470>)
 8005780:	689b      	ldr	r3, [r3, #8]
 8005782:	f003 030c 	and.w	r3, r3, #12
 8005786:	2b08      	cmp	r3, #8
 8005788:	d05c      	beq.n	8005844 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	699b      	ldr	r3, [r3, #24]
 800578e:	2b02      	cmp	r3, #2
 8005790:	d141      	bne.n	8005816 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005792:	4b31      	ldr	r3, [pc, #196]	@ (8005858 <HAL_RCC_OscConfig+0x478>)
 8005794:	2200      	movs	r2, #0
 8005796:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005798:	f7fc f81e 	bl	80017d8 <HAL_GetTick>
 800579c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800579e:	e008      	b.n	80057b2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057a0:	f7fc f81a 	bl	80017d8 <HAL_GetTick>
 80057a4:	4602      	mov	r2, r0
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	1ad3      	subs	r3, r2, r3
 80057aa:	2b02      	cmp	r3, #2
 80057ac:	d901      	bls.n	80057b2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80057ae:	2303      	movs	r3, #3
 80057b0:	e087      	b.n	80058c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057b2:	4b27      	ldr	r3, [pc, #156]	@ (8005850 <HAL_RCC_OscConfig+0x470>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d1f0      	bne.n	80057a0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	69da      	ldr	r2, [r3, #28]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6a1b      	ldr	r3, [r3, #32]
 80057c6:	431a      	orrs	r2, r3
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057cc:	019b      	lsls	r3, r3, #6
 80057ce:	431a      	orrs	r2, r3
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057d4:	085b      	lsrs	r3, r3, #1
 80057d6:	3b01      	subs	r3, #1
 80057d8:	041b      	lsls	r3, r3, #16
 80057da:	431a      	orrs	r2, r3
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057e0:	061b      	lsls	r3, r3, #24
 80057e2:	491b      	ldr	r1, [pc, #108]	@ (8005850 <HAL_RCC_OscConfig+0x470>)
 80057e4:	4313      	orrs	r3, r2
 80057e6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80057e8:	4b1b      	ldr	r3, [pc, #108]	@ (8005858 <HAL_RCC_OscConfig+0x478>)
 80057ea:	2201      	movs	r2, #1
 80057ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057ee:	f7fb fff3 	bl	80017d8 <HAL_GetTick>
 80057f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057f4:	e008      	b.n	8005808 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057f6:	f7fb ffef 	bl	80017d8 <HAL_GetTick>
 80057fa:	4602      	mov	r2, r0
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	1ad3      	subs	r3, r2, r3
 8005800:	2b02      	cmp	r3, #2
 8005802:	d901      	bls.n	8005808 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005804:	2303      	movs	r3, #3
 8005806:	e05c      	b.n	80058c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005808:	4b11      	ldr	r3, [pc, #68]	@ (8005850 <HAL_RCC_OscConfig+0x470>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005810:	2b00      	cmp	r3, #0
 8005812:	d0f0      	beq.n	80057f6 <HAL_RCC_OscConfig+0x416>
 8005814:	e054      	b.n	80058c0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005816:	4b10      	ldr	r3, [pc, #64]	@ (8005858 <HAL_RCC_OscConfig+0x478>)
 8005818:	2200      	movs	r2, #0
 800581a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800581c:	f7fb ffdc 	bl	80017d8 <HAL_GetTick>
 8005820:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005822:	e008      	b.n	8005836 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005824:	f7fb ffd8 	bl	80017d8 <HAL_GetTick>
 8005828:	4602      	mov	r2, r0
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	1ad3      	subs	r3, r2, r3
 800582e:	2b02      	cmp	r3, #2
 8005830:	d901      	bls.n	8005836 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005832:	2303      	movs	r3, #3
 8005834:	e045      	b.n	80058c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005836:	4b06      	ldr	r3, [pc, #24]	@ (8005850 <HAL_RCC_OscConfig+0x470>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800583e:	2b00      	cmp	r3, #0
 8005840:	d1f0      	bne.n	8005824 <HAL_RCC_OscConfig+0x444>
 8005842:	e03d      	b.n	80058c0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	699b      	ldr	r3, [r3, #24]
 8005848:	2b01      	cmp	r3, #1
 800584a:	d107      	bne.n	800585c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800584c:	2301      	movs	r3, #1
 800584e:	e038      	b.n	80058c2 <HAL_RCC_OscConfig+0x4e2>
 8005850:	40023800 	.word	0x40023800
 8005854:	40007000 	.word	0x40007000
 8005858:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800585c:	4b1b      	ldr	r3, [pc, #108]	@ (80058cc <HAL_RCC_OscConfig+0x4ec>)
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	699b      	ldr	r3, [r3, #24]
 8005866:	2b01      	cmp	r3, #1
 8005868:	d028      	beq.n	80058bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005874:	429a      	cmp	r2, r3
 8005876:	d121      	bne.n	80058bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005882:	429a      	cmp	r2, r3
 8005884:	d11a      	bne.n	80058bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005886:	68fa      	ldr	r2, [r7, #12]
 8005888:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800588c:	4013      	ands	r3, r2
 800588e:	687a      	ldr	r2, [r7, #4]
 8005890:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005892:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005894:	4293      	cmp	r3, r2
 8005896:	d111      	bne.n	80058bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058a2:	085b      	lsrs	r3, r3, #1
 80058a4:	3b01      	subs	r3, #1
 80058a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80058a8:	429a      	cmp	r2, r3
 80058aa:	d107      	bne.n	80058bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d001      	beq.n	80058c0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80058bc:	2301      	movs	r3, #1
 80058be:	e000      	b.n	80058c2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80058c0:	2300      	movs	r3, #0
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3718      	adds	r7, #24
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}
 80058ca:	bf00      	nop
 80058cc:	40023800 	.word	0x40023800

080058d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b084      	sub	sp, #16
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
 80058d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d101      	bne.n	80058e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80058e0:	2301      	movs	r3, #1
 80058e2:	e0cc      	b.n	8005a7e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80058e4:	4b68      	ldr	r3, [pc, #416]	@ (8005a88 <HAL_RCC_ClockConfig+0x1b8>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f003 0307 	and.w	r3, r3, #7
 80058ec:	683a      	ldr	r2, [r7, #0]
 80058ee:	429a      	cmp	r2, r3
 80058f0:	d90c      	bls.n	800590c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058f2:	4b65      	ldr	r3, [pc, #404]	@ (8005a88 <HAL_RCC_ClockConfig+0x1b8>)
 80058f4:	683a      	ldr	r2, [r7, #0]
 80058f6:	b2d2      	uxtb	r2, r2
 80058f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80058fa:	4b63      	ldr	r3, [pc, #396]	@ (8005a88 <HAL_RCC_ClockConfig+0x1b8>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f003 0307 	and.w	r3, r3, #7
 8005902:	683a      	ldr	r2, [r7, #0]
 8005904:	429a      	cmp	r2, r3
 8005906:	d001      	beq.n	800590c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005908:	2301      	movs	r3, #1
 800590a:	e0b8      	b.n	8005a7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f003 0302 	and.w	r3, r3, #2
 8005914:	2b00      	cmp	r3, #0
 8005916:	d020      	beq.n	800595a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f003 0304 	and.w	r3, r3, #4
 8005920:	2b00      	cmp	r3, #0
 8005922:	d005      	beq.n	8005930 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005924:	4b59      	ldr	r3, [pc, #356]	@ (8005a8c <HAL_RCC_ClockConfig+0x1bc>)
 8005926:	689b      	ldr	r3, [r3, #8]
 8005928:	4a58      	ldr	r2, [pc, #352]	@ (8005a8c <HAL_RCC_ClockConfig+0x1bc>)
 800592a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800592e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f003 0308 	and.w	r3, r3, #8
 8005938:	2b00      	cmp	r3, #0
 800593a:	d005      	beq.n	8005948 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800593c:	4b53      	ldr	r3, [pc, #332]	@ (8005a8c <HAL_RCC_ClockConfig+0x1bc>)
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	4a52      	ldr	r2, [pc, #328]	@ (8005a8c <HAL_RCC_ClockConfig+0x1bc>)
 8005942:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005946:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005948:	4b50      	ldr	r3, [pc, #320]	@ (8005a8c <HAL_RCC_ClockConfig+0x1bc>)
 800594a:	689b      	ldr	r3, [r3, #8]
 800594c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	689b      	ldr	r3, [r3, #8]
 8005954:	494d      	ldr	r1, [pc, #308]	@ (8005a8c <HAL_RCC_ClockConfig+0x1bc>)
 8005956:	4313      	orrs	r3, r2
 8005958:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f003 0301 	and.w	r3, r3, #1
 8005962:	2b00      	cmp	r3, #0
 8005964:	d044      	beq.n	80059f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	2b01      	cmp	r3, #1
 800596c:	d107      	bne.n	800597e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800596e:	4b47      	ldr	r3, [pc, #284]	@ (8005a8c <HAL_RCC_ClockConfig+0x1bc>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005976:	2b00      	cmp	r3, #0
 8005978:	d119      	bne.n	80059ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800597a:	2301      	movs	r3, #1
 800597c:	e07f      	b.n	8005a7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	2b02      	cmp	r3, #2
 8005984:	d003      	beq.n	800598e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800598a:	2b03      	cmp	r3, #3
 800598c:	d107      	bne.n	800599e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800598e:	4b3f      	ldr	r3, [pc, #252]	@ (8005a8c <HAL_RCC_ClockConfig+0x1bc>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005996:	2b00      	cmp	r3, #0
 8005998:	d109      	bne.n	80059ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800599a:	2301      	movs	r3, #1
 800599c:	e06f      	b.n	8005a7e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800599e:	4b3b      	ldr	r3, [pc, #236]	@ (8005a8c <HAL_RCC_ClockConfig+0x1bc>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f003 0302 	and.w	r3, r3, #2
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d101      	bne.n	80059ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059aa:	2301      	movs	r3, #1
 80059ac:	e067      	b.n	8005a7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80059ae:	4b37      	ldr	r3, [pc, #220]	@ (8005a8c <HAL_RCC_ClockConfig+0x1bc>)
 80059b0:	689b      	ldr	r3, [r3, #8]
 80059b2:	f023 0203 	bic.w	r2, r3, #3
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	4934      	ldr	r1, [pc, #208]	@ (8005a8c <HAL_RCC_ClockConfig+0x1bc>)
 80059bc:	4313      	orrs	r3, r2
 80059be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80059c0:	f7fb ff0a 	bl	80017d8 <HAL_GetTick>
 80059c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059c6:	e00a      	b.n	80059de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059c8:	f7fb ff06 	bl	80017d8 <HAL_GetTick>
 80059cc:	4602      	mov	r2, r0
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	1ad3      	subs	r3, r2, r3
 80059d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d901      	bls.n	80059de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80059da:	2303      	movs	r3, #3
 80059dc:	e04f      	b.n	8005a7e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059de:	4b2b      	ldr	r3, [pc, #172]	@ (8005a8c <HAL_RCC_ClockConfig+0x1bc>)
 80059e0:	689b      	ldr	r3, [r3, #8]
 80059e2:	f003 020c 	and.w	r2, r3, #12
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	009b      	lsls	r3, r3, #2
 80059ec:	429a      	cmp	r2, r3
 80059ee:	d1eb      	bne.n	80059c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80059f0:	4b25      	ldr	r3, [pc, #148]	@ (8005a88 <HAL_RCC_ClockConfig+0x1b8>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f003 0307 	and.w	r3, r3, #7
 80059f8:	683a      	ldr	r2, [r7, #0]
 80059fa:	429a      	cmp	r2, r3
 80059fc:	d20c      	bcs.n	8005a18 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059fe:	4b22      	ldr	r3, [pc, #136]	@ (8005a88 <HAL_RCC_ClockConfig+0x1b8>)
 8005a00:	683a      	ldr	r2, [r7, #0]
 8005a02:	b2d2      	uxtb	r2, r2
 8005a04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a06:	4b20      	ldr	r3, [pc, #128]	@ (8005a88 <HAL_RCC_ClockConfig+0x1b8>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f003 0307 	and.w	r3, r3, #7
 8005a0e:	683a      	ldr	r2, [r7, #0]
 8005a10:	429a      	cmp	r2, r3
 8005a12:	d001      	beq.n	8005a18 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005a14:	2301      	movs	r3, #1
 8005a16:	e032      	b.n	8005a7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f003 0304 	and.w	r3, r3, #4
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d008      	beq.n	8005a36 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a24:	4b19      	ldr	r3, [pc, #100]	@ (8005a8c <HAL_RCC_ClockConfig+0x1bc>)
 8005a26:	689b      	ldr	r3, [r3, #8]
 8005a28:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	68db      	ldr	r3, [r3, #12]
 8005a30:	4916      	ldr	r1, [pc, #88]	@ (8005a8c <HAL_RCC_ClockConfig+0x1bc>)
 8005a32:	4313      	orrs	r3, r2
 8005a34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f003 0308 	and.w	r3, r3, #8
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d009      	beq.n	8005a56 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005a42:	4b12      	ldr	r3, [pc, #72]	@ (8005a8c <HAL_RCC_ClockConfig+0x1bc>)
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	691b      	ldr	r3, [r3, #16]
 8005a4e:	00db      	lsls	r3, r3, #3
 8005a50:	490e      	ldr	r1, [pc, #56]	@ (8005a8c <HAL_RCC_ClockConfig+0x1bc>)
 8005a52:	4313      	orrs	r3, r2
 8005a54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005a56:	f000 f821 	bl	8005a9c <HAL_RCC_GetSysClockFreq>
 8005a5a:	4602      	mov	r2, r0
 8005a5c:	4b0b      	ldr	r3, [pc, #44]	@ (8005a8c <HAL_RCC_ClockConfig+0x1bc>)
 8005a5e:	689b      	ldr	r3, [r3, #8]
 8005a60:	091b      	lsrs	r3, r3, #4
 8005a62:	f003 030f 	and.w	r3, r3, #15
 8005a66:	490a      	ldr	r1, [pc, #40]	@ (8005a90 <HAL_RCC_ClockConfig+0x1c0>)
 8005a68:	5ccb      	ldrb	r3, [r1, r3]
 8005a6a:	fa22 f303 	lsr.w	r3, r2, r3
 8005a6e:	4a09      	ldr	r2, [pc, #36]	@ (8005a94 <HAL_RCC_ClockConfig+0x1c4>)
 8005a70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005a72:	4b09      	ldr	r3, [pc, #36]	@ (8005a98 <HAL_RCC_ClockConfig+0x1c8>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4618      	mov	r0, r3
 8005a78:	f7fb fe6a 	bl	8001750 <HAL_InitTick>

  return HAL_OK;
 8005a7c:	2300      	movs	r3, #0
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	3710      	adds	r7, #16
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}
 8005a86:	bf00      	nop
 8005a88:	40023c00 	.word	0x40023c00
 8005a8c:	40023800 	.word	0x40023800
 8005a90:	0800af74 	.word	0x0800af74
 8005a94:	20000018 	.word	0x20000018
 8005a98:	2000001c 	.word	0x2000001c

08005a9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005aa0:	b090      	sub	sp, #64	@ 0x40
 8005aa2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8005aac:	2300      	movs	r3, #0
 8005aae:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005ab4:	4b59      	ldr	r3, [pc, #356]	@ (8005c1c <HAL_RCC_GetSysClockFreq+0x180>)
 8005ab6:	689b      	ldr	r3, [r3, #8]
 8005ab8:	f003 030c 	and.w	r3, r3, #12
 8005abc:	2b08      	cmp	r3, #8
 8005abe:	d00d      	beq.n	8005adc <HAL_RCC_GetSysClockFreq+0x40>
 8005ac0:	2b08      	cmp	r3, #8
 8005ac2:	f200 80a1 	bhi.w	8005c08 <HAL_RCC_GetSysClockFreq+0x16c>
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d002      	beq.n	8005ad0 <HAL_RCC_GetSysClockFreq+0x34>
 8005aca:	2b04      	cmp	r3, #4
 8005acc:	d003      	beq.n	8005ad6 <HAL_RCC_GetSysClockFreq+0x3a>
 8005ace:	e09b      	b.n	8005c08 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005ad0:	4b53      	ldr	r3, [pc, #332]	@ (8005c20 <HAL_RCC_GetSysClockFreq+0x184>)
 8005ad2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005ad4:	e09b      	b.n	8005c0e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005ad6:	4b53      	ldr	r3, [pc, #332]	@ (8005c24 <HAL_RCC_GetSysClockFreq+0x188>)
 8005ad8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005ada:	e098      	b.n	8005c0e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005adc:	4b4f      	ldr	r3, [pc, #316]	@ (8005c1c <HAL_RCC_GetSysClockFreq+0x180>)
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005ae4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005ae6:	4b4d      	ldr	r3, [pc, #308]	@ (8005c1c <HAL_RCC_GetSysClockFreq+0x180>)
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d028      	beq.n	8005b44 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005af2:	4b4a      	ldr	r3, [pc, #296]	@ (8005c1c <HAL_RCC_GetSysClockFreq+0x180>)
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	099b      	lsrs	r3, r3, #6
 8005af8:	2200      	movs	r2, #0
 8005afa:	623b      	str	r3, [r7, #32]
 8005afc:	627a      	str	r2, [r7, #36]	@ 0x24
 8005afe:	6a3b      	ldr	r3, [r7, #32]
 8005b00:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005b04:	2100      	movs	r1, #0
 8005b06:	4b47      	ldr	r3, [pc, #284]	@ (8005c24 <HAL_RCC_GetSysClockFreq+0x188>)
 8005b08:	fb03 f201 	mul.w	r2, r3, r1
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	fb00 f303 	mul.w	r3, r0, r3
 8005b12:	4413      	add	r3, r2
 8005b14:	4a43      	ldr	r2, [pc, #268]	@ (8005c24 <HAL_RCC_GetSysClockFreq+0x188>)
 8005b16:	fba0 1202 	umull	r1, r2, r0, r2
 8005b1a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005b1c:	460a      	mov	r2, r1
 8005b1e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005b20:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005b22:	4413      	add	r3, r2
 8005b24:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005b26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b28:	2200      	movs	r2, #0
 8005b2a:	61bb      	str	r3, [r7, #24]
 8005b2c:	61fa      	str	r2, [r7, #28]
 8005b2e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005b32:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8005b36:	f7fa fba3 	bl	8000280 <__aeabi_uldivmod>
 8005b3a:	4602      	mov	r2, r0
 8005b3c:	460b      	mov	r3, r1
 8005b3e:	4613      	mov	r3, r2
 8005b40:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005b42:	e053      	b.n	8005bec <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b44:	4b35      	ldr	r3, [pc, #212]	@ (8005c1c <HAL_RCC_GetSysClockFreq+0x180>)
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	099b      	lsrs	r3, r3, #6
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	613b      	str	r3, [r7, #16]
 8005b4e:	617a      	str	r2, [r7, #20]
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005b56:	f04f 0b00 	mov.w	fp, #0
 8005b5a:	4652      	mov	r2, sl
 8005b5c:	465b      	mov	r3, fp
 8005b5e:	f04f 0000 	mov.w	r0, #0
 8005b62:	f04f 0100 	mov.w	r1, #0
 8005b66:	0159      	lsls	r1, r3, #5
 8005b68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005b6c:	0150      	lsls	r0, r2, #5
 8005b6e:	4602      	mov	r2, r0
 8005b70:	460b      	mov	r3, r1
 8005b72:	ebb2 080a 	subs.w	r8, r2, sl
 8005b76:	eb63 090b 	sbc.w	r9, r3, fp
 8005b7a:	f04f 0200 	mov.w	r2, #0
 8005b7e:	f04f 0300 	mov.w	r3, #0
 8005b82:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005b86:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005b8a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005b8e:	ebb2 0408 	subs.w	r4, r2, r8
 8005b92:	eb63 0509 	sbc.w	r5, r3, r9
 8005b96:	f04f 0200 	mov.w	r2, #0
 8005b9a:	f04f 0300 	mov.w	r3, #0
 8005b9e:	00eb      	lsls	r3, r5, #3
 8005ba0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005ba4:	00e2      	lsls	r2, r4, #3
 8005ba6:	4614      	mov	r4, r2
 8005ba8:	461d      	mov	r5, r3
 8005baa:	eb14 030a 	adds.w	r3, r4, sl
 8005bae:	603b      	str	r3, [r7, #0]
 8005bb0:	eb45 030b 	adc.w	r3, r5, fp
 8005bb4:	607b      	str	r3, [r7, #4]
 8005bb6:	f04f 0200 	mov.w	r2, #0
 8005bba:	f04f 0300 	mov.w	r3, #0
 8005bbe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005bc2:	4629      	mov	r1, r5
 8005bc4:	028b      	lsls	r3, r1, #10
 8005bc6:	4621      	mov	r1, r4
 8005bc8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005bcc:	4621      	mov	r1, r4
 8005bce:	028a      	lsls	r2, r1, #10
 8005bd0:	4610      	mov	r0, r2
 8005bd2:	4619      	mov	r1, r3
 8005bd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	60bb      	str	r3, [r7, #8]
 8005bda:	60fa      	str	r2, [r7, #12]
 8005bdc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005be0:	f7fa fb4e 	bl	8000280 <__aeabi_uldivmod>
 8005be4:	4602      	mov	r2, r0
 8005be6:	460b      	mov	r3, r1
 8005be8:	4613      	mov	r3, r2
 8005bea:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005bec:	4b0b      	ldr	r3, [pc, #44]	@ (8005c1c <HAL_RCC_GetSysClockFreq+0x180>)
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	0c1b      	lsrs	r3, r3, #16
 8005bf2:	f003 0303 	and.w	r3, r3, #3
 8005bf6:	3301      	adds	r3, #1
 8005bf8:	005b      	lsls	r3, r3, #1
 8005bfa:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8005bfc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005bfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c00:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c04:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005c06:	e002      	b.n	8005c0e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005c08:	4b05      	ldr	r3, [pc, #20]	@ (8005c20 <HAL_RCC_GetSysClockFreq+0x184>)
 8005c0a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005c0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005c0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	3740      	adds	r7, #64	@ 0x40
 8005c14:	46bd      	mov	sp, r7
 8005c16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c1a:	bf00      	nop
 8005c1c:	40023800 	.word	0x40023800
 8005c20:	00f42400 	.word	0x00f42400
 8005c24:	016e3600 	.word	0x016e3600

08005c28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c2c:	4b03      	ldr	r3, [pc, #12]	@ (8005c3c <HAL_RCC_GetHCLKFreq+0x14>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	46bd      	mov	sp, r7
 8005c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c38:	4770      	bx	lr
 8005c3a:	bf00      	nop
 8005c3c:	20000018 	.word	0x20000018

08005c40 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b086      	sub	sp, #24
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005c48:	2300      	movs	r3, #0
 8005c4a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f003 0301 	and.w	r3, r3, #1
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d105      	bne.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d035      	beq.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005c68:	4b67      	ldr	r3, [pc, #412]	@ (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005c6e:	f7fb fdb3 	bl	80017d8 <HAL_GetTick>
 8005c72:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005c74:	e008      	b.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005c76:	f7fb fdaf 	bl	80017d8 <HAL_GetTick>
 8005c7a:	4602      	mov	r2, r0
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	1ad3      	subs	r3, r2, r3
 8005c80:	2b02      	cmp	r3, #2
 8005c82:	d901      	bls.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005c84:	2303      	movs	r3, #3
 8005c86:	e0ba      	b.n	8005dfe <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005c88:	4b60      	ldr	r3, [pc, #384]	@ (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d1f0      	bne.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	019a      	lsls	r2, r3, #6
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	689b      	ldr	r3, [r3, #8]
 8005c9e:	071b      	lsls	r3, r3, #28
 8005ca0:	495a      	ldr	r1, [pc, #360]	@ (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005ca8:	4b57      	ldr	r3, [pc, #348]	@ (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8005caa:	2201      	movs	r2, #1
 8005cac:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005cae:	f7fb fd93 	bl	80017d8 <HAL_GetTick>
 8005cb2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005cb4:	e008      	b.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005cb6:	f7fb fd8f 	bl	80017d8 <HAL_GetTick>
 8005cba:	4602      	mov	r2, r0
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	1ad3      	subs	r3, r2, r3
 8005cc0:	2b02      	cmp	r3, #2
 8005cc2:	d901      	bls.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005cc4:	2303      	movs	r3, #3
 8005cc6:	e09a      	b.n	8005dfe <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005cc8:	4b50      	ldr	r3, [pc, #320]	@ (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d0f0      	beq.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f003 0302 	and.w	r3, r3, #2
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	f000 8083 	beq.w	8005de8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	60fb      	str	r3, [r7, #12]
 8005ce6:	4b49      	ldr	r3, [pc, #292]	@ (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005ce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cea:	4a48      	ldr	r2, [pc, #288]	@ (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005cec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005cf0:	6413      	str	r3, [r2, #64]	@ 0x40
 8005cf2:	4b46      	ldr	r3, [pc, #280]	@ (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cf6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005cfa:	60fb      	str	r3, [r7, #12]
 8005cfc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005cfe:	4b44      	ldr	r3, [pc, #272]	@ (8005e10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a43      	ldr	r2, [pc, #268]	@ (8005e10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d08:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005d0a:	f7fb fd65 	bl	80017d8 <HAL_GetTick>
 8005d0e:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005d10:	e008      	b.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d12:	f7fb fd61 	bl	80017d8 <HAL_GetTick>
 8005d16:	4602      	mov	r2, r0
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	1ad3      	subs	r3, r2, r3
 8005d1c:	2b02      	cmp	r3, #2
 8005d1e:	d901      	bls.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005d20:	2303      	movs	r3, #3
 8005d22:	e06c      	b.n	8005dfe <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005d24:	4b3a      	ldr	r3, [pc, #232]	@ (8005e10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d0f0      	beq.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005d30:	4b36      	ldr	r3, [pc, #216]	@ (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005d32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d34:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d38:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d02f      	beq.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	68db      	ldr	r3, [r3, #12]
 8005d44:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d48:	693a      	ldr	r2, [r7, #16]
 8005d4a:	429a      	cmp	r2, r3
 8005d4c:	d028      	beq.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005d4e:	4b2f      	ldr	r3, [pc, #188]	@ (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005d50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d52:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d56:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005d58:	4b2e      	ldr	r3, [pc, #184]	@ (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005d5e:	4b2d      	ldr	r3, [pc, #180]	@ (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005d60:	2200      	movs	r2, #0
 8005d62:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005d64:	4a29      	ldr	r2, [pc, #164]	@ (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005d6a:	4b28      	ldr	r3, [pc, #160]	@ (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005d6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d6e:	f003 0301 	and.w	r3, r3, #1
 8005d72:	2b01      	cmp	r3, #1
 8005d74:	d114      	bne.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005d76:	f7fb fd2f 	bl	80017d8 <HAL_GetTick>
 8005d7a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d7c:	e00a      	b.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d7e:	f7fb fd2b 	bl	80017d8 <HAL_GetTick>
 8005d82:	4602      	mov	r2, r0
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	1ad3      	subs	r3, r2, r3
 8005d88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d901      	bls.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005d90:	2303      	movs	r3, #3
 8005d92:	e034      	b.n	8005dfe <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d94:	4b1d      	ldr	r3, [pc, #116]	@ (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005d96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d98:	f003 0302 	and.w	r3, r3, #2
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d0ee      	beq.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	68db      	ldr	r3, [r3, #12]
 8005da4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005da8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005dac:	d10d      	bne.n	8005dca <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005dae:	4b17      	ldr	r3, [pc, #92]	@ (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005db0:	689b      	ldr	r3, [r3, #8]
 8005db2:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	68db      	ldr	r3, [r3, #12]
 8005dba:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005dbe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005dc2:	4912      	ldr	r1, [pc, #72]	@ (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	608b      	str	r3, [r1, #8]
 8005dc8:	e005      	b.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005dca:	4b10      	ldr	r3, [pc, #64]	@ (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005dcc:	689b      	ldr	r3, [r3, #8]
 8005dce:	4a0f      	ldr	r2, [pc, #60]	@ (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005dd0:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005dd4:	6093      	str	r3, [r2, #8]
 8005dd6:	4b0d      	ldr	r3, [pc, #52]	@ (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005dd8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	68db      	ldr	r3, [r3, #12]
 8005dde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005de2:	490a      	ldr	r1, [pc, #40]	@ (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005de4:	4313      	orrs	r3, r2
 8005de6:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f003 0308 	and.w	r3, r3, #8
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d003      	beq.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	7c1a      	ldrb	r2, [r3, #16]
 8005df8:	4b07      	ldr	r3, [pc, #28]	@ (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005dfa:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005dfc:	2300      	movs	r3, #0
}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	3718      	adds	r7, #24
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}
 8005e06:	bf00      	nop
 8005e08:	42470068 	.word	0x42470068
 8005e0c:	40023800 	.word	0x40023800
 8005e10:	40007000 	.word	0x40007000
 8005e14:	42470e40 	.word	0x42470e40
 8005e18:	424711e0 	.word	0x424711e0

08005e1c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b087      	sub	sp, #28
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005e24:	2300      	movs	r3, #0
 8005e26:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005e28:	2300      	movs	r3, #0
 8005e2a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005e30:	2300      	movs	r3, #0
 8005e32:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2b01      	cmp	r3, #1
 8005e38:	d13f      	bne.n	8005eba <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005e3a:	4b24      	ldr	r3, [pc, #144]	@ (8005ecc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005e3c:	689b      	ldr	r3, [r3, #8]
 8005e3e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005e42:	60fb      	str	r3, [r7, #12]
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d006      	beq.n	8005e58 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005e50:	d12f      	bne.n	8005eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005e52:	4b1f      	ldr	r3, [pc, #124]	@ (8005ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005e54:	617b      	str	r3, [r7, #20]
          break;
 8005e56:	e02f      	b.n	8005eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005e58:	4b1c      	ldr	r3, [pc, #112]	@ (8005ecc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005e60:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005e64:	d108      	bne.n	8005e78 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005e66:	4b19      	ldr	r3, [pc, #100]	@ (8005ecc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005e6e:	4a19      	ldr	r2, [pc, #100]	@ (8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005e70:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e74:	613b      	str	r3, [r7, #16]
 8005e76:	e007      	b.n	8005e88 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005e78:	4b14      	ldr	r3, [pc, #80]	@ (8005ecc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005e80:	4a15      	ldr	r2, [pc, #84]	@ (8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8005e82:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e86:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005e88:	4b10      	ldr	r3, [pc, #64]	@ (8005ecc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005e8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e8e:	099b      	lsrs	r3, r3, #6
 8005e90:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	fb02 f303 	mul.w	r3, r2, r3
 8005e9a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005e9c:	4b0b      	ldr	r3, [pc, #44]	@ (8005ecc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005e9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ea2:	0f1b      	lsrs	r3, r3, #28
 8005ea4:	f003 0307 	and.w	r3, r3, #7
 8005ea8:	68ba      	ldr	r2, [r7, #8]
 8005eaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8005eae:	617b      	str	r3, [r7, #20]
          break;
 8005eb0:	e002      	b.n	8005eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	617b      	str	r3, [r7, #20]
          break;
 8005eb6:	bf00      	nop
        }
      }
      break;
 8005eb8:	e000      	b.n	8005ebc <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8005eba:	bf00      	nop
    }
  }
  return frequency;
 8005ebc:	697b      	ldr	r3, [r7, #20]
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	371c      	adds	r7, #28
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec8:	4770      	bx	lr
 8005eca:	bf00      	nop
 8005ecc:	40023800 	.word	0x40023800
 8005ed0:	00bb8000 	.word	0x00bb8000
 8005ed4:	016e3600 	.word	0x016e3600
 8005ed8:	00f42400 	.word	0x00f42400

08005edc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005edc:	b084      	sub	sp, #16
 8005ede:	b580      	push	{r7, lr}
 8005ee0:	b084      	sub	sp, #16
 8005ee2:	af00      	add	r7, sp, #0
 8005ee4:	6078      	str	r0, [r7, #4]
 8005ee6:	f107 001c 	add.w	r0, r7, #28
 8005eea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005eee:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005ef2:	2b01      	cmp	r3, #1
 8005ef4:	d123      	bne.n	8005f3e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005efa:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	68db      	ldr	r3, [r3, #12]
 8005f06:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005f0a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f0e:	687a      	ldr	r2, [r7, #4]
 8005f10:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	68db      	ldr	r3, [r3, #12]
 8005f16:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005f1e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005f22:	2b01      	cmp	r3, #1
 8005f24:	d105      	bne.n	8005f32 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	68db      	ldr	r3, [r3, #12]
 8005f2a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f001 fae8 	bl	8007508 <USB_CoreReset>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	73fb      	strb	r3, [r7, #15]
 8005f3c:	e01b      	b.n	8005f76 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	68db      	ldr	r3, [r3, #12]
 8005f42:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f001 fadc 	bl	8007508 <USB_CoreReset>
 8005f50:	4603      	mov	r3, r0
 8005f52:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005f54:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d106      	bne.n	8005f6a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f60:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	639a      	str	r2, [r3, #56]	@ 0x38
 8005f68:	e005      	b.n	8005f76 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f6e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005f76:	7fbb      	ldrb	r3, [r7, #30]
 8005f78:	2b01      	cmp	r3, #1
 8005f7a:	d10b      	bne.n	8005f94 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	689b      	ldr	r3, [r3, #8]
 8005f80:	f043 0206 	orr.w	r2, r3, #6
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	689b      	ldr	r3, [r3, #8]
 8005f8c:	f043 0220 	orr.w	r2, r3, #32
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005f94:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	3710      	adds	r7, #16
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005fa0:	b004      	add	sp, #16
 8005fa2:	4770      	bx	lr

08005fa4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b087      	sub	sp, #28
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	60f8      	str	r0, [r7, #12]
 8005fac:	60b9      	str	r1, [r7, #8]
 8005fae:	4613      	mov	r3, r2
 8005fb0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005fb2:	79fb      	ldrb	r3, [r7, #7]
 8005fb4:	2b02      	cmp	r3, #2
 8005fb6:	d165      	bne.n	8006084 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	4a41      	ldr	r2, [pc, #260]	@ (80060c0 <USB_SetTurnaroundTime+0x11c>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d906      	bls.n	8005fce <USB_SetTurnaroundTime+0x2a>
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	4a40      	ldr	r2, [pc, #256]	@ (80060c4 <USB_SetTurnaroundTime+0x120>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d202      	bcs.n	8005fce <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005fc8:	230f      	movs	r3, #15
 8005fca:	617b      	str	r3, [r7, #20]
 8005fcc:	e062      	b.n	8006094 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	4a3c      	ldr	r2, [pc, #240]	@ (80060c4 <USB_SetTurnaroundTime+0x120>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d306      	bcc.n	8005fe4 <USB_SetTurnaroundTime+0x40>
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	4a3b      	ldr	r2, [pc, #236]	@ (80060c8 <USB_SetTurnaroundTime+0x124>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d202      	bcs.n	8005fe4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005fde:	230e      	movs	r3, #14
 8005fe0:	617b      	str	r3, [r7, #20]
 8005fe2:	e057      	b.n	8006094 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	4a38      	ldr	r2, [pc, #224]	@ (80060c8 <USB_SetTurnaroundTime+0x124>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d306      	bcc.n	8005ffa <USB_SetTurnaroundTime+0x56>
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	4a37      	ldr	r2, [pc, #220]	@ (80060cc <USB_SetTurnaroundTime+0x128>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d202      	bcs.n	8005ffa <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005ff4:	230d      	movs	r3, #13
 8005ff6:	617b      	str	r3, [r7, #20]
 8005ff8:	e04c      	b.n	8006094 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	4a33      	ldr	r2, [pc, #204]	@ (80060cc <USB_SetTurnaroundTime+0x128>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d306      	bcc.n	8006010 <USB_SetTurnaroundTime+0x6c>
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	4a32      	ldr	r2, [pc, #200]	@ (80060d0 <USB_SetTurnaroundTime+0x12c>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d802      	bhi.n	8006010 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800600a:	230c      	movs	r3, #12
 800600c:	617b      	str	r3, [r7, #20]
 800600e:	e041      	b.n	8006094 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	4a2f      	ldr	r2, [pc, #188]	@ (80060d0 <USB_SetTurnaroundTime+0x12c>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d906      	bls.n	8006026 <USB_SetTurnaroundTime+0x82>
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	4a2e      	ldr	r2, [pc, #184]	@ (80060d4 <USB_SetTurnaroundTime+0x130>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d802      	bhi.n	8006026 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006020:	230b      	movs	r3, #11
 8006022:	617b      	str	r3, [r7, #20]
 8006024:	e036      	b.n	8006094 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	4a2a      	ldr	r2, [pc, #168]	@ (80060d4 <USB_SetTurnaroundTime+0x130>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d906      	bls.n	800603c <USB_SetTurnaroundTime+0x98>
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	4a29      	ldr	r2, [pc, #164]	@ (80060d8 <USB_SetTurnaroundTime+0x134>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d802      	bhi.n	800603c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006036:	230a      	movs	r3, #10
 8006038:	617b      	str	r3, [r7, #20]
 800603a:	e02b      	b.n	8006094 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	4a26      	ldr	r2, [pc, #152]	@ (80060d8 <USB_SetTurnaroundTime+0x134>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d906      	bls.n	8006052 <USB_SetTurnaroundTime+0xae>
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	4a25      	ldr	r2, [pc, #148]	@ (80060dc <USB_SetTurnaroundTime+0x138>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d202      	bcs.n	8006052 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800604c:	2309      	movs	r3, #9
 800604e:	617b      	str	r3, [r7, #20]
 8006050:	e020      	b.n	8006094 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	4a21      	ldr	r2, [pc, #132]	@ (80060dc <USB_SetTurnaroundTime+0x138>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d306      	bcc.n	8006068 <USB_SetTurnaroundTime+0xc4>
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	4a20      	ldr	r2, [pc, #128]	@ (80060e0 <USB_SetTurnaroundTime+0x13c>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d802      	bhi.n	8006068 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006062:	2308      	movs	r3, #8
 8006064:	617b      	str	r3, [r7, #20]
 8006066:	e015      	b.n	8006094 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	4a1d      	ldr	r2, [pc, #116]	@ (80060e0 <USB_SetTurnaroundTime+0x13c>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d906      	bls.n	800607e <USB_SetTurnaroundTime+0xda>
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	4a1c      	ldr	r2, [pc, #112]	@ (80060e4 <USB_SetTurnaroundTime+0x140>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d202      	bcs.n	800607e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006078:	2307      	movs	r3, #7
 800607a:	617b      	str	r3, [r7, #20]
 800607c:	e00a      	b.n	8006094 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800607e:	2306      	movs	r3, #6
 8006080:	617b      	str	r3, [r7, #20]
 8006082:	e007      	b.n	8006094 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006084:	79fb      	ldrb	r3, [r7, #7]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d102      	bne.n	8006090 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800608a:	2309      	movs	r3, #9
 800608c:	617b      	str	r3, [r7, #20]
 800608e:	e001      	b.n	8006094 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006090:	2309      	movs	r3, #9
 8006092:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	68db      	ldr	r3, [r3, #12]
 8006098:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	68da      	ldr	r2, [r3, #12]
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	029b      	lsls	r3, r3, #10
 80060a8:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80060ac:	431a      	orrs	r2, r3
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80060b2:	2300      	movs	r3, #0
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	371c      	adds	r7, #28
 80060b8:	46bd      	mov	sp, r7
 80060ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060be:	4770      	bx	lr
 80060c0:	00d8acbf 	.word	0x00d8acbf
 80060c4:	00e4e1c0 	.word	0x00e4e1c0
 80060c8:	00f42400 	.word	0x00f42400
 80060cc:	01067380 	.word	0x01067380
 80060d0:	011a499f 	.word	0x011a499f
 80060d4:	01312cff 	.word	0x01312cff
 80060d8:	014ca43f 	.word	0x014ca43f
 80060dc:	016e3600 	.word	0x016e3600
 80060e0:	01a6ab1f 	.word	0x01a6ab1f
 80060e4:	01e84800 	.word	0x01e84800

080060e8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b083      	sub	sp, #12
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	689b      	ldr	r3, [r3, #8]
 80060f4:	f043 0201 	orr.w	r2, r3, #1
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80060fc:	2300      	movs	r3, #0
}
 80060fe:	4618      	mov	r0, r3
 8006100:	370c      	adds	r7, #12
 8006102:	46bd      	mov	sp, r7
 8006104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006108:	4770      	bx	lr

0800610a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800610a:	b480      	push	{r7}
 800610c:	b083      	sub	sp, #12
 800610e:	af00      	add	r7, sp, #0
 8006110:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	689b      	ldr	r3, [r3, #8]
 8006116:	f023 0201 	bic.w	r2, r3, #1
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800611e:	2300      	movs	r3, #0
}
 8006120:	4618      	mov	r0, r3
 8006122:	370c      	adds	r7, #12
 8006124:	46bd      	mov	sp, r7
 8006126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612a:	4770      	bx	lr

0800612c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b084      	sub	sp, #16
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
 8006134:	460b      	mov	r3, r1
 8006136:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006138:	2300      	movs	r3, #0
 800613a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	68db      	ldr	r3, [r3, #12]
 8006140:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006148:	78fb      	ldrb	r3, [r7, #3]
 800614a:	2b01      	cmp	r3, #1
 800614c:	d115      	bne.n	800617a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	68db      	ldr	r3, [r3, #12]
 8006152:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800615a:	200a      	movs	r0, #10
 800615c:	f7fb fb48 	bl	80017f0 <HAL_Delay>
      ms += 10U;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	330a      	adds	r3, #10
 8006164:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f001 f93f 	bl	80073ea <USB_GetMode>
 800616c:	4603      	mov	r3, r0
 800616e:	2b01      	cmp	r3, #1
 8006170:	d01e      	beq.n	80061b0 <USB_SetCurrentMode+0x84>
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	2bc7      	cmp	r3, #199	@ 0xc7
 8006176:	d9f0      	bls.n	800615a <USB_SetCurrentMode+0x2e>
 8006178:	e01a      	b.n	80061b0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800617a:	78fb      	ldrb	r3, [r7, #3]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d115      	bne.n	80061ac <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	68db      	ldr	r3, [r3, #12]
 8006184:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800618c:	200a      	movs	r0, #10
 800618e:	f7fb fb2f 	bl	80017f0 <HAL_Delay>
      ms += 10U;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	330a      	adds	r3, #10
 8006196:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	f001 f926 	bl	80073ea <USB_GetMode>
 800619e:	4603      	mov	r3, r0
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d005      	beq.n	80061b0 <USB_SetCurrentMode+0x84>
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	2bc7      	cmp	r3, #199	@ 0xc7
 80061a8:	d9f0      	bls.n	800618c <USB_SetCurrentMode+0x60>
 80061aa:	e001      	b.n	80061b0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80061ac:	2301      	movs	r3, #1
 80061ae:	e005      	b.n	80061bc <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	2bc8      	cmp	r3, #200	@ 0xc8
 80061b4:	d101      	bne.n	80061ba <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80061b6:	2301      	movs	r3, #1
 80061b8:	e000      	b.n	80061bc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80061ba:	2300      	movs	r3, #0
}
 80061bc:	4618      	mov	r0, r3
 80061be:	3710      	adds	r7, #16
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd80      	pop	{r7, pc}

080061c4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80061c4:	b084      	sub	sp, #16
 80061c6:	b580      	push	{r7, lr}
 80061c8:	b086      	sub	sp, #24
 80061ca:	af00      	add	r7, sp, #0
 80061cc:	6078      	str	r0, [r7, #4]
 80061ce:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80061d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80061d6:	2300      	movs	r3, #0
 80061d8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80061de:	2300      	movs	r3, #0
 80061e0:	613b      	str	r3, [r7, #16]
 80061e2:	e009      	b.n	80061f8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80061e4:	687a      	ldr	r2, [r7, #4]
 80061e6:	693b      	ldr	r3, [r7, #16]
 80061e8:	3340      	adds	r3, #64	@ 0x40
 80061ea:	009b      	lsls	r3, r3, #2
 80061ec:	4413      	add	r3, r2
 80061ee:	2200      	movs	r2, #0
 80061f0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80061f2:	693b      	ldr	r3, [r7, #16]
 80061f4:	3301      	adds	r3, #1
 80061f6:	613b      	str	r3, [r7, #16]
 80061f8:	693b      	ldr	r3, [r7, #16]
 80061fa:	2b0e      	cmp	r3, #14
 80061fc:	d9f2      	bls.n	80061e4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80061fe:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006202:	2b00      	cmp	r3, #0
 8006204:	d11c      	bne.n	8006240 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	68fa      	ldr	r2, [r7, #12]
 8006210:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006214:	f043 0302 	orr.w	r3, r3, #2
 8006218:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800621e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800622a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006236:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	639a      	str	r2, [r3, #56]	@ 0x38
 800623e:	e00b      	b.n	8006258 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006244:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006250:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800625e:	461a      	mov	r2, r3
 8006260:	2300      	movs	r3, #0
 8006262:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006264:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006268:	2b01      	cmp	r3, #1
 800626a:	d10d      	bne.n	8006288 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800626c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006270:	2b00      	cmp	r3, #0
 8006272:	d104      	bne.n	800627e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006274:	2100      	movs	r1, #0
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f000 f968 	bl	800654c <USB_SetDevSpeed>
 800627c:	e008      	b.n	8006290 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800627e:	2101      	movs	r1, #1
 8006280:	6878      	ldr	r0, [r7, #4]
 8006282:	f000 f963 	bl	800654c <USB_SetDevSpeed>
 8006286:	e003      	b.n	8006290 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006288:	2103      	movs	r1, #3
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f000 f95e 	bl	800654c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006290:	2110      	movs	r1, #16
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f000 f8fa 	bl	800648c <USB_FlushTxFifo>
 8006298:	4603      	mov	r3, r0
 800629a:	2b00      	cmp	r3, #0
 800629c:	d001      	beq.n	80062a2 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800629e:	2301      	movs	r3, #1
 80062a0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f000 f924 	bl	80064f0 <USB_FlushRxFifo>
 80062a8:	4603      	mov	r3, r0
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d001      	beq.n	80062b2 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80062ae:	2301      	movs	r3, #1
 80062b0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062b8:	461a      	mov	r2, r3
 80062ba:	2300      	movs	r3, #0
 80062bc:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062c4:	461a      	mov	r2, r3
 80062c6:	2300      	movs	r3, #0
 80062c8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062d0:	461a      	mov	r2, r3
 80062d2:	2300      	movs	r3, #0
 80062d4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80062d6:	2300      	movs	r3, #0
 80062d8:	613b      	str	r3, [r7, #16]
 80062da:	e043      	b.n	8006364 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80062dc:	693b      	ldr	r3, [r7, #16]
 80062de:	015a      	lsls	r2, r3, #5
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	4413      	add	r3, r2
 80062e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80062ee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80062f2:	d118      	bne.n	8006326 <USB_DevInit+0x162>
    {
      if (i == 0U)
 80062f4:	693b      	ldr	r3, [r7, #16]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d10a      	bne.n	8006310 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80062fa:	693b      	ldr	r3, [r7, #16]
 80062fc:	015a      	lsls	r2, r3, #5
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	4413      	add	r3, r2
 8006302:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006306:	461a      	mov	r2, r3
 8006308:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800630c:	6013      	str	r3, [r2, #0]
 800630e:	e013      	b.n	8006338 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006310:	693b      	ldr	r3, [r7, #16]
 8006312:	015a      	lsls	r2, r3, #5
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	4413      	add	r3, r2
 8006318:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800631c:	461a      	mov	r2, r3
 800631e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006322:	6013      	str	r3, [r2, #0]
 8006324:	e008      	b.n	8006338 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	015a      	lsls	r2, r3, #5
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	4413      	add	r3, r2
 800632e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006332:	461a      	mov	r2, r3
 8006334:	2300      	movs	r3, #0
 8006336:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	015a      	lsls	r2, r3, #5
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	4413      	add	r3, r2
 8006340:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006344:	461a      	mov	r2, r3
 8006346:	2300      	movs	r3, #0
 8006348:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	015a      	lsls	r2, r3, #5
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	4413      	add	r3, r2
 8006352:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006356:	461a      	mov	r2, r3
 8006358:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800635c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	3301      	adds	r3, #1
 8006362:	613b      	str	r3, [r7, #16]
 8006364:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006368:	461a      	mov	r2, r3
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	4293      	cmp	r3, r2
 800636e:	d3b5      	bcc.n	80062dc <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006370:	2300      	movs	r3, #0
 8006372:	613b      	str	r3, [r7, #16]
 8006374:	e043      	b.n	80063fe <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	015a      	lsls	r2, r3, #5
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	4413      	add	r3, r2
 800637e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006388:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800638c:	d118      	bne.n	80063c0 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800638e:	693b      	ldr	r3, [r7, #16]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d10a      	bne.n	80063aa <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	015a      	lsls	r2, r3, #5
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	4413      	add	r3, r2
 800639c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063a0:	461a      	mov	r2, r3
 80063a2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80063a6:	6013      	str	r3, [r2, #0]
 80063a8:	e013      	b.n	80063d2 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80063aa:	693b      	ldr	r3, [r7, #16]
 80063ac:	015a      	lsls	r2, r3, #5
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	4413      	add	r3, r2
 80063b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063b6:	461a      	mov	r2, r3
 80063b8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80063bc:	6013      	str	r3, [r2, #0]
 80063be:	e008      	b.n	80063d2 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	015a      	lsls	r2, r3, #5
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	4413      	add	r3, r2
 80063c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063cc:	461a      	mov	r2, r3
 80063ce:	2300      	movs	r3, #0
 80063d0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	015a      	lsls	r2, r3, #5
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	4413      	add	r3, r2
 80063da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063de:	461a      	mov	r2, r3
 80063e0:	2300      	movs	r3, #0
 80063e2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	015a      	lsls	r2, r3, #5
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	4413      	add	r3, r2
 80063ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063f0:	461a      	mov	r2, r3
 80063f2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80063f6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80063f8:	693b      	ldr	r3, [r7, #16]
 80063fa:	3301      	adds	r3, #1
 80063fc:	613b      	str	r3, [r7, #16]
 80063fe:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006402:	461a      	mov	r2, r3
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	4293      	cmp	r3, r2
 8006408:	d3b5      	bcc.n	8006376 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006410:	691b      	ldr	r3, [r3, #16]
 8006412:	68fa      	ldr	r2, [r7, #12]
 8006414:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006418:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800641c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2200      	movs	r2, #0
 8006422:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800642a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800642c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006430:	2b00      	cmp	r3, #0
 8006432:	d105      	bne.n	8006440 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	699b      	ldr	r3, [r3, #24]
 8006438:	f043 0210 	orr.w	r2, r3, #16
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	699a      	ldr	r2, [r3, #24]
 8006444:	4b10      	ldr	r3, [pc, #64]	@ (8006488 <USB_DevInit+0x2c4>)
 8006446:	4313      	orrs	r3, r2
 8006448:	687a      	ldr	r2, [r7, #4]
 800644a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800644c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006450:	2b00      	cmp	r3, #0
 8006452:	d005      	beq.n	8006460 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	699b      	ldr	r3, [r3, #24]
 8006458:	f043 0208 	orr.w	r2, r3, #8
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006460:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006464:	2b01      	cmp	r3, #1
 8006466:	d107      	bne.n	8006478 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	699b      	ldr	r3, [r3, #24]
 800646c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006470:	f043 0304 	orr.w	r3, r3, #4
 8006474:	687a      	ldr	r2, [r7, #4]
 8006476:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006478:	7dfb      	ldrb	r3, [r7, #23]
}
 800647a:	4618      	mov	r0, r3
 800647c:	3718      	adds	r7, #24
 800647e:	46bd      	mov	sp, r7
 8006480:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006484:	b004      	add	sp, #16
 8006486:	4770      	bx	lr
 8006488:	803c3800 	.word	0x803c3800

0800648c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800648c:	b480      	push	{r7}
 800648e:	b085      	sub	sp, #20
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
 8006494:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006496:	2300      	movs	r3, #0
 8006498:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	3301      	adds	r3, #1
 800649e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80064a6:	d901      	bls.n	80064ac <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80064a8:	2303      	movs	r3, #3
 80064aa:	e01b      	b.n	80064e4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	691b      	ldr	r3, [r3, #16]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	daf2      	bge.n	800649a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80064b4:	2300      	movs	r3, #0
 80064b6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	019b      	lsls	r3, r3, #6
 80064bc:	f043 0220 	orr.w	r2, r3, #32
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	3301      	adds	r3, #1
 80064c8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80064d0:	d901      	bls.n	80064d6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80064d2:	2303      	movs	r3, #3
 80064d4:	e006      	b.n	80064e4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	691b      	ldr	r3, [r3, #16]
 80064da:	f003 0320 	and.w	r3, r3, #32
 80064de:	2b20      	cmp	r3, #32
 80064e0:	d0f0      	beq.n	80064c4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80064e2:	2300      	movs	r3, #0
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	3714      	adds	r7, #20
 80064e8:	46bd      	mov	sp, r7
 80064ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ee:	4770      	bx	lr

080064f0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b085      	sub	sp, #20
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80064f8:	2300      	movs	r3, #0
 80064fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	3301      	adds	r3, #1
 8006500:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006508:	d901      	bls.n	800650e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800650a:	2303      	movs	r3, #3
 800650c:	e018      	b.n	8006540 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	691b      	ldr	r3, [r3, #16]
 8006512:	2b00      	cmp	r3, #0
 8006514:	daf2      	bge.n	80064fc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006516:	2300      	movs	r3, #0
 8006518:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2210      	movs	r2, #16
 800651e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	3301      	adds	r3, #1
 8006524:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800652c:	d901      	bls.n	8006532 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800652e:	2303      	movs	r3, #3
 8006530:	e006      	b.n	8006540 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	691b      	ldr	r3, [r3, #16]
 8006536:	f003 0310 	and.w	r3, r3, #16
 800653a:	2b10      	cmp	r3, #16
 800653c:	d0f0      	beq.n	8006520 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800653e:	2300      	movs	r3, #0
}
 8006540:	4618      	mov	r0, r3
 8006542:	3714      	adds	r7, #20
 8006544:	46bd      	mov	sp, r7
 8006546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654a:	4770      	bx	lr

0800654c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800654c:	b480      	push	{r7}
 800654e:	b085      	sub	sp, #20
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
 8006554:	460b      	mov	r3, r1
 8006556:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006562:	681a      	ldr	r2, [r3, #0]
 8006564:	78fb      	ldrb	r3, [r7, #3]
 8006566:	68f9      	ldr	r1, [r7, #12]
 8006568:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800656c:	4313      	orrs	r3, r2
 800656e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006570:	2300      	movs	r3, #0
}
 8006572:	4618      	mov	r0, r3
 8006574:	3714      	adds	r7, #20
 8006576:	46bd      	mov	sp, r7
 8006578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657c:	4770      	bx	lr

0800657e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800657e:	b480      	push	{r7}
 8006580:	b087      	sub	sp, #28
 8006582:	af00      	add	r7, sp, #0
 8006584:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006590:	689b      	ldr	r3, [r3, #8]
 8006592:	f003 0306 	and.w	r3, r3, #6
 8006596:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d102      	bne.n	80065a4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800659e:	2300      	movs	r3, #0
 80065a0:	75fb      	strb	r3, [r7, #23]
 80065a2:	e00a      	b.n	80065ba <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	2b02      	cmp	r3, #2
 80065a8:	d002      	beq.n	80065b0 <USB_GetDevSpeed+0x32>
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	2b06      	cmp	r3, #6
 80065ae:	d102      	bne.n	80065b6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80065b0:	2302      	movs	r3, #2
 80065b2:	75fb      	strb	r3, [r7, #23]
 80065b4:	e001      	b.n	80065ba <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80065b6:	230f      	movs	r3, #15
 80065b8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80065ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80065bc:	4618      	mov	r0, r3
 80065be:	371c      	adds	r7, #28
 80065c0:	46bd      	mov	sp, r7
 80065c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c6:	4770      	bx	lr

080065c8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b085      	sub	sp, #20
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
 80065d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	781b      	ldrb	r3, [r3, #0]
 80065da:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	785b      	ldrb	r3, [r3, #1]
 80065e0:	2b01      	cmp	r3, #1
 80065e2:	d13a      	bne.n	800665a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065ea:	69da      	ldr	r2, [r3, #28]
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	781b      	ldrb	r3, [r3, #0]
 80065f0:	f003 030f 	and.w	r3, r3, #15
 80065f4:	2101      	movs	r1, #1
 80065f6:	fa01 f303 	lsl.w	r3, r1, r3
 80065fa:	b29b      	uxth	r3, r3
 80065fc:	68f9      	ldr	r1, [r7, #12]
 80065fe:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006602:	4313      	orrs	r3, r2
 8006604:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	015a      	lsls	r2, r3, #5
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	4413      	add	r3, r2
 800660e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006618:	2b00      	cmp	r3, #0
 800661a:	d155      	bne.n	80066c8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	015a      	lsls	r2, r3, #5
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	4413      	add	r3, r2
 8006624:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006628:	681a      	ldr	r2, [r3, #0]
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	689b      	ldr	r3, [r3, #8]
 800662e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	791b      	ldrb	r3, [r3, #4]
 8006636:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006638:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	059b      	lsls	r3, r3, #22
 800663e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006640:	4313      	orrs	r3, r2
 8006642:	68ba      	ldr	r2, [r7, #8]
 8006644:	0151      	lsls	r1, r2, #5
 8006646:	68fa      	ldr	r2, [r7, #12]
 8006648:	440a      	add	r2, r1
 800664a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800664e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006652:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006656:	6013      	str	r3, [r2, #0]
 8006658:	e036      	b.n	80066c8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006660:	69da      	ldr	r2, [r3, #28]
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	781b      	ldrb	r3, [r3, #0]
 8006666:	f003 030f 	and.w	r3, r3, #15
 800666a:	2101      	movs	r1, #1
 800666c:	fa01 f303 	lsl.w	r3, r1, r3
 8006670:	041b      	lsls	r3, r3, #16
 8006672:	68f9      	ldr	r1, [r7, #12]
 8006674:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006678:	4313      	orrs	r3, r2
 800667a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	015a      	lsls	r2, r3, #5
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	4413      	add	r3, r2
 8006684:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800668e:	2b00      	cmp	r3, #0
 8006690:	d11a      	bne.n	80066c8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	015a      	lsls	r2, r3, #5
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	4413      	add	r3, r2
 800669a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800669e:	681a      	ldr	r2, [r3, #0]
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	689b      	ldr	r3, [r3, #8]
 80066a4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	791b      	ldrb	r3, [r3, #4]
 80066ac:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80066ae:	430b      	orrs	r3, r1
 80066b0:	4313      	orrs	r3, r2
 80066b2:	68ba      	ldr	r2, [r7, #8]
 80066b4:	0151      	lsls	r1, r2, #5
 80066b6:	68fa      	ldr	r2, [r7, #12]
 80066b8:	440a      	add	r2, r1
 80066ba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80066be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80066c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80066c6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80066c8:	2300      	movs	r3, #0
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	3714      	adds	r7, #20
 80066ce:	46bd      	mov	sp, r7
 80066d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d4:	4770      	bx	lr
	...

080066d8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80066d8:	b480      	push	{r7}
 80066da:	b085      	sub	sp, #20
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
 80066e0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	781b      	ldrb	r3, [r3, #0]
 80066ea:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	785b      	ldrb	r3, [r3, #1]
 80066f0:	2b01      	cmp	r3, #1
 80066f2:	d161      	bne.n	80067b8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	015a      	lsls	r2, r3, #5
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	4413      	add	r3, r2
 80066fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006706:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800670a:	d11f      	bne.n	800674c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	015a      	lsls	r2, r3, #5
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	4413      	add	r3, r2
 8006714:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	68ba      	ldr	r2, [r7, #8]
 800671c:	0151      	lsls	r1, r2, #5
 800671e:	68fa      	ldr	r2, [r7, #12]
 8006720:	440a      	add	r2, r1
 8006722:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006726:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800672a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	015a      	lsls	r2, r3, #5
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	4413      	add	r3, r2
 8006734:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	68ba      	ldr	r2, [r7, #8]
 800673c:	0151      	lsls	r1, r2, #5
 800673e:	68fa      	ldr	r2, [r7, #12]
 8006740:	440a      	add	r2, r1
 8006742:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006746:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800674a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006752:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	781b      	ldrb	r3, [r3, #0]
 8006758:	f003 030f 	and.w	r3, r3, #15
 800675c:	2101      	movs	r1, #1
 800675e:	fa01 f303 	lsl.w	r3, r1, r3
 8006762:	b29b      	uxth	r3, r3
 8006764:	43db      	mvns	r3, r3
 8006766:	68f9      	ldr	r1, [r7, #12]
 8006768:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800676c:	4013      	ands	r3, r2
 800676e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006776:	69da      	ldr	r2, [r3, #28]
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	781b      	ldrb	r3, [r3, #0]
 800677c:	f003 030f 	and.w	r3, r3, #15
 8006780:	2101      	movs	r1, #1
 8006782:	fa01 f303 	lsl.w	r3, r1, r3
 8006786:	b29b      	uxth	r3, r3
 8006788:	43db      	mvns	r3, r3
 800678a:	68f9      	ldr	r1, [r7, #12]
 800678c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006790:	4013      	ands	r3, r2
 8006792:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	015a      	lsls	r2, r3, #5
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	4413      	add	r3, r2
 800679c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067a0:	681a      	ldr	r2, [r3, #0]
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	0159      	lsls	r1, r3, #5
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	440b      	add	r3, r1
 80067aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067ae:	4619      	mov	r1, r3
 80067b0:	4b35      	ldr	r3, [pc, #212]	@ (8006888 <USB_DeactivateEndpoint+0x1b0>)
 80067b2:	4013      	ands	r3, r2
 80067b4:	600b      	str	r3, [r1, #0]
 80067b6:	e060      	b.n	800687a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	015a      	lsls	r2, r3, #5
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	4413      	add	r3, r2
 80067c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80067ca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80067ce:	d11f      	bne.n	8006810 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	015a      	lsls	r2, r3, #5
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	4413      	add	r3, r2
 80067d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	68ba      	ldr	r2, [r7, #8]
 80067e0:	0151      	lsls	r1, r2, #5
 80067e2:	68fa      	ldr	r2, [r7, #12]
 80067e4:	440a      	add	r2, r1
 80067e6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80067ea:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80067ee:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	015a      	lsls	r2, r3, #5
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	4413      	add	r3, r2
 80067f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	68ba      	ldr	r2, [r7, #8]
 8006800:	0151      	lsls	r1, r2, #5
 8006802:	68fa      	ldr	r2, [r7, #12]
 8006804:	440a      	add	r2, r1
 8006806:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800680a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800680e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006816:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	781b      	ldrb	r3, [r3, #0]
 800681c:	f003 030f 	and.w	r3, r3, #15
 8006820:	2101      	movs	r1, #1
 8006822:	fa01 f303 	lsl.w	r3, r1, r3
 8006826:	041b      	lsls	r3, r3, #16
 8006828:	43db      	mvns	r3, r3
 800682a:	68f9      	ldr	r1, [r7, #12]
 800682c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006830:	4013      	ands	r3, r2
 8006832:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800683a:	69da      	ldr	r2, [r3, #28]
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	781b      	ldrb	r3, [r3, #0]
 8006840:	f003 030f 	and.w	r3, r3, #15
 8006844:	2101      	movs	r1, #1
 8006846:	fa01 f303 	lsl.w	r3, r1, r3
 800684a:	041b      	lsls	r3, r3, #16
 800684c:	43db      	mvns	r3, r3
 800684e:	68f9      	ldr	r1, [r7, #12]
 8006850:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006854:	4013      	ands	r3, r2
 8006856:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	015a      	lsls	r2, r3, #5
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	4413      	add	r3, r2
 8006860:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006864:	681a      	ldr	r2, [r3, #0]
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	0159      	lsls	r1, r3, #5
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	440b      	add	r3, r1
 800686e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006872:	4619      	mov	r1, r3
 8006874:	4b05      	ldr	r3, [pc, #20]	@ (800688c <USB_DeactivateEndpoint+0x1b4>)
 8006876:	4013      	ands	r3, r2
 8006878:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800687a:	2300      	movs	r3, #0
}
 800687c:	4618      	mov	r0, r3
 800687e:	3714      	adds	r7, #20
 8006880:	46bd      	mov	sp, r7
 8006882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006886:	4770      	bx	lr
 8006888:	ec337800 	.word	0xec337800
 800688c:	eff37800 	.word	0xeff37800

08006890 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b08a      	sub	sp, #40	@ 0x28
 8006894:	af02      	add	r7, sp, #8
 8006896:	60f8      	str	r0, [r7, #12]
 8006898:	60b9      	str	r1, [r7, #8]
 800689a:	4613      	mov	r3, r2
 800689c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	781b      	ldrb	r3, [r3, #0]
 80068a6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	785b      	ldrb	r3, [r3, #1]
 80068ac:	2b01      	cmp	r3, #1
 80068ae:	f040 817f 	bne.w	8006bb0 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	691b      	ldr	r3, [r3, #16]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d132      	bne.n	8006920 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80068ba:	69bb      	ldr	r3, [r7, #24]
 80068bc:	015a      	lsls	r2, r3, #5
 80068be:	69fb      	ldr	r3, [r7, #28]
 80068c0:	4413      	add	r3, r2
 80068c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068c6:	691b      	ldr	r3, [r3, #16]
 80068c8:	69ba      	ldr	r2, [r7, #24]
 80068ca:	0151      	lsls	r1, r2, #5
 80068cc:	69fa      	ldr	r2, [r7, #28]
 80068ce:	440a      	add	r2, r1
 80068d0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80068d4:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80068d8:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80068dc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80068de:	69bb      	ldr	r3, [r7, #24]
 80068e0:	015a      	lsls	r2, r3, #5
 80068e2:	69fb      	ldr	r3, [r7, #28]
 80068e4:	4413      	add	r3, r2
 80068e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068ea:	691b      	ldr	r3, [r3, #16]
 80068ec:	69ba      	ldr	r2, [r7, #24]
 80068ee:	0151      	lsls	r1, r2, #5
 80068f0:	69fa      	ldr	r2, [r7, #28]
 80068f2:	440a      	add	r2, r1
 80068f4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80068f8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80068fc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80068fe:	69bb      	ldr	r3, [r7, #24]
 8006900:	015a      	lsls	r2, r3, #5
 8006902:	69fb      	ldr	r3, [r7, #28]
 8006904:	4413      	add	r3, r2
 8006906:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800690a:	691b      	ldr	r3, [r3, #16]
 800690c:	69ba      	ldr	r2, [r7, #24]
 800690e:	0151      	lsls	r1, r2, #5
 8006910:	69fa      	ldr	r2, [r7, #28]
 8006912:	440a      	add	r2, r1
 8006914:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006918:	0cdb      	lsrs	r3, r3, #19
 800691a:	04db      	lsls	r3, r3, #19
 800691c:	6113      	str	r3, [r2, #16]
 800691e:	e097      	b.n	8006a50 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006920:	69bb      	ldr	r3, [r7, #24]
 8006922:	015a      	lsls	r2, r3, #5
 8006924:	69fb      	ldr	r3, [r7, #28]
 8006926:	4413      	add	r3, r2
 8006928:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800692c:	691b      	ldr	r3, [r3, #16]
 800692e:	69ba      	ldr	r2, [r7, #24]
 8006930:	0151      	lsls	r1, r2, #5
 8006932:	69fa      	ldr	r2, [r7, #28]
 8006934:	440a      	add	r2, r1
 8006936:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800693a:	0cdb      	lsrs	r3, r3, #19
 800693c:	04db      	lsls	r3, r3, #19
 800693e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006940:	69bb      	ldr	r3, [r7, #24]
 8006942:	015a      	lsls	r2, r3, #5
 8006944:	69fb      	ldr	r3, [r7, #28]
 8006946:	4413      	add	r3, r2
 8006948:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800694c:	691b      	ldr	r3, [r3, #16]
 800694e:	69ba      	ldr	r2, [r7, #24]
 8006950:	0151      	lsls	r1, r2, #5
 8006952:	69fa      	ldr	r2, [r7, #28]
 8006954:	440a      	add	r2, r1
 8006956:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800695a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800695e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006962:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8006964:	69bb      	ldr	r3, [r7, #24]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d11a      	bne.n	80069a0 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	691a      	ldr	r2, [r3, #16]
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	689b      	ldr	r3, [r3, #8]
 8006972:	429a      	cmp	r2, r3
 8006974:	d903      	bls.n	800697e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	689a      	ldr	r2, [r3, #8]
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800697e:	69bb      	ldr	r3, [r7, #24]
 8006980:	015a      	lsls	r2, r3, #5
 8006982:	69fb      	ldr	r3, [r7, #28]
 8006984:	4413      	add	r3, r2
 8006986:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800698a:	691b      	ldr	r3, [r3, #16]
 800698c:	69ba      	ldr	r2, [r7, #24]
 800698e:	0151      	lsls	r1, r2, #5
 8006990:	69fa      	ldr	r2, [r7, #28]
 8006992:	440a      	add	r2, r1
 8006994:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006998:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800699c:	6113      	str	r3, [r2, #16]
 800699e:	e044      	b.n	8006a2a <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	691a      	ldr	r2, [r3, #16]
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	689b      	ldr	r3, [r3, #8]
 80069a8:	4413      	add	r3, r2
 80069aa:	1e5a      	subs	r2, r3, #1
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	689b      	ldr	r3, [r3, #8]
 80069b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80069b4:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 80069b6:	69bb      	ldr	r3, [r7, #24]
 80069b8:	015a      	lsls	r2, r3, #5
 80069ba:	69fb      	ldr	r3, [r7, #28]
 80069bc:	4413      	add	r3, r2
 80069be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069c2:	691a      	ldr	r2, [r3, #16]
 80069c4:	8afb      	ldrh	r3, [r7, #22]
 80069c6:	04d9      	lsls	r1, r3, #19
 80069c8:	4ba4      	ldr	r3, [pc, #656]	@ (8006c5c <USB_EPStartXfer+0x3cc>)
 80069ca:	400b      	ands	r3, r1
 80069cc:	69b9      	ldr	r1, [r7, #24]
 80069ce:	0148      	lsls	r0, r1, #5
 80069d0:	69f9      	ldr	r1, [r7, #28]
 80069d2:	4401      	add	r1, r0
 80069d4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80069d8:	4313      	orrs	r3, r2
 80069da:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	791b      	ldrb	r3, [r3, #4]
 80069e0:	2b01      	cmp	r3, #1
 80069e2:	d122      	bne.n	8006a2a <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80069e4:	69bb      	ldr	r3, [r7, #24]
 80069e6:	015a      	lsls	r2, r3, #5
 80069e8:	69fb      	ldr	r3, [r7, #28]
 80069ea:	4413      	add	r3, r2
 80069ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069f0:	691b      	ldr	r3, [r3, #16]
 80069f2:	69ba      	ldr	r2, [r7, #24]
 80069f4:	0151      	lsls	r1, r2, #5
 80069f6:	69fa      	ldr	r2, [r7, #28]
 80069f8:	440a      	add	r2, r1
 80069fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80069fe:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8006a02:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8006a04:	69bb      	ldr	r3, [r7, #24]
 8006a06:	015a      	lsls	r2, r3, #5
 8006a08:	69fb      	ldr	r3, [r7, #28]
 8006a0a:	4413      	add	r3, r2
 8006a0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a10:	691a      	ldr	r2, [r3, #16]
 8006a12:	8afb      	ldrh	r3, [r7, #22]
 8006a14:	075b      	lsls	r3, r3, #29
 8006a16:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8006a1a:	69b9      	ldr	r1, [r7, #24]
 8006a1c:	0148      	lsls	r0, r1, #5
 8006a1e:	69f9      	ldr	r1, [r7, #28]
 8006a20:	4401      	add	r1, r0
 8006a22:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006a26:	4313      	orrs	r3, r2
 8006a28:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006a2a:	69bb      	ldr	r3, [r7, #24]
 8006a2c:	015a      	lsls	r2, r3, #5
 8006a2e:	69fb      	ldr	r3, [r7, #28]
 8006a30:	4413      	add	r3, r2
 8006a32:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a36:	691a      	ldr	r2, [r3, #16]
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	691b      	ldr	r3, [r3, #16]
 8006a3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a40:	69b9      	ldr	r1, [r7, #24]
 8006a42:	0148      	lsls	r0, r1, #5
 8006a44:	69f9      	ldr	r1, [r7, #28]
 8006a46:	4401      	add	r1, r0
 8006a48:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006a50:	79fb      	ldrb	r3, [r7, #7]
 8006a52:	2b01      	cmp	r3, #1
 8006a54:	d14b      	bne.n	8006aee <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	69db      	ldr	r3, [r3, #28]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d009      	beq.n	8006a72 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006a5e:	69bb      	ldr	r3, [r7, #24]
 8006a60:	015a      	lsls	r2, r3, #5
 8006a62:	69fb      	ldr	r3, [r7, #28]
 8006a64:	4413      	add	r3, r2
 8006a66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a6a:	461a      	mov	r2, r3
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	69db      	ldr	r3, [r3, #28]
 8006a70:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	791b      	ldrb	r3, [r3, #4]
 8006a76:	2b01      	cmp	r3, #1
 8006a78:	d128      	bne.n	8006acc <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006a7a:	69fb      	ldr	r3, [r7, #28]
 8006a7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a80:	689b      	ldr	r3, [r3, #8]
 8006a82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d110      	bne.n	8006aac <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006a8a:	69bb      	ldr	r3, [r7, #24]
 8006a8c:	015a      	lsls	r2, r3, #5
 8006a8e:	69fb      	ldr	r3, [r7, #28]
 8006a90:	4413      	add	r3, r2
 8006a92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	69ba      	ldr	r2, [r7, #24]
 8006a9a:	0151      	lsls	r1, r2, #5
 8006a9c:	69fa      	ldr	r2, [r7, #28]
 8006a9e:	440a      	add	r2, r1
 8006aa0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006aa4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006aa8:	6013      	str	r3, [r2, #0]
 8006aaa:	e00f      	b.n	8006acc <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006aac:	69bb      	ldr	r3, [r7, #24]
 8006aae:	015a      	lsls	r2, r3, #5
 8006ab0:	69fb      	ldr	r3, [r7, #28]
 8006ab2:	4413      	add	r3, r2
 8006ab4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	69ba      	ldr	r2, [r7, #24]
 8006abc:	0151      	lsls	r1, r2, #5
 8006abe:	69fa      	ldr	r2, [r7, #28]
 8006ac0:	440a      	add	r2, r1
 8006ac2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006ac6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006aca:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006acc:	69bb      	ldr	r3, [r7, #24]
 8006ace:	015a      	lsls	r2, r3, #5
 8006ad0:	69fb      	ldr	r3, [r7, #28]
 8006ad2:	4413      	add	r3, r2
 8006ad4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	69ba      	ldr	r2, [r7, #24]
 8006adc:	0151      	lsls	r1, r2, #5
 8006ade:	69fa      	ldr	r2, [r7, #28]
 8006ae0:	440a      	add	r2, r1
 8006ae2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006ae6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006aea:	6013      	str	r3, [r2, #0]
 8006aec:	e166      	b.n	8006dbc <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006aee:	69bb      	ldr	r3, [r7, #24]
 8006af0:	015a      	lsls	r2, r3, #5
 8006af2:	69fb      	ldr	r3, [r7, #28]
 8006af4:	4413      	add	r3, r2
 8006af6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	69ba      	ldr	r2, [r7, #24]
 8006afe:	0151      	lsls	r1, r2, #5
 8006b00:	69fa      	ldr	r2, [r7, #28]
 8006b02:	440a      	add	r2, r1
 8006b04:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b08:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006b0c:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	791b      	ldrb	r3, [r3, #4]
 8006b12:	2b01      	cmp	r3, #1
 8006b14:	d015      	beq.n	8006b42 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	691b      	ldr	r3, [r3, #16]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	f000 814e 	beq.w	8006dbc <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006b20:	69fb      	ldr	r3, [r7, #28]
 8006b22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b26:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	781b      	ldrb	r3, [r3, #0]
 8006b2c:	f003 030f 	and.w	r3, r3, #15
 8006b30:	2101      	movs	r1, #1
 8006b32:	fa01 f303 	lsl.w	r3, r1, r3
 8006b36:	69f9      	ldr	r1, [r7, #28]
 8006b38:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006b3c:	4313      	orrs	r3, r2
 8006b3e:	634b      	str	r3, [r1, #52]	@ 0x34
 8006b40:	e13c      	b.n	8006dbc <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006b42:	69fb      	ldr	r3, [r7, #28]
 8006b44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b48:	689b      	ldr	r3, [r3, #8]
 8006b4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d110      	bne.n	8006b74 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006b52:	69bb      	ldr	r3, [r7, #24]
 8006b54:	015a      	lsls	r2, r3, #5
 8006b56:	69fb      	ldr	r3, [r7, #28]
 8006b58:	4413      	add	r3, r2
 8006b5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	69ba      	ldr	r2, [r7, #24]
 8006b62:	0151      	lsls	r1, r2, #5
 8006b64:	69fa      	ldr	r2, [r7, #28]
 8006b66:	440a      	add	r2, r1
 8006b68:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b6c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006b70:	6013      	str	r3, [r2, #0]
 8006b72:	e00f      	b.n	8006b94 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006b74:	69bb      	ldr	r3, [r7, #24]
 8006b76:	015a      	lsls	r2, r3, #5
 8006b78:	69fb      	ldr	r3, [r7, #28]
 8006b7a:	4413      	add	r3, r2
 8006b7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	69ba      	ldr	r2, [r7, #24]
 8006b84:	0151      	lsls	r1, r2, #5
 8006b86:	69fa      	ldr	r2, [r7, #28]
 8006b88:	440a      	add	r2, r1
 8006b8a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006b92:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	68d9      	ldr	r1, [r3, #12]
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	781a      	ldrb	r2, [r3, #0]
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	691b      	ldr	r3, [r3, #16]
 8006ba0:	b298      	uxth	r0, r3
 8006ba2:	79fb      	ldrb	r3, [r7, #7]
 8006ba4:	9300      	str	r3, [sp, #0]
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	68f8      	ldr	r0, [r7, #12]
 8006baa:	f000 f9b9 	bl	8006f20 <USB_WritePacket>
 8006bae:	e105      	b.n	8006dbc <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006bb0:	69bb      	ldr	r3, [r7, #24]
 8006bb2:	015a      	lsls	r2, r3, #5
 8006bb4:	69fb      	ldr	r3, [r7, #28]
 8006bb6:	4413      	add	r3, r2
 8006bb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bbc:	691b      	ldr	r3, [r3, #16]
 8006bbe:	69ba      	ldr	r2, [r7, #24]
 8006bc0:	0151      	lsls	r1, r2, #5
 8006bc2:	69fa      	ldr	r2, [r7, #28]
 8006bc4:	440a      	add	r2, r1
 8006bc6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006bca:	0cdb      	lsrs	r3, r3, #19
 8006bcc:	04db      	lsls	r3, r3, #19
 8006bce:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006bd0:	69bb      	ldr	r3, [r7, #24]
 8006bd2:	015a      	lsls	r2, r3, #5
 8006bd4:	69fb      	ldr	r3, [r7, #28]
 8006bd6:	4413      	add	r3, r2
 8006bd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bdc:	691b      	ldr	r3, [r3, #16]
 8006bde:	69ba      	ldr	r2, [r7, #24]
 8006be0:	0151      	lsls	r1, r2, #5
 8006be2:	69fa      	ldr	r2, [r7, #28]
 8006be4:	440a      	add	r2, r1
 8006be6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006bea:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006bee:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006bf2:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8006bf4:	69bb      	ldr	r3, [r7, #24]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d132      	bne.n	8006c60 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	691b      	ldr	r3, [r3, #16]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d003      	beq.n	8006c0a <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	689a      	ldr	r2, [r3, #8]
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	689a      	ldr	r2, [r3, #8]
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006c12:	69bb      	ldr	r3, [r7, #24]
 8006c14:	015a      	lsls	r2, r3, #5
 8006c16:	69fb      	ldr	r3, [r7, #28]
 8006c18:	4413      	add	r3, r2
 8006c1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c1e:	691a      	ldr	r2, [r3, #16]
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	6a1b      	ldr	r3, [r3, #32]
 8006c24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c28:	69b9      	ldr	r1, [r7, #24]
 8006c2a:	0148      	lsls	r0, r1, #5
 8006c2c:	69f9      	ldr	r1, [r7, #28]
 8006c2e:	4401      	add	r1, r0
 8006c30:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006c34:	4313      	orrs	r3, r2
 8006c36:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006c38:	69bb      	ldr	r3, [r7, #24]
 8006c3a:	015a      	lsls	r2, r3, #5
 8006c3c:	69fb      	ldr	r3, [r7, #28]
 8006c3e:	4413      	add	r3, r2
 8006c40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c44:	691b      	ldr	r3, [r3, #16]
 8006c46:	69ba      	ldr	r2, [r7, #24]
 8006c48:	0151      	lsls	r1, r2, #5
 8006c4a:	69fa      	ldr	r2, [r7, #28]
 8006c4c:	440a      	add	r2, r1
 8006c4e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006c52:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006c56:	6113      	str	r3, [r2, #16]
 8006c58:	e062      	b.n	8006d20 <USB_EPStartXfer+0x490>
 8006c5a:	bf00      	nop
 8006c5c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	691b      	ldr	r3, [r3, #16]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d123      	bne.n	8006cb0 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006c68:	69bb      	ldr	r3, [r7, #24]
 8006c6a:	015a      	lsls	r2, r3, #5
 8006c6c:	69fb      	ldr	r3, [r7, #28]
 8006c6e:	4413      	add	r3, r2
 8006c70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c74:	691a      	ldr	r2, [r3, #16]
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	689b      	ldr	r3, [r3, #8]
 8006c7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c7e:	69b9      	ldr	r1, [r7, #24]
 8006c80:	0148      	lsls	r0, r1, #5
 8006c82:	69f9      	ldr	r1, [r7, #28]
 8006c84:	4401      	add	r1, r0
 8006c86:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006c8a:	4313      	orrs	r3, r2
 8006c8c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006c8e:	69bb      	ldr	r3, [r7, #24]
 8006c90:	015a      	lsls	r2, r3, #5
 8006c92:	69fb      	ldr	r3, [r7, #28]
 8006c94:	4413      	add	r3, r2
 8006c96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c9a:	691b      	ldr	r3, [r3, #16]
 8006c9c:	69ba      	ldr	r2, [r7, #24]
 8006c9e:	0151      	lsls	r1, r2, #5
 8006ca0:	69fa      	ldr	r2, [r7, #28]
 8006ca2:	440a      	add	r2, r1
 8006ca4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006ca8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006cac:	6113      	str	r3, [r2, #16]
 8006cae:	e037      	b.n	8006d20 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	691a      	ldr	r2, [r3, #16]
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	689b      	ldr	r3, [r3, #8]
 8006cb8:	4413      	add	r3, r2
 8006cba:	1e5a      	subs	r2, r3, #1
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	689b      	ldr	r3, [r3, #8]
 8006cc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cc4:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	689b      	ldr	r3, [r3, #8]
 8006cca:	8afa      	ldrh	r2, [r7, #22]
 8006ccc:	fb03 f202 	mul.w	r2, r3, r2
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006cd4:	69bb      	ldr	r3, [r7, #24]
 8006cd6:	015a      	lsls	r2, r3, #5
 8006cd8:	69fb      	ldr	r3, [r7, #28]
 8006cda:	4413      	add	r3, r2
 8006cdc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ce0:	691a      	ldr	r2, [r3, #16]
 8006ce2:	8afb      	ldrh	r3, [r7, #22]
 8006ce4:	04d9      	lsls	r1, r3, #19
 8006ce6:	4b38      	ldr	r3, [pc, #224]	@ (8006dc8 <USB_EPStartXfer+0x538>)
 8006ce8:	400b      	ands	r3, r1
 8006cea:	69b9      	ldr	r1, [r7, #24]
 8006cec:	0148      	lsls	r0, r1, #5
 8006cee:	69f9      	ldr	r1, [r7, #28]
 8006cf0:	4401      	add	r1, r0
 8006cf2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006cfa:	69bb      	ldr	r3, [r7, #24]
 8006cfc:	015a      	lsls	r2, r3, #5
 8006cfe:	69fb      	ldr	r3, [r7, #28]
 8006d00:	4413      	add	r3, r2
 8006d02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d06:	691a      	ldr	r2, [r3, #16]
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	6a1b      	ldr	r3, [r3, #32]
 8006d0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d10:	69b9      	ldr	r1, [r7, #24]
 8006d12:	0148      	lsls	r0, r1, #5
 8006d14:	69f9      	ldr	r1, [r7, #28]
 8006d16:	4401      	add	r1, r0
 8006d18:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006d1c:	4313      	orrs	r3, r2
 8006d1e:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8006d20:	79fb      	ldrb	r3, [r7, #7]
 8006d22:	2b01      	cmp	r3, #1
 8006d24:	d10d      	bne.n	8006d42 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	68db      	ldr	r3, [r3, #12]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d009      	beq.n	8006d42 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	68d9      	ldr	r1, [r3, #12]
 8006d32:	69bb      	ldr	r3, [r7, #24]
 8006d34:	015a      	lsls	r2, r3, #5
 8006d36:	69fb      	ldr	r3, [r7, #28]
 8006d38:	4413      	add	r3, r2
 8006d3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d3e:	460a      	mov	r2, r1
 8006d40:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	791b      	ldrb	r3, [r3, #4]
 8006d46:	2b01      	cmp	r3, #1
 8006d48:	d128      	bne.n	8006d9c <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006d4a:	69fb      	ldr	r3, [r7, #28]
 8006d4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d50:	689b      	ldr	r3, [r3, #8]
 8006d52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d110      	bne.n	8006d7c <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006d5a:	69bb      	ldr	r3, [r7, #24]
 8006d5c:	015a      	lsls	r2, r3, #5
 8006d5e:	69fb      	ldr	r3, [r7, #28]
 8006d60:	4413      	add	r3, r2
 8006d62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	69ba      	ldr	r2, [r7, #24]
 8006d6a:	0151      	lsls	r1, r2, #5
 8006d6c:	69fa      	ldr	r2, [r7, #28]
 8006d6e:	440a      	add	r2, r1
 8006d70:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006d74:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006d78:	6013      	str	r3, [r2, #0]
 8006d7a:	e00f      	b.n	8006d9c <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006d7c:	69bb      	ldr	r3, [r7, #24]
 8006d7e:	015a      	lsls	r2, r3, #5
 8006d80:	69fb      	ldr	r3, [r7, #28]
 8006d82:	4413      	add	r3, r2
 8006d84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	69ba      	ldr	r2, [r7, #24]
 8006d8c:	0151      	lsls	r1, r2, #5
 8006d8e:	69fa      	ldr	r2, [r7, #28]
 8006d90:	440a      	add	r2, r1
 8006d92:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006d96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006d9a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006d9c:	69bb      	ldr	r3, [r7, #24]
 8006d9e:	015a      	lsls	r2, r3, #5
 8006da0:	69fb      	ldr	r3, [r7, #28]
 8006da2:	4413      	add	r3, r2
 8006da4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	69ba      	ldr	r2, [r7, #24]
 8006dac:	0151      	lsls	r1, r2, #5
 8006dae:	69fa      	ldr	r2, [r7, #28]
 8006db0:	440a      	add	r2, r1
 8006db2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006db6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006dba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006dbc:	2300      	movs	r3, #0
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	3720      	adds	r7, #32
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd80      	pop	{r7, pc}
 8006dc6:	bf00      	nop
 8006dc8:	1ff80000 	.word	0x1ff80000

08006dcc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b087      	sub	sp, #28
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
 8006dd4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006dda:	2300      	movs	r3, #0
 8006ddc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	785b      	ldrb	r3, [r3, #1]
 8006de6:	2b01      	cmp	r3, #1
 8006de8:	d14a      	bne.n	8006e80 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	781b      	ldrb	r3, [r3, #0]
 8006dee:	015a      	lsls	r2, r3, #5
 8006df0:	693b      	ldr	r3, [r7, #16]
 8006df2:	4413      	add	r3, r2
 8006df4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006dfe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006e02:	f040 8086 	bne.w	8006f12 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	781b      	ldrb	r3, [r3, #0]
 8006e0a:	015a      	lsls	r2, r3, #5
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	4413      	add	r3, r2
 8006e10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	683a      	ldr	r2, [r7, #0]
 8006e18:	7812      	ldrb	r2, [r2, #0]
 8006e1a:	0151      	lsls	r1, r2, #5
 8006e1c:	693a      	ldr	r2, [r7, #16]
 8006e1e:	440a      	add	r2, r1
 8006e20:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e24:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006e28:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	781b      	ldrb	r3, [r3, #0]
 8006e2e:	015a      	lsls	r2, r3, #5
 8006e30:	693b      	ldr	r3, [r7, #16]
 8006e32:	4413      	add	r3, r2
 8006e34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	683a      	ldr	r2, [r7, #0]
 8006e3c:	7812      	ldrb	r2, [r2, #0]
 8006e3e:	0151      	lsls	r1, r2, #5
 8006e40:	693a      	ldr	r2, [r7, #16]
 8006e42:	440a      	add	r2, r1
 8006e44:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e48:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006e4c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	3301      	adds	r3, #1
 8006e52:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d902      	bls.n	8006e64 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006e5e:	2301      	movs	r3, #1
 8006e60:	75fb      	strb	r3, [r7, #23]
          break;
 8006e62:	e056      	b.n	8006f12 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	781b      	ldrb	r3, [r3, #0]
 8006e68:	015a      	lsls	r2, r3, #5
 8006e6a:	693b      	ldr	r3, [r7, #16]
 8006e6c:	4413      	add	r3, r2
 8006e6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006e78:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006e7c:	d0e7      	beq.n	8006e4e <USB_EPStopXfer+0x82>
 8006e7e:	e048      	b.n	8006f12 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	781b      	ldrb	r3, [r3, #0]
 8006e84:	015a      	lsls	r2, r3, #5
 8006e86:	693b      	ldr	r3, [r7, #16]
 8006e88:	4413      	add	r3, r2
 8006e8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006e94:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006e98:	d13b      	bne.n	8006f12 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	781b      	ldrb	r3, [r3, #0]
 8006e9e:	015a      	lsls	r2, r3, #5
 8006ea0:	693b      	ldr	r3, [r7, #16]
 8006ea2:	4413      	add	r3, r2
 8006ea4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	683a      	ldr	r2, [r7, #0]
 8006eac:	7812      	ldrb	r2, [r2, #0]
 8006eae:	0151      	lsls	r1, r2, #5
 8006eb0:	693a      	ldr	r2, [r7, #16]
 8006eb2:	440a      	add	r2, r1
 8006eb4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006eb8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006ebc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	781b      	ldrb	r3, [r3, #0]
 8006ec2:	015a      	lsls	r2, r3, #5
 8006ec4:	693b      	ldr	r3, [r7, #16]
 8006ec6:	4413      	add	r3, r2
 8006ec8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	683a      	ldr	r2, [r7, #0]
 8006ed0:	7812      	ldrb	r2, [r2, #0]
 8006ed2:	0151      	lsls	r1, r2, #5
 8006ed4:	693a      	ldr	r2, [r7, #16]
 8006ed6:	440a      	add	r2, r1
 8006ed8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006edc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006ee0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	3301      	adds	r3, #1
 8006ee6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d902      	bls.n	8006ef8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	75fb      	strb	r3, [r7, #23]
          break;
 8006ef6:	e00c      	b.n	8006f12 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	781b      	ldrb	r3, [r3, #0]
 8006efc:	015a      	lsls	r2, r3, #5
 8006efe:	693b      	ldr	r3, [r7, #16]
 8006f00:	4413      	add	r3, r2
 8006f02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006f0c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006f10:	d0e7      	beq.n	8006ee2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006f12:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	371c      	adds	r7, #28
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1e:	4770      	bx	lr

08006f20 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b089      	sub	sp, #36	@ 0x24
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	60f8      	str	r0, [r7, #12]
 8006f28:	60b9      	str	r1, [r7, #8]
 8006f2a:	4611      	mov	r1, r2
 8006f2c:	461a      	mov	r2, r3
 8006f2e:	460b      	mov	r3, r1
 8006f30:	71fb      	strb	r3, [r7, #7]
 8006f32:	4613      	mov	r3, r2
 8006f34:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006f3a:	68bb      	ldr	r3, [r7, #8]
 8006f3c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006f3e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d123      	bne.n	8006f8e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006f46:	88bb      	ldrh	r3, [r7, #4]
 8006f48:	3303      	adds	r3, #3
 8006f4a:	089b      	lsrs	r3, r3, #2
 8006f4c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006f4e:	2300      	movs	r3, #0
 8006f50:	61bb      	str	r3, [r7, #24]
 8006f52:	e018      	b.n	8006f86 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006f54:	79fb      	ldrb	r3, [r7, #7]
 8006f56:	031a      	lsls	r2, r3, #12
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	4413      	add	r3, r2
 8006f5c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f60:	461a      	mov	r2, r3
 8006f62:	69fb      	ldr	r3, [r7, #28]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006f68:	69fb      	ldr	r3, [r7, #28]
 8006f6a:	3301      	adds	r3, #1
 8006f6c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006f6e:	69fb      	ldr	r3, [r7, #28]
 8006f70:	3301      	adds	r3, #1
 8006f72:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006f74:	69fb      	ldr	r3, [r7, #28]
 8006f76:	3301      	adds	r3, #1
 8006f78:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006f7a:	69fb      	ldr	r3, [r7, #28]
 8006f7c:	3301      	adds	r3, #1
 8006f7e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006f80:	69bb      	ldr	r3, [r7, #24]
 8006f82:	3301      	adds	r3, #1
 8006f84:	61bb      	str	r3, [r7, #24]
 8006f86:	69ba      	ldr	r2, [r7, #24]
 8006f88:	693b      	ldr	r3, [r7, #16]
 8006f8a:	429a      	cmp	r2, r3
 8006f8c:	d3e2      	bcc.n	8006f54 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006f8e:	2300      	movs	r3, #0
}
 8006f90:	4618      	mov	r0, r3
 8006f92:	3724      	adds	r7, #36	@ 0x24
 8006f94:	46bd      	mov	sp, r7
 8006f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9a:	4770      	bx	lr

08006f9c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b08b      	sub	sp, #44	@ 0x2c
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	60f8      	str	r0, [r7, #12]
 8006fa4:	60b9      	str	r1, [r7, #8]
 8006fa6:	4613      	mov	r3, r2
 8006fa8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006fb2:	88fb      	ldrh	r3, [r7, #6]
 8006fb4:	089b      	lsrs	r3, r3, #2
 8006fb6:	b29b      	uxth	r3, r3
 8006fb8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006fba:	88fb      	ldrh	r3, [r7, #6]
 8006fbc:	f003 0303 	and.w	r3, r3, #3
 8006fc0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	623b      	str	r3, [r7, #32]
 8006fc6:	e014      	b.n	8006ff2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006fc8:	69bb      	ldr	r3, [r7, #24]
 8006fca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006fce:	681a      	ldr	r2, [r3, #0]
 8006fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fd2:	601a      	str	r2, [r3, #0]
    pDest++;
 8006fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fd6:	3301      	adds	r3, #1
 8006fd8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fdc:	3301      	adds	r3, #1
 8006fde:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fe2:	3301      	adds	r3, #1
 8006fe4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fe8:	3301      	adds	r3, #1
 8006fea:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006fec:	6a3b      	ldr	r3, [r7, #32]
 8006fee:	3301      	adds	r3, #1
 8006ff0:	623b      	str	r3, [r7, #32]
 8006ff2:	6a3a      	ldr	r2, [r7, #32]
 8006ff4:	697b      	ldr	r3, [r7, #20]
 8006ff6:	429a      	cmp	r2, r3
 8006ff8:	d3e6      	bcc.n	8006fc8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006ffa:	8bfb      	ldrh	r3, [r7, #30]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d01e      	beq.n	800703e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007000:	2300      	movs	r3, #0
 8007002:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007004:	69bb      	ldr	r3, [r7, #24]
 8007006:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800700a:	461a      	mov	r2, r3
 800700c:	f107 0310 	add.w	r3, r7, #16
 8007010:	6812      	ldr	r2, [r2, #0]
 8007012:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007014:	693a      	ldr	r2, [r7, #16]
 8007016:	6a3b      	ldr	r3, [r7, #32]
 8007018:	b2db      	uxtb	r3, r3
 800701a:	00db      	lsls	r3, r3, #3
 800701c:	fa22 f303 	lsr.w	r3, r2, r3
 8007020:	b2da      	uxtb	r2, r3
 8007022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007024:	701a      	strb	r2, [r3, #0]
      i++;
 8007026:	6a3b      	ldr	r3, [r7, #32]
 8007028:	3301      	adds	r3, #1
 800702a:	623b      	str	r3, [r7, #32]
      pDest++;
 800702c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800702e:	3301      	adds	r3, #1
 8007030:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8007032:	8bfb      	ldrh	r3, [r7, #30]
 8007034:	3b01      	subs	r3, #1
 8007036:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007038:	8bfb      	ldrh	r3, [r7, #30]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d1ea      	bne.n	8007014 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800703e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007040:	4618      	mov	r0, r3
 8007042:	372c      	adds	r7, #44	@ 0x2c
 8007044:	46bd      	mov	sp, r7
 8007046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704a:	4770      	bx	lr

0800704c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800704c:	b480      	push	{r7}
 800704e:	b085      	sub	sp, #20
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
 8007054:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	781b      	ldrb	r3, [r3, #0]
 800705e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	785b      	ldrb	r3, [r3, #1]
 8007064:	2b01      	cmp	r3, #1
 8007066:	d12c      	bne.n	80070c2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	015a      	lsls	r2, r3, #5
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	4413      	add	r3, r2
 8007070:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	2b00      	cmp	r3, #0
 8007078:	db12      	blt.n	80070a0 <USB_EPSetStall+0x54>
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d00f      	beq.n	80070a0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	015a      	lsls	r2, r3, #5
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	4413      	add	r3, r2
 8007088:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	68ba      	ldr	r2, [r7, #8]
 8007090:	0151      	lsls	r1, r2, #5
 8007092:	68fa      	ldr	r2, [r7, #12]
 8007094:	440a      	add	r2, r1
 8007096:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800709a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800709e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	015a      	lsls	r2, r3, #5
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	4413      	add	r3, r2
 80070a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	68ba      	ldr	r2, [r7, #8]
 80070b0:	0151      	lsls	r1, r2, #5
 80070b2:	68fa      	ldr	r2, [r7, #12]
 80070b4:	440a      	add	r2, r1
 80070b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80070ba:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80070be:	6013      	str	r3, [r2, #0]
 80070c0:	e02b      	b.n	800711a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	015a      	lsls	r2, r3, #5
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	4413      	add	r3, r2
 80070ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	db12      	blt.n	80070fa <USB_EPSetStall+0xae>
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d00f      	beq.n	80070fa <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80070da:	68bb      	ldr	r3, [r7, #8]
 80070dc:	015a      	lsls	r2, r3, #5
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	4413      	add	r3, r2
 80070e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	68ba      	ldr	r2, [r7, #8]
 80070ea:	0151      	lsls	r1, r2, #5
 80070ec:	68fa      	ldr	r2, [r7, #12]
 80070ee:	440a      	add	r2, r1
 80070f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80070f4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80070f8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80070fa:	68bb      	ldr	r3, [r7, #8]
 80070fc:	015a      	lsls	r2, r3, #5
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	4413      	add	r3, r2
 8007102:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	68ba      	ldr	r2, [r7, #8]
 800710a:	0151      	lsls	r1, r2, #5
 800710c:	68fa      	ldr	r2, [r7, #12]
 800710e:	440a      	add	r2, r1
 8007110:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007114:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007118:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800711a:	2300      	movs	r3, #0
}
 800711c:	4618      	mov	r0, r3
 800711e:	3714      	adds	r7, #20
 8007120:	46bd      	mov	sp, r7
 8007122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007126:	4770      	bx	lr

08007128 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007128:	b480      	push	{r7}
 800712a:	b085      	sub	sp, #20
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
 8007130:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	781b      	ldrb	r3, [r3, #0]
 800713a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	785b      	ldrb	r3, [r3, #1]
 8007140:	2b01      	cmp	r3, #1
 8007142:	d128      	bne.n	8007196 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	015a      	lsls	r2, r3, #5
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	4413      	add	r3, r2
 800714c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	68ba      	ldr	r2, [r7, #8]
 8007154:	0151      	lsls	r1, r2, #5
 8007156:	68fa      	ldr	r2, [r7, #12]
 8007158:	440a      	add	r2, r1
 800715a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800715e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007162:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	791b      	ldrb	r3, [r3, #4]
 8007168:	2b03      	cmp	r3, #3
 800716a:	d003      	beq.n	8007174 <USB_EPClearStall+0x4c>
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	791b      	ldrb	r3, [r3, #4]
 8007170:	2b02      	cmp	r3, #2
 8007172:	d138      	bne.n	80071e6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	015a      	lsls	r2, r3, #5
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	4413      	add	r3, r2
 800717c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	68ba      	ldr	r2, [r7, #8]
 8007184:	0151      	lsls	r1, r2, #5
 8007186:	68fa      	ldr	r2, [r7, #12]
 8007188:	440a      	add	r2, r1
 800718a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800718e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007192:	6013      	str	r3, [r2, #0]
 8007194:	e027      	b.n	80071e6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	015a      	lsls	r2, r3, #5
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	4413      	add	r3, r2
 800719e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	68ba      	ldr	r2, [r7, #8]
 80071a6:	0151      	lsls	r1, r2, #5
 80071a8:	68fa      	ldr	r2, [r7, #12]
 80071aa:	440a      	add	r2, r1
 80071ac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80071b0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80071b4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	791b      	ldrb	r3, [r3, #4]
 80071ba:	2b03      	cmp	r3, #3
 80071bc:	d003      	beq.n	80071c6 <USB_EPClearStall+0x9e>
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	791b      	ldrb	r3, [r3, #4]
 80071c2:	2b02      	cmp	r3, #2
 80071c4:	d10f      	bne.n	80071e6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	015a      	lsls	r2, r3, #5
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	4413      	add	r3, r2
 80071ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	68ba      	ldr	r2, [r7, #8]
 80071d6:	0151      	lsls	r1, r2, #5
 80071d8:	68fa      	ldr	r2, [r7, #12]
 80071da:	440a      	add	r2, r1
 80071dc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80071e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80071e4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80071e6:	2300      	movs	r3, #0
}
 80071e8:	4618      	mov	r0, r3
 80071ea:	3714      	adds	r7, #20
 80071ec:	46bd      	mov	sp, r7
 80071ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f2:	4770      	bx	lr

080071f4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80071f4:	b480      	push	{r7}
 80071f6:	b085      	sub	sp, #20
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
 80071fc:	460b      	mov	r3, r1
 80071fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	68fa      	ldr	r2, [r7, #12]
 800720e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007212:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8007216:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800721e:	681a      	ldr	r2, [r3, #0]
 8007220:	78fb      	ldrb	r3, [r7, #3]
 8007222:	011b      	lsls	r3, r3, #4
 8007224:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8007228:	68f9      	ldr	r1, [r7, #12]
 800722a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800722e:	4313      	orrs	r3, r2
 8007230:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007232:	2300      	movs	r3, #0
}
 8007234:	4618      	mov	r0, r3
 8007236:	3714      	adds	r7, #20
 8007238:	46bd      	mov	sp, r7
 800723a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723e:	4770      	bx	lr

08007240 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007240:	b480      	push	{r7}
 8007242:	b085      	sub	sp, #20
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	68fa      	ldr	r2, [r7, #12]
 8007256:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800725a:	f023 0303 	bic.w	r3, r3, #3
 800725e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007266:	685b      	ldr	r3, [r3, #4]
 8007268:	68fa      	ldr	r2, [r7, #12]
 800726a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800726e:	f023 0302 	bic.w	r3, r3, #2
 8007272:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007274:	2300      	movs	r3, #0
}
 8007276:	4618      	mov	r0, r3
 8007278:	3714      	adds	r7, #20
 800727a:	46bd      	mov	sp, r7
 800727c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007280:	4770      	bx	lr

08007282 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007282:	b480      	push	{r7}
 8007284:	b085      	sub	sp, #20
 8007286:	af00      	add	r7, sp, #0
 8007288:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	68fa      	ldr	r2, [r7, #12]
 8007298:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800729c:	f023 0303 	bic.w	r3, r3, #3
 80072a0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072a8:	685b      	ldr	r3, [r3, #4]
 80072aa:	68fa      	ldr	r2, [r7, #12]
 80072ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80072b0:	f043 0302 	orr.w	r3, r3, #2
 80072b4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80072b6:	2300      	movs	r3, #0
}
 80072b8:	4618      	mov	r0, r3
 80072ba:	3714      	adds	r7, #20
 80072bc:	46bd      	mov	sp, r7
 80072be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c2:	4770      	bx	lr

080072c4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80072c4:	b480      	push	{r7}
 80072c6:	b085      	sub	sp, #20
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	695b      	ldr	r3, [r3, #20]
 80072d0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	699b      	ldr	r3, [r3, #24]
 80072d6:	68fa      	ldr	r2, [r7, #12]
 80072d8:	4013      	ands	r3, r2
 80072da:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80072dc:	68fb      	ldr	r3, [r7, #12]
}
 80072de:	4618      	mov	r0, r3
 80072e0:	3714      	adds	r7, #20
 80072e2:	46bd      	mov	sp, r7
 80072e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e8:	4770      	bx	lr

080072ea <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80072ea:	b480      	push	{r7}
 80072ec:	b085      	sub	sp, #20
 80072ee:	af00      	add	r7, sp, #0
 80072f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072fc:	699b      	ldr	r3, [r3, #24]
 80072fe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007306:	69db      	ldr	r3, [r3, #28]
 8007308:	68ba      	ldr	r2, [r7, #8]
 800730a:	4013      	ands	r3, r2
 800730c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	0c1b      	lsrs	r3, r3, #16
}
 8007312:	4618      	mov	r0, r3
 8007314:	3714      	adds	r7, #20
 8007316:	46bd      	mov	sp, r7
 8007318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731c:	4770      	bx	lr

0800731e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800731e:	b480      	push	{r7}
 8007320:	b085      	sub	sp, #20
 8007322:	af00      	add	r7, sp, #0
 8007324:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007330:	699b      	ldr	r3, [r3, #24]
 8007332:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800733a:	69db      	ldr	r3, [r3, #28]
 800733c:	68ba      	ldr	r2, [r7, #8]
 800733e:	4013      	ands	r3, r2
 8007340:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	b29b      	uxth	r3, r3
}
 8007346:	4618      	mov	r0, r3
 8007348:	3714      	adds	r7, #20
 800734a:	46bd      	mov	sp, r7
 800734c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007350:	4770      	bx	lr

08007352 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007352:	b480      	push	{r7}
 8007354:	b085      	sub	sp, #20
 8007356:	af00      	add	r7, sp, #0
 8007358:	6078      	str	r0, [r7, #4]
 800735a:	460b      	mov	r3, r1
 800735c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007362:	78fb      	ldrb	r3, [r7, #3]
 8007364:	015a      	lsls	r2, r3, #5
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	4413      	add	r3, r2
 800736a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800736e:	689b      	ldr	r3, [r3, #8]
 8007370:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007378:	695b      	ldr	r3, [r3, #20]
 800737a:	68ba      	ldr	r2, [r7, #8]
 800737c:	4013      	ands	r3, r2
 800737e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007380:	68bb      	ldr	r3, [r7, #8]
}
 8007382:	4618      	mov	r0, r3
 8007384:	3714      	adds	r7, #20
 8007386:	46bd      	mov	sp, r7
 8007388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738c:	4770      	bx	lr

0800738e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800738e:	b480      	push	{r7}
 8007390:	b087      	sub	sp, #28
 8007392:	af00      	add	r7, sp, #0
 8007394:	6078      	str	r0, [r7, #4]
 8007396:	460b      	mov	r3, r1
 8007398:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800739e:	697b      	ldr	r3, [r7, #20]
 80073a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073a4:	691b      	ldr	r3, [r3, #16]
 80073a6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80073a8:	697b      	ldr	r3, [r7, #20]
 80073aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073b0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80073b2:	78fb      	ldrb	r3, [r7, #3]
 80073b4:	f003 030f 	and.w	r3, r3, #15
 80073b8:	68fa      	ldr	r2, [r7, #12]
 80073ba:	fa22 f303 	lsr.w	r3, r2, r3
 80073be:	01db      	lsls	r3, r3, #7
 80073c0:	b2db      	uxtb	r3, r3
 80073c2:	693a      	ldr	r2, [r7, #16]
 80073c4:	4313      	orrs	r3, r2
 80073c6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80073c8:	78fb      	ldrb	r3, [r7, #3]
 80073ca:	015a      	lsls	r2, r3, #5
 80073cc:	697b      	ldr	r3, [r7, #20]
 80073ce:	4413      	add	r3, r2
 80073d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073d4:	689b      	ldr	r3, [r3, #8]
 80073d6:	693a      	ldr	r2, [r7, #16]
 80073d8:	4013      	ands	r3, r2
 80073da:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80073dc:	68bb      	ldr	r3, [r7, #8]
}
 80073de:	4618      	mov	r0, r3
 80073e0:	371c      	adds	r7, #28
 80073e2:	46bd      	mov	sp, r7
 80073e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e8:	4770      	bx	lr

080073ea <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80073ea:	b480      	push	{r7}
 80073ec:	b083      	sub	sp, #12
 80073ee:	af00      	add	r7, sp, #0
 80073f0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	695b      	ldr	r3, [r3, #20]
 80073f6:	f003 0301 	and.w	r3, r3, #1
}
 80073fa:	4618      	mov	r0, r3
 80073fc:	370c      	adds	r7, #12
 80073fe:	46bd      	mov	sp, r7
 8007400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007404:	4770      	bx	lr

08007406 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8007406:	b480      	push	{r7}
 8007408:	b085      	sub	sp, #20
 800740a:	af00      	add	r7, sp, #0
 800740c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	68fa      	ldr	r2, [r7, #12]
 800741c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007420:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8007424:	f023 0307 	bic.w	r3, r3, #7
 8007428:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007430:	685b      	ldr	r3, [r3, #4]
 8007432:	68fa      	ldr	r2, [r7, #12]
 8007434:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007438:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800743c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800743e:	2300      	movs	r3, #0
}
 8007440:	4618      	mov	r0, r3
 8007442:	3714      	adds	r7, #20
 8007444:	46bd      	mov	sp, r7
 8007446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744a:	4770      	bx	lr

0800744c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800744c:	b480      	push	{r7}
 800744e:	b087      	sub	sp, #28
 8007450:	af00      	add	r7, sp, #0
 8007452:	60f8      	str	r0, [r7, #12]
 8007454:	460b      	mov	r3, r1
 8007456:	607a      	str	r2, [r7, #4]
 8007458:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	333c      	adds	r3, #60	@ 0x3c
 8007462:	3304      	adds	r3, #4
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007468:	693b      	ldr	r3, [r7, #16]
 800746a:	4a26      	ldr	r2, [pc, #152]	@ (8007504 <USB_EP0_OutStart+0xb8>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d90a      	bls.n	8007486 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007470:	697b      	ldr	r3, [r7, #20]
 8007472:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800747c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007480:	d101      	bne.n	8007486 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007482:	2300      	movs	r3, #0
 8007484:	e037      	b.n	80074f6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007486:	697b      	ldr	r3, [r7, #20]
 8007488:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800748c:	461a      	mov	r2, r3
 800748e:	2300      	movs	r3, #0
 8007490:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007492:	697b      	ldr	r3, [r7, #20]
 8007494:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007498:	691b      	ldr	r3, [r3, #16]
 800749a:	697a      	ldr	r2, [r7, #20]
 800749c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80074a0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80074a4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80074a6:	697b      	ldr	r3, [r7, #20]
 80074a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074ac:	691b      	ldr	r3, [r3, #16]
 80074ae:	697a      	ldr	r2, [r7, #20]
 80074b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80074b4:	f043 0318 	orr.w	r3, r3, #24
 80074b8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80074ba:	697b      	ldr	r3, [r7, #20]
 80074bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074c0:	691b      	ldr	r3, [r3, #16]
 80074c2:	697a      	ldr	r2, [r7, #20]
 80074c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80074c8:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80074cc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80074ce:	7afb      	ldrb	r3, [r7, #11]
 80074d0:	2b01      	cmp	r3, #1
 80074d2:	d10f      	bne.n	80074f4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80074d4:	697b      	ldr	r3, [r7, #20]
 80074d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074da:	461a      	mov	r2, r3
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80074e0:	697b      	ldr	r3, [r7, #20]
 80074e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	697a      	ldr	r2, [r7, #20]
 80074ea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80074ee:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80074f2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80074f4:	2300      	movs	r3, #0
}
 80074f6:	4618      	mov	r0, r3
 80074f8:	371c      	adds	r7, #28
 80074fa:	46bd      	mov	sp, r7
 80074fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007500:	4770      	bx	lr
 8007502:	bf00      	nop
 8007504:	4f54300a 	.word	0x4f54300a

08007508 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007508:	b480      	push	{r7}
 800750a:	b085      	sub	sp, #20
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007510:	2300      	movs	r3, #0
 8007512:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	3301      	adds	r3, #1
 8007518:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007520:	d901      	bls.n	8007526 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007522:	2303      	movs	r3, #3
 8007524:	e01b      	b.n	800755e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	691b      	ldr	r3, [r3, #16]
 800752a:	2b00      	cmp	r3, #0
 800752c:	daf2      	bge.n	8007514 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800752e:	2300      	movs	r3, #0
 8007530:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	691b      	ldr	r3, [r3, #16]
 8007536:	f043 0201 	orr.w	r2, r3, #1
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	3301      	adds	r3, #1
 8007542:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800754a:	d901      	bls.n	8007550 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800754c:	2303      	movs	r3, #3
 800754e:	e006      	b.n	800755e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	691b      	ldr	r3, [r3, #16]
 8007554:	f003 0301 	and.w	r3, r3, #1
 8007558:	2b01      	cmp	r3, #1
 800755a:	d0f0      	beq.n	800753e <USB_CoreReset+0x36>

  return HAL_OK;
 800755c:	2300      	movs	r3, #0
}
 800755e:	4618      	mov	r0, r3
 8007560:	3714      	adds	r7, #20
 8007562:	46bd      	mov	sp, r7
 8007564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007568:	4770      	bx	lr
	...

0800756c <USBD_AUDIO_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_AUDIO_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b084      	sub	sp, #16
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
 8007574:	460b      	mov	r3, r1
 8007576:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_AUDIO_HandleTypeDef *haudio;

  /* Allocate Audio structure */
  haudio = (USBD_AUDIO_HandleTypeDef *)USBD_malloc(sizeof(USBD_AUDIO_HandleTypeDef));
 8007578:	f645 4094 	movw	r0, #23700	@ 0x5c94
 800757c:	f002 fcf6 	bl	8009f6c <USBD_static_malloc>
 8007580:	60f8      	str	r0, [r7, #12]

  if (haudio == NULL)
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d109      	bne.n	800759c <USBD_AUDIO_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	32b0      	adds	r2, #176	@ 0xb0
 8007592:	2100      	movs	r1, #0
 8007594:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007598:	2302      	movs	r3, #2
 800759a:	e095      	b.n	80076c8 <USBD_AUDIO_Init+0x15c>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)haudio;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	32b0      	adds	r2, #176	@ 0xb0
 80075a6:	68f9      	ldr	r1, [r7, #12]
 80075a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	32b0      	adds	r2, #176	@ 0xb0
 80075b6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  AUDIOOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_ISOC, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	7c1b      	ldrb	r3, [r3, #16]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d10e      	bne.n	80075e6 <USBD_AUDIO_Init+0x7a>
  {
    pdev->ep_out[AUDIOOutEpAdd & 0xFU].bInterval = AUDIO_HS_BINTERVAL;
 80075c8:	4b41      	ldr	r3, [pc, #260]	@ (80076d0 <USBD_AUDIO_Init+0x164>)
 80075ca:	781b      	ldrb	r3, [r3, #0]
 80075cc:	f003 020f 	and.w	r2, r3, #15
 80075d0:	6879      	ldr	r1, [r7, #4]
 80075d2:	4613      	mov	r3, r2
 80075d4:	009b      	lsls	r3, r3, #2
 80075d6:	4413      	add	r3, r2
 80075d8:	009b      	lsls	r3, r3, #2
 80075da:	440b      	add	r3, r1
 80075dc:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 80075e0:	2201      	movs	r2, #1
 80075e2:	801a      	strh	r2, [r3, #0]
 80075e4:	e00d      	b.n	8007602 <USBD_AUDIO_Init+0x96>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_out[AUDIOOutEpAdd & 0xFU].bInterval = AUDIO_FS_BINTERVAL;
 80075e6:	4b3a      	ldr	r3, [pc, #232]	@ (80076d0 <USBD_AUDIO_Init+0x164>)
 80075e8:	781b      	ldrb	r3, [r3, #0]
 80075ea:	f003 020f 	and.w	r2, r3, #15
 80075ee:	6879      	ldr	r1, [r7, #4]
 80075f0:	4613      	mov	r3, r2
 80075f2:	009b      	lsls	r3, r3, #2
 80075f4:	4413      	add	r3, r2
 80075f6:	009b      	lsls	r3, r3, #2
 80075f8:	440b      	add	r3, r1
 80075fa:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 80075fe:	2201      	movs	r2, #1
 8007600:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, AUDIOOutEpAdd, USBD_EP_TYPE_ISOC, AUDIO_OUT_PACKET);
 8007602:	4b33      	ldr	r3, [pc, #204]	@ (80076d0 <USBD_AUDIO_Init+0x164>)
 8007604:	7819      	ldrb	r1, [r3, #0]
 8007606:	f44f 7310 	mov.w	r3, #576	@ 0x240
 800760a:	2201      	movs	r2, #1
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	f002 fb6a 	bl	8009ce6 <USBD_LL_OpenEP>
  pdev->ep_out[AUDIOOutEpAdd & 0xFU].is_used = 1U;
 8007612:	4b2f      	ldr	r3, [pc, #188]	@ (80076d0 <USBD_AUDIO_Init+0x164>)
 8007614:	781b      	ldrb	r3, [r3, #0]
 8007616:	f003 020f 	and.w	r2, r3, #15
 800761a:	6879      	ldr	r1, [r7, #4]
 800761c:	4613      	mov	r3, r2
 800761e:	009b      	lsls	r3, r3, #2
 8007620:	4413      	add	r3, r2
 8007622:	009b      	lsls	r3, r3, #2
 8007624:	440b      	add	r3, r1
 8007626:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800762a:	2201      	movs	r2, #1
 800762c:	801a      	strh	r2, [r3, #0]

  haudio->alt_setting = 0U;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	2200      	movs	r2, #0
 8007632:	601a      	str	r2, [r3, #0]
  haudio->offset = AUDIO_OFFSET_UNKNOWN;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 800763a:	2203      	movs	r2, #3
 800763c:	f883 2c44 	strb.w	r2, [r3, #3140]	@ 0xc44
  haudio->wr_ptr = 0U;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 8007646:	2200      	movs	r2, #0
 8007648:	f8a3 2c48 	strh.w	r2, [r3, #3144]	@ 0xc48
  haudio->rd_ptr = 0U;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 8007652:	2200      	movs	r2, #0
 8007654:	f8a3 2c46 	strh.w	r2, [r3, #3142]	@ 0xc46
  haudio->freq = 48000U;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 800765e:	461a      	mov	r2, r3
 8007660:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8007664:	f8c2 3c4c 	str.w	r3, [r2, #3148]	@ 0xc4c
  haudio->bit_depth = 16U;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 800766e:	2210      	movs	r2, #16
 8007670:	f883 2c50 	strb.w	r2, [r3, #3152]	@ 0xc50
  haudio->rd_enable = 0U;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 800767a:	2200      	movs	r2, #0
 800767c:	f883 2c45 	strb.w	r2, [r3, #3141]	@ 0xc45

  /* Initialize the Audio output Hardware layer */
  if (((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init(haudio->freq,
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007686:	687a      	ldr	r2, [r7, #4]
 8007688:	33b0      	adds	r3, #176	@ 0xb0
 800768a:	009b      	lsls	r3, r3, #2
 800768c:	4413      	add	r3, r2
 800768e:	685b      	ldr	r3, [r3, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	68fa      	ldr	r2, [r7, #12]
 8007694:	f502 42a0 	add.w	r2, r2, #20480	@ 0x5000
 8007698:	f8d2 0c4c 	ldr.w	r0, [r2, #3148]	@ 0xc4c
                                                                      AUDIO_DEFAULT_VOLUME,
                                                                      haudio->bit_depth) != 0U)
 800769c:	68fa      	ldr	r2, [r7, #12]
 800769e:	f502 42a0 	add.w	r2, r2, #20480	@ 0x5000
 80076a2:	f892 2c50 	ldrb.w	r2, [r2, #3152]	@ 0xc50
  if (((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init(haudio->freq,
 80076a6:	2146      	movs	r1, #70	@ 0x46
 80076a8:	4798      	blx	r3
 80076aa:	4603      	mov	r3, r0
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d001      	beq.n	80076b4 <USBD_AUDIO_Init+0x148>
  {
    return (uint8_t)USBD_FAIL;
 80076b0:	2303      	movs	r3, #3
 80076b2:	e009      	b.n	80076c8 <USBD_AUDIO_Init+0x15c>
  }

  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, AUDIOOutEpAdd, haudio->buffer,
 80076b4:	4b06      	ldr	r3, [pc, #24]	@ (80076d0 <USBD_AUDIO_Init+0x164>)
 80076b6:	7819      	ldrb	r1, [r3, #0]
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	1d1a      	adds	r2, r3, #4
 80076bc:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80076c0:	6878      	ldr	r0, [r7, #4]
 80076c2:	f002 fc1e 	bl	8009f02 <USBD_LL_PrepareReceive>
                               AUDIO_OUT_PACKET);

  return (uint8_t)USBD_OK;
 80076c6:	2300      	movs	r3, #0
}
 80076c8:	4618      	mov	r0, r3
 80076ca:	3710      	adds	r7, #16
 80076cc:	46bd      	mov	sp, r7
 80076ce:	bd80      	pop	{r7, pc}
 80076d0:	2000010a 	.word	0x2000010a

080076d4 <USBD_AUDIO_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_AUDIO_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b082      	sub	sp, #8
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
 80076dc:	460b      	mov	r3, r1
 80076de:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  AUDIOOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_ISOC, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Open EP OUT */
  (void)USBD_LL_CloseEP(pdev, AUDIOOutEpAdd);
 80076e0:	4b28      	ldr	r3, [pc, #160]	@ (8007784 <USBD_AUDIO_DeInit+0xb0>)
 80076e2:	781b      	ldrb	r3, [r3, #0]
 80076e4:	4619      	mov	r1, r3
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f002 fb23 	bl	8009d32 <USBD_LL_CloseEP>
  pdev->ep_out[AUDIOOutEpAdd & 0xFU].is_used = 0U;
 80076ec:	4b25      	ldr	r3, [pc, #148]	@ (8007784 <USBD_AUDIO_DeInit+0xb0>)
 80076ee:	781b      	ldrb	r3, [r3, #0]
 80076f0:	f003 020f 	and.w	r2, r3, #15
 80076f4:	6879      	ldr	r1, [r7, #4]
 80076f6:	4613      	mov	r3, r2
 80076f8:	009b      	lsls	r3, r3, #2
 80076fa:	4413      	add	r3, r2
 80076fc:	009b      	lsls	r3, r3, #2
 80076fe:	440b      	add	r3, r1
 8007700:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007704:	2200      	movs	r2, #0
 8007706:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[AUDIOOutEpAdd & 0xFU].bInterval = 0U;
 8007708:	4b1e      	ldr	r3, [pc, #120]	@ (8007784 <USBD_AUDIO_DeInit+0xb0>)
 800770a:	781b      	ldrb	r3, [r3, #0]
 800770c:	f003 020f 	and.w	r2, r3, #15
 8007710:	6879      	ldr	r1, [r7, #4]
 8007712:	4613      	mov	r3, r2
 8007714:	009b      	lsls	r3, r3, #2
 8007716:	4413      	add	r3, r2
 8007718:	009b      	lsls	r3, r3, #2
 800771a:	440b      	add	r3, r1
 800771c:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 8007720:	2200      	movs	r2, #0
 8007722:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	32b0      	adds	r2, #176	@ 0xb0
 800772e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d020      	beq.n	8007778 <USBD_AUDIO_DeInit+0xa4>
  {
    ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit(0U);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800773c:	687a      	ldr	r2, [r7, #4]
 800773e:	33b0      	adds	r3, #176	@ 0xb0
 8007740:	009b      	lsls	r3, r3, #2
 8007742:	4413      	add	r3, r2
 8007744:	685b      	ldr	r3, [r3, #4]
 8007746:	685b      	ldr	r3, [r3, #4]
 8007748:	2000      	movs	r0, #0
 800774a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	32b0      	adds	r2, #176	@ 0xb0
 8007756:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800775a:	4618      	mov	r0, r3
 800775c:	f002 fc14 	bl	8009f88 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	32b0      	adds	r2, #176	@ 0xb0
 800776a:	2100      	movs	r1, #0
 800776c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2200      	movs	r2, #0
 8007774:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007778:	2300      	movs	r3, #0
}
 800777a:	4618      	mov	r0, r3
 800777c:	3708      	adds	r7, #8
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}
 8007782:	bf00      	nop
 8007784:	2000010a 	.word	0x2000010a

08007788 <USBD_AUDIO_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_AUDIO_Setup(USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b086      	sub	sp, #24
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
 8007790:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8007792:	2300      	movs	r3, #0
 8007794:	813b      	strh	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_OK;
 8007796:	2300      	movs	r3, #0
 8007798:	75fb      	strb	r3, [r7, #23]

  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	32b0      	adds	r2, #176	@ 0xb0
 80077a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077a8:	613b      	str	r3, [r7, #16]

  if (haudio == NULL)
 80077aa:	693b      	ldr	r3, [r7, #16]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d101      	bne.n	80077b4 <USBD_AUDIO_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 80077b0:	2303      	movs	r3, #3
 80077b2:	e0f6      	b.n	80079a2 <USBD_AUDIO_Setup+0x21a>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	781b      	ldrb	r3, [r3, #0]
 80077b8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d01a      	beq.n	80077f6 <USBD_AUDIO_Setup+0x6e>
 80077c0:	2b20      	cmp	r3, #32
 80077c2:	f040 80e6 	bne.w	8007992 <USBD_AUDIO_Setup+0x20a>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	785b      	ldrb	r3, [r3, #1]
 80077ca:	2b01      	cmp	r3, #1
 80077cc:	d006      	beq.n	80077dc <USBD_AUDIO_Setup+0x54>
 80077ce:	2b81      	cmp	r3, #129	@ 0x81
 80077d0:	d109      	bne.n	80077e6 <USBD_AUDIO_Setup+0x5e>
      {
        case AUDIO_REQ_GET_CUR:
          AUDIO_REQ_GetCurrent(pdev, req);
 80077d2:	6839      	ldr	r1, [r7, #0]
 80077d4:	6878      	ldr	r0, [r7, #4]
 80077d6:	f000 fa59 	bl	8007c8c <AUDIO_REQ_GetCurrent>
          break;
 80077da:	e00b      	b.n	80077f4 <USBD_AUDIO_Setup+0x6c>

        case AUDIO_REQ_SET_CUR:
          AUDIO_REQ_SetCurrent(pdev, req);
 80077dc:	6839      	ldr	r1, [r7, #0]
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f000 fa80 	bl	8007ce4 <AUDIO_REQ_SetCurrent>
          break;
 80077e4:	e006      	b.n	80077f4 <USBD_AUDIO_Setup+0x6c>

        default:
          USBD_CtlError(pdev, req);
 80077e6:	6839      	ldr	r1, [r7, #0]
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f001 fd50 	bl	800928e <USBD_CtlError>
          ret = USBD_FAIL;
 80077ee:	2303      	movs	r3, #3
 80077f0:	75fb      	strb	r3, [r7, #23]
          break;
 80077f2:	bf00      	nop
      }
      break;
 80077f4:	e0d4      	b.n	80079a0 <USBD_AUDIO_Setup+0x218>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	785b      	ldrb	r3, [r3, #1]
 80077fa:	2b0b      	cmp	r3, #11
 80077fc:	f200 80bc 	bhi.w	8007978 <USBD_AUDIO_Setup+0x1f0>
 8007800:	a201      	add	r2, pc, #4	@ (adr r2, 8007808 <USBD_AUDIO_Setup+0x80>)
 8007802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007806:	bf00      	nop
 8007808:	08007839 	.word	0x08007839
 800780c:	08007987 	.word	0x08007987
 8007810:	08007979 	.word	0x08007979
 8007814:	08007979 	.word	0x08007979
 8007818:	08007979 	.word	0x08007979
 800781c:	08007979 	.word	0x08007979
 8007820:	08007863 	.word	0x08007863
 8007824:	08007979 	.word	0x08007979
 8007828:	08007979 	.word	0x08007979
 800782c:	08007979 	.word	0x08007979
 8007830:	080078ad 	.word	0x080078ad
 8007834:	080078d5 	.word	0x080078d5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800783e:	b2db      	uxtb	r3, r3
 8007840:	2b03      	cmp	r3, #3
 8007842:	d107      	bne.n	8007854 <USBD_AUDIO_Setup+0xcc>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007844:	f107 0308 	add.w	r3, r7, #8
 8007848:	2202      	movs	r2, #2
 800784a:	4619      	mov	r1, r3
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	f001 fd9b 	bl	8009388 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007852:	e09d      	b.n	8007990 <USBD_AUDIO_Setup+0x208>
            USBD_CtlError(pdev, req);
 8007854:	6839      	ldr	r1, [r7, #0]
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f001 fd19 	bl	800928e <USBD_CtlError>
            ret = USBD_FAIL;
 800785c:	2303      	movs	r3, #3
 800785e:	75fb      	strb	r3, [r7, #23]
          break;
 8007860:	e096      	b.n	8007990 <USBD_AUDIO_Setup+0x208>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == AUDIO_DESCRIPTOR_TYPE)
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	885b      	ldrh	r3, [r3, #2]
 8007866:	0a1b      	lsrs	r3, r3, #8
 8007868:	b29b      	uxth	r3, r3
 800786a:	2b21      	cmp	r3, #33	@ 0x21
 800786c:	f040 808d 	bne.w	800798a <USBD_AUDIO_Setup+0x202>
          {
            pbuf = (uint8_t *)USBD_AUDIO_GetAudioHeaderDesc(pdev->pConfDesc);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 8007876:	4618      	mov	r0, r3
 8007878:	f000 faa2 	bl	8007dc0 <USBD_AUDIO_GetAudioHeaderDesc>
 800787c:	60f8      	str	r0, [r7, #12]
            if (pbuf != NULL)
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d00c      	beq.n	800789e <USBD_AUDIO_Setup+0x116>
            {
              len = MIN(USB_AUDIO_DESC_SIZ, req->wLength);
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	88db      	ldrh	r3, [r3, #6]
 8007888:	2b09      	cmp	r3, #9
 800788a:	bf28      	it	cs
 800788c:	2309      	movcs	r3, #9
 800788e:	817b      	strh	r3, [r7, #10]
              (void)USBD_CtlSendData(pdev, pbuf, len);
 8007890:	897b      	ldrh	r3, [r7, #10]
 8007892:	461a      	mov	r2, r3
 8007894:	68f9      	ldr	r1, [r7, #12]
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	f001 fd76 	bl	8009388 <USBD_CtlSendData>
            {
              USBD_CtlError(pdev, req);
              ret = USBD_FAIL;
            }
          }
          break;
 800789c:	e075      	b.n	800798a <USBD_AUDIO_Setup+0x202>
              USBD_CtlError(pdev, req);
 800789e:	6839      	ldr	r1, [r7, #0]
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	f001 fcf4 	bl	800928e <USBD_CtlError>
              ret = USBD_FAIL;
 80078a6:	2303      	movs	r3, #3
 80078a8:	75fb      	strb	r3, [r7, #23]
          break;
 80078aa:	e06e      	b.n	800798a <USBD_AUDIO_Setup+0x202>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80078b2:	b2db      	uxtb	r3, r3
 80078b4:	2b03      	cmp	r3, #3
 80078b6:	d106      	bne.n	80078c6 <USBD_AUDIO_Setup+0x13e>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&haudio->alt_setting, 1U);
 80078b8:	693b      	ldr	r3, [r7, #16]
 80078ba:	2201      	movs	r2, #1
 80078bc:	4619      	mov	r1, r3
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f001 fd62 	bl	8009388 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80078c4:	e064      	b.n	8007990 <USBD_AUDIO_Setup+0x208>
            USBD_CtlError(pdev, req);
 80078c6:	6839      	ldr	r1, [r7, #0]
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f001 fce0 	bl	800928e <USBD_CtlError>
            ret = USBD_FAIL;
 80078ce:	2303      	movs	r3, #3
 80078d0:	75fb      	strb	r3, [r7, #23]
          break;
 80078d2:	e05d      	b.n	8007990 <USBD_AUDIO_Setup+0x208>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80078da:	b2db      	uxtb	r3, r3
 80078dc:	2b03      	cmp	r3, #3
 80078de:	d143      	bne.n	8007968 <USBD_AUDIO_Setup+0x1e0>
          {
            if ((uint8_t)(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	889b      	ldrh	r3, [r3, #4]
 80078e4:	b2db      	uxtb	r3, r3
 80078e6:	2b01      	cmp	r3, #1
 80078e8:	d837      	bhi.n	800795a <USBD_AUDIO_Setup+0x1d2>
            {
              if((uint8_t)req->wValue != haudio->alt_setting){
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	885b      	ldrh	r3, [r3, #2]
 80078ee:	b2db      	uxtb	r3, r3
 80078f0:	461a      	mov	r2, r3
 80078f2:	693b      	ldr	r3, [r7, #16]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	429a      	cmp	r2, r3
 80078f8:	d049      	beq.n	800798e <USBD_AUDIO_Setup+0x206>
                haudio->alt_setting = (uint8_t)(req->wValue);
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	885b      	ldrh	r3, [r3, #2]
 80078fe:	b2db      	uxtb	r3, r3
 8007900:	461a      	mov	r2, r3
 8007902:	693b      	ldr	r3, [r7, #16]
 8007904:	601a      	str	r2, [r3, #0]
                switch(haudio->alt_setting){
 8007906:	693b      	ldr	r3, [r7, #16]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	2b02      	cmp	r3, #2
 800790c:	d00f      	beq.n	800792e <USBD_AUDIO_Setup+0x1a6>
 800790e:	2b02      	cmp	r3, #2
 8007910:	d83d      	bhi.n	800798e <USBD_AUDIO_Setup+0x206>
 8007912:	2b00      	cmp	r3, #0
 8007914:	d015      	beq.n	8007942 <USBD_AUDIO_Setup+0x1ba>
 8007916:	2b01      	cmp	r3, #1
 8007918:	d139      	bne.n	800798e <USBD_AUDIO_Setup+0x206>
                case 1U:
                	haudio->bit_depth = 16U;
 800791a:	693b      	ldr	r3, [r7, #16]
 800791c:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 8007920:	2210      	movs	r2, #16
 8007922:	f883 2c50 	strb.w	r2, [r3, #3152]	@ 0xc50
                	resetPlay(pdev);
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f000 fa7c 	bl	8007e24 <resetPlay>
                	break;
 800792c:	e023      	b.n	8007976 <USBD_AUDIO_Setup+0x1ee>
                case 2U:
                	haudio->bit_depth = 24U;
 800792e:	693b      	ldr	r3, [r7, #16]
 8007930:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 8007934:	2218      	movs	r2, #24
 8007936:	f883 2c50 	strb.w	r2, [r3, #3152]	@ 0xc50
                	resetPlay(pdev);
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	f000 fa72 	bl	8007e24 <resetPlay>
                	break;
 8007940:	e019      	b.n	8007976 <USBD_AUDIO_Setup+0x1ee>
                case 0U:
                	((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit(0U);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007948:	687a      	ldr	r2, [r7, #4]
 800794a:	33b0      	adds	r3, #176	@ 0xb0
 800794c:	009b      	lsls	r3, r3, #2
 800794e:	4413      	add	r3, r2
 8007950:	685b      	ldr	r3, [r3, #4]
 8007952:	685b      	ldr	r3, [r3, #4]
 8007954:	2000      	movs	r0, #0
 8007956:	4798      	blx	r3
                	break;
 8007958:	e00d      	b.n	8007976 <USBD_AUDIO_Setup+0x1ee>
              }
            }
            else
            {
              /* Call the error management function (command will be NAKed */
              USBD_CtlError(pdev, req);
 800795a:	6839      	ldr	r1, [r7, #0]
 800795c:	6878      	ldr	r0, [r7, #4]
 800795e:	f001 fc96 	bl	800928e <USBD_CtlError>
              ret = USBD_FAIL;
 8007962:	2303      	movs	r3, #3
 8007964:	75fb      	strb	r3, [r7, #23]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007966:	e012      	b.n	800798e <USBD_AUDIO_Setup+0x206>
            USBD_CtlError(pdev, req);
 8007968:	6839      	ldr	r1, [r7, #0]
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f001 fc8f 	bl	800928e <USBD_CtlError>
            ret = USBD_FAIL;
 8007970:	2303      	movs	r3, #3
 8007972:	75fb      	strb	r3, [r7, #23]
          break;
 8007974:	e00b      	b.n	800798e <USBD_AUDIO_Setup+0x206>
 8007976:	e00a      	b.n	800798e <USBD_AUDIO_Setup+0x206>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007978:	6839      	ldr	r1, [r7, #0]
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f001 fc87 	bl	800928e <USBD_CtlError>
          ret = USBD_FAIL;
 8007980:	2303      	movs	r3, #3
 8007982:	75fb      	strb	r3, [r7, #23]
          break;
 8007984:	e004      	b.n	8007990 <USBD_AUDIO_Setup+0x208>
          break;
 8007986:	bf00      	nop
 8007988:	e00a      	b.n	80079a0 <USBD_AUDIO_Setup+0x218>
          break;
 800798a:	bf00      	nop
 800798c:	e008      	b.n	80079a0 <USBD_AUDIO_Setup+0x218>
          break;
 800798e:	bf00      	nop
      }
      break;
 8007990:	e006      	b.n	80079a0 <USBD_AUDIO_Setup+0x218>
    default:
      USBD_CtlError(pdev, req);
 8007992:	6839      	ldr	r1, [r7, #0]
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	f001 fc7a 	bl	800928e <USBD_CtlError>
      ret = USBD_FAIL;
 800799a:	2303      	movs	r3, #3
 800799c:	75fb      	strb	r3, [r7, #23]
      break;
 800799e:	bf00      	nop
  }

  return (uint8_t)ret;
 80079a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80079a2:	4618      	mov	r0, r3
 80079a4:	3718      	adds	r7, #24
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd80      	pop	{r7, pc}
 80079aa:	bf00      	nop

080079ac <USBD_AUDIO_GetCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_AUDIO_GetCfgDesc(uint16_t *length)
{
 80079ac:	b480      	push	{r7}
 80079ae:	b083      	sub	sp, #12
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_AUDIO_CfgDesc);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	22a4      	movs	r2, #164	@ 0xa4
 80079b8:	801a      	strh	r2, [r3, #0]

  return USBD_AUDIO_CfgDesc;
 80079ba:	4b03      	ldr	r3, [pc, #12]	@ (80079c8 <USBD_AUDIO_GetCfgDesc+0x1c>)
}
 80079bc:	4618      	mov	r0, r3
 80079be:	370c      	adds	r7, #12
 80079c0:	46bd      	mov	sp, r7
 80079c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c6:	4770      	bx	lr
 80079c8:	2000005c 	.word	0x2000005c

080079cc <USBD_AUDIO_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80079cc:	b480      	push	{r7}
 80079ce:	b083      	sub	sp, #12
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
 80079d4:	460b      	mov	r3, r1
 80079d6:	70fb      	strb	r3, [r7, #3]
  UNUSED(pdev);
  UNUSED(epnum);

  /* Only OUT data are processed */
  return (uint8_t)USBD_OK;
 80079d8:	2300      	movs	r3, #0
}
 80079da:	4618      	mov	r0, r3
 80079dc:	370c      	adds	r7, #12
 80079de:	46bd      	mov	sp, r7
 80079e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e4:	4770      	bx	lr

080079e6 <USBD_AUDIO_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_AUDIO_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80079e6:	b580      	push	{r7, lr}
 80079e8:	b084      	sub	sp, #16
 80079ea:	af00      	add	r7, sp, #0
 80079ec:	6078      	str	r0, [r7, #4]
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	32b0      	adds	r2, #176	@ 0xb0
 80079f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079fc:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d101      	bne.n	8007a08 <USBD_AUDIO_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007a04:	2303      	movs	r3, #3
 8007a06:	e054      	b.n	8007ab2 <USBD_AUDIO_EP0_RxReady+0xcc>
  }

  if (haudio->control.cmd == AUDIO_REQ_SET_CUR)
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 8007a0e:	f893 3c51 	ldrb.w	r3, [r3, #3153]	@ 0xc51
 8007a12:	2b01      	cmp	r3, #1
 8007a14:	d14c      	bne.n	8007ab0 <USBD_AUDIO_EP0_RxReady+0xca>
  {
    /* In this driver, to simplify code, only SET_CUR request is managed */

    if (haudio->control.unit == AUDIO_OUT_STREAMING_CTRL)
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 8007a1c:	f893 3c93 	ldrb.w	r3, [r3, #3219]	@ 0xc93
 8007a20:	2b02      	cmp	r3, #2
 8007a22:	d11b      	bne.n	8007a5c <USBD_AUDIO_EP0_RxReady+0x76>
    {
      ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->MuteCtl(haudio->control.data[0]);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007a2a:	687a      	ldr	r2, [r7, #4]
 8007a2c:	33b0      	adds	r3, #176	@ 0xb0
 8007a2e:	009b      	lsls	r3, r3, #2
 8007a30:	4413      	add	r3, r2
 8007a32:	685b      	ldr	r3, [r3, #4]
 8007a34:	691b      	ldr	r3, [r3, #16]
 8007a36:	68fa      	ldr	r2, [r7, #12]
 8007a38:	f502 42a0 	add.w	r2, r2, #20480	@ 0x5000
 8007a3c:	f892 2c52 	ldrb.w	r2, [r2, #3154]	@ 0xc52
 8007a40:	4610      	mov	r0, r2
 8007a42:	4798      	blx	r3
      haudio->control.cmd = 0U;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	f883 2c51 	strb.w	r2, [r3, #3153]	@ 0xc51
      haudio->control.len = 0U;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 8007a56:	2200      	movs	r2, #0
 8007a58:	f883 2c92 	strb.w	r2, [r3, #3218]	@ 0xc92
    }

    if (haudio->control.unit == 0U && haudio->control.len == 3U){
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 8007a62:	f893 3c93 	ldrb.w	r3, [r3, #3219]	@ 0xc93
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d122      	bne.n	8007ab0 <USBD_AUDIO_EP0_RxReady+0xca>
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 8007a70:	f893 3c92 	ldrb.w	r3, [r3, #3218]	@ 0xc92
 8007a74:	2b03      	cmp	r3, #3
 8007a76:	d11b      	bne.n	8007ab0 <USBD_AUDIO_EP0_RxReady+0xca>
    	haudio->freq = (haudio->control.data[2] << 16) + (haudio->control.data[1] << 8) + haudio->control.data[0];
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 8007a7e:	f893 3c54 	ldrb.w	r3, [r3, #3156]	@ 0xc54
 8007a82:	041a      	lsls	r2, r3, #16
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 8007a8a:	f893 3c53 	ldrb.w	r3, [r3, #3155]	@ 0xc53
 8007a8e:	021b      	lsls	r3, r3, #8
 8007a90:	4413      	add	r3, r2
 8007a92:	68fa      	ldr	r2, [r7, #12]
 8007a94:	f502 42a0 	add.w	r2, r2, #20480	@ 0x5000
 8007a98:	f892 2c52 	ldrb.w	r2, [r2, #3154]	@ 0xc52
 8007a9c:	4413      	add	r3, r2
 8007a9e:	461a      	mov	r2, r3
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 8007aa6:	f8c3 2c4c 	str.w	r2, [r3, #3148]	@ 0xc4c
    	resetPlay(pdev);
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f000 f9ba 	bl	8007e24 <resetPlay>
    }
  }

  return (uint8_t)USBD_OK;
 8007ab0:	2300      	movs	r3, #0
}
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	3710      	adds	r7, #16
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	bd80      	pop	{r7, pc}

08007aba <USBD_AUDIO_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_AUDIO_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 8007aba:	b480      	push	{r7}
 8007abc:	b083      	sub	sp, #12
 8007abe:	af00      	add	r7, sp, #0
 8007ac0:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  /* Only OUT control data are processed */
  return (uint8_t)USBD_OK;
 8007ac2:	2300      	movs	r3, #0
}
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	370c      	adds	r7, #12
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ace:	4770      	bx	lr

08007ad0 <USBD_AUDIO_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_AUDIO_SOF(USBD_HandleTypeDef *pdev)
{
 8007ad0:	b480      	push	{r7}
 8007ad2:	b083      	sub	sp, #12
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 8007ad8:	2300      	movs	r3, #0
}
 8007ada:	4618      	mov	r0, r3
 8007adc:	370c      	adds	r7, #12
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae4:	4770      	bx	lr

08007ae6 <USBD_AUDIO_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_IsoINIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007ae6:	b480      	push	{r7}
 8007ae8:	b083      	sub	sp, #12
 8007aea:	af00      	add	r7, sp, #0
 8007aec:	6078      	str	r0, [r7, #4]
 8007aee:	460b      	mov	r3, r1
 8007af0:	70fb      	strb	r3, [r7, #3]
  UNUSED(pdev);
  UNUSED(epnum);

  return (uint8_t)USBD_OK;
 8007af2:	2300      	movs	r3, #0
}
 8007af4:	4618      	mov	r0, r3
 8007af6:	370c      	adds	r7, #12
 8007af8:	46bd      	mov	sp, r7
 8007afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afe:	4770      	bx	lr

08007b00 <USBD_AUDIO_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_IsoOutIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b084      	sub	sp, #16
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
 8007b08:	460b      	mov	r3, r1
 8007b0a:	70fb      	strb	r3, [r7, #3]
  USBD_AUDIO_HandleTypeDef *haudio;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	32b0      	adds	r2, #176	@ 0xb0
 8007b16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d101      	bne.n	8007b22 <USBD_AUDIO_IsoOutIncomplete+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007b1e:	2303      	movs	r3, #3
 8007b20:	e017      	b.n	8007b52 <USBD_AUDIO_IsoOutIncomplete+0x52>
  }

  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	32b0      	adds	r2, #176	@ 0xb0
 8007b2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b30:	60fb      	str	r3, [r7, #12]

  /* Prepare Out endpoint to receive next audio packet */
  (void)USBD_LL_PrepareReceive(pdev, epnum,
                               &haudio->buffer[haudio->wr_ptr],
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 8007b38:	f8b3 3c48 	ldrh.w	r3, [r3, #3144]	@ 0xc48
 8007b3c:	461a      	mov	r2, r3
  (void)USBD_LL_PrepareReceive(pdev, epnum,
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	4413      	add	r3, r2
 8007b42:	1d1a      	adds	r2, r3, #4
 8007b44:	78f9      	ldrb	r1, [r7, #3]
 8007b46:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f002 f9d9 	bl	8009f02 <USBD_LL_PrepareReceive>
                               AUDIO_OUT_PACKET);

  return (uint8_t)USBD_OK;
 8007b50:	2300      	movs	r3, #0
}
 8007b52:	4618      	mov	r0, r3
 8007b54:	3710      	adds	r7, #16
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bd80      	pop	{r7, pc}
	...

08007b5c <USBD_AUDIO_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b084      	sub	sp, #16
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
 8007b64:	460b      	mov	r3, r1
 8007b66:	70fb      	strb	r3, [r7, #3]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  AUDIOOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_ISOC, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	32b0      	adds	r2, #176	@ 0xb0
 8007b72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b76:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d101      	bne.n	8007b82 <USBD_AUDIO_DataOut+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007b7e:	2303      	movs	r3, #3
 8007b80:	e07d      	b.n	8007c7e <USBD_AUDIO_DataOut+0x122>
  }

  if (epnum == AUDIOOutEpAdd)
 8007b82:	4b41      	ldr	r3, [pc, #260]	@ (8007c88 <USBD_AUDIO_DataOut+0x12c>)
 8007b84:	781b      	ldrb	r3, [r3, #0]
 8007b86:	78fa      	ldrb	r2, [r7, #3]
 8007b88:	429a      	cmp	r2, r3
 8007b8a:	d177      	bne.n	8007c7c <USBD_AUDIO_DataOut+0x120>
  {
    /* Get received data packet length */
    PacketSize = (uint16_t)USBD_LL_GetRxDataSize(pdev, epnum);
 8007b8c:	78fb      	ldrb	r3, [r7, #3]
 8007b8e:	4619      	mov	r1, r3
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	f002 f9d7 	bl	8009f44 <USBD_LL_GetRxDataSize>
 8007b96:	4603      	mov	r3, r0
 8007b98:	817b      	strh	r3, [r7, #10]

    /* Packet received Callback */
    ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->PeriodicTC(&haudio->buffer[haudio->wr_ptr],
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007ba0:	687a      	ldr	r2, [r7, #4]
 8007ba2:	33b0      	adds	r3, #176	@ 0xb0
 8007ba4:	009b      	lsls	r3, r3, #2
 8007ba6:	4413      	add	r3, r2
 8007ba8:	685b      	ldr	r3, [r3, #4]
 8007baa:	695b      	ldr	r3, [r3, #20]
 8007bac:	68fa      	ldr	r2, [r7, #12]
 8007bae:	f502 42a0 	add.w	r2, r2, #20480	@ 0x5000
 8007bb2:	f8b2 2c48 	ldrh.w	r2, [r2, #3144]	@ 0xc48
 8007bb6:	4611      	mov	r1, r2
 8007bb8:	68fa      	ldr	r2, [r7, #12]
 8007bba:	440a      	add	r2, r1
 8007bbc:	1d10      	adds	r0, r2, #4
 8007bbe:	8979      	ldrh	r1, [r7, #10]
 8007bc0:	2201      	movs	r2, #1
 8007bc2:	4798      	blx	r3
                                                                          PacketSize, AUDIO_OUT_TC);

    /* Increment the Buffer pointer or roll it back when all buffers are full */
    haudio->wr_ptr += PacketSize;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 8007bca:	f8b3 2c48 	ldrh.w	r2, [r3, #3144]	@ 0xc48
 8007bce:	897b      	ldrh	r3, [r7, #10]
 8007bd0:	4413      	add	r3, r2
 8007bd2:	b29a      	uxth	r2, r3
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 8007bda:	f8a3 2c48 	strh.w	r2, [r3, #3144]	@ 0xc48

    if (haudio->wr_ptr >= AUDIO_TOTAL_BUF_SIZE)
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 8007be4:	f8b3 3c48 	ldrh.w	r3, [r3, #3144]	@ 0xc48
 8007be8:	f5b3 4fb4 	cmp.w	r3, #23040	@ 0x5a00
 8007bec:	d321      	bcc.n	8007c32 <USBD_AUDIO_DataOut+0xd6>
    {
      /* All buffers are full: roll back */
      haudio->wr_ptr = 0U;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	f8a3 2c48 	strh.w	r2, [r3, #3144]	@ 0xc48

      if (haudio->offset == AUDIO_OFFSET_UNKNOWN)
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 8007c00:	f893 3c44 	ldrb.w	r3, [r3, #3140]	@ 0xc44
 8007c04:	2b03      	cmp	r3, #3
 8007c06:	d114      	bne.n	8007c32 <USBD_AUDIO_DataOut+0xd6>
      {
        ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->AudioCmd(&haudio->buffer[0],
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007c0e:	687a      	ldr	r2, [r7, #4]
 8007c10:	33b0      	adds	r3, #176	@ 0xb0
 8007c12:	009b      	lsls	r3, r3, #2
 8007c14:	4413      	add	r3, r2
 8007c16:	685b      	ldr	r3, [r3, #4]
 8007c18:	689b      	ldr	r3, [r3, #8]
 8007c1a:	68fa      	ldr	r2, [r7, #12]
 8007c1c:	1d10      	adds	r0, r2, #4
 8007c1e:	2201      	movs	r2, #1
 8007c20:	f44f 5134 	mov.w	r1, #11520	@ 0x2d00
 8007c24:	4798      	blx	r3
                                                                            AUDIO_TOTAL_BUF_SIZE / 2U,
                                                                            AUDIO_CMD_START);
        haudio->offset = AUDIO_OFFSET_NONE;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	f883 2c44 	strb.w	r2, [r3, #3140]	@ 0xc44
      }
    }

    if (haudio->rd_enable == 0U)
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 8007c38:	f893 3c45 	ldrb.w	r3, [r3, #3141]	@ 0xc45
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d10d      	bne.n	8007c5c <USBD_AUDIO_DataOut+0x100>
    {
      if (haudio->wr_ptr == (AUDIO_TOTAL_BUF_SIZE / 2U))
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 8007c46:	f8b3 3c48 	ldrh.w	r3, [r3, #3144]	@ 0xc48
 8007c4a:	f5b3 5f34 	cmp.w	r3, #11520	@ 0x2d00
 8007c4e:	d105      	bne.n	8007c5c <USBD_AUDIO_DataOut+0x100>
      {
        haudio->rd_enable = 1U;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 8007c56:	2201      	movs	r2, #1
 8007c58:	f883 2c45 	strb.w	r2, [r3, #3141]	@ 0xc45
      }
    }

    /* Prepare Out endpoint to receive next audio packet */
    (void)USBD_LL_PrepareReceive(pdev, AUDIOOutEpAdd,
 8007c5c:	4b0a      	ldr	r3, [pc, #40]	@ (8007c88 <USBD_AUDIO_DataOut+0x12c>)
 8007c5e:	7819      	ldrb	r1, [r3, #0]
                                 &haudio->buffer[haudio->wr_ptr],
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 8007c66:	f8b3 3c48 	ldrh.w	r3, [r3, #3144]	@ 0xc48
 8007c6a:	461a      	mov	r2, r3
    (void)USBD_LL_PrepareReceive(pdev, AUDIOOutEpAdd,
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	4413      	add	r3, r2
 8007c70:	1d1a      	adds	r2, r3, #4
 8007c72:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	f002 f943 	bl	8009f02 <USBD_LL_PrepareReceive>
                                 AUDIO_OUT_PACKET);
  }

  return (uint8_t)USBD_OK;
 8007c7c:	2300      	movs	r3, #0
}
 8007c7e:	4618      	mov	r0, r3
 8007c80:	3710      	adds	r7, #16
 8007c82:	46bd      	mov	sp, r7
 8007c84:	bd80      	pop	{r7, pc}
 8007c86:	bf00      	nop
 8007c88:	2000010a 	.word	0x2000010a

08007c8c <AUDIO_REQ_GetCurrent>:
  * @param  pdev: device instance
  * @param  req: setup class request
  * @retval status
  */
static void AUDIO_REQ_GetCurrent(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b084      	sub	sp, #16
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
 8007c94:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	32b0      	adds	r2, #176	@ 0xb0
 8007ca0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ca4:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d017      	beq.n	8007cdc <AUDIO_REQ_GetCurrent+0x50>
  {
    return;
  }

  (void)USBD_memset(haudio->control.data, 0, USB_MAX_EP0_SIZE);
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	f503 43b8 	add.w	r3, r3, #23552	@ 0x5c00
 8007cb2:	3352      	adds	r3, #82	@ 0x52
 8007cb4:	2240      	movs	r2, #64	@ 0x40
 8007cb6:	2100      	movs	r1, #0
 8007cb8:	4618      	mov	r0, r3
 8007cba:	f002 fb70 	bl	800a39e <memset>

  /* Send the current mute state */
  (void)USBD_CtlSendData(pdev, haudio->control.data,
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	f503 43b8 	add.w	r3, r3, #23552	@ 0x5c00
 8007cc4:	3352      	adds	r3, #82	@ 0x52
                         MIN(req->wLength, USB_MAX_EP0_SIZE));
 8007cc6:	683a      	ldr	r2, [r7, #0]
 8007cc8:	88d2      	ldrh	r2, [r2, #6]
 8007cca:	2a40      	cmp	r2, #64	@ 0x40
 8007ccc:	bf28      	it	cs
 8007cce:	2240      	movcs	r2, #64	@ 0x40
 8007cd0:	b292      	uxth	r2, r2
  (void)USBD_CtlSendData(pdev, haudio->control.data,
 8007cd2:	4619      	mov	r1, r3
 8007cd4:	6878      	ldr	r0, [r7, #4]
 8007cd6:	f001 fb57 	bl	8009388 <USBD_CtlSendData>
 8007cda:	e000      	b.n	8007cde <AUDIO_REQ_GetCurrent+0x52>
    return;
 8007cdc:	bf00      	nop
}
 8007cde:	3710      	adds	r7, #16
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bd80      	pop	{r7, pc}

08007ce4 <AUDIO_REQ_SetCurrent>:
  * @param  pdev: device instance
  * @param  req: setup class request
  * @retval status
  */
static void AUDIO_REQ_SetCurrent(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b084      	sub	sp, #16
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
 8007cec:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	32b0      	adds	r2, #176	@ 0xb0
 8007cf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cfc:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d02f      	beq.n	8007d64 <AUDIO_REQ_SetCurrent+0x80>
  {
    return;
  }

  if (req->wLength != 0U)
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	88db      	ldrh	r3, [r3, #6]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d02c      	beq.n	8007d66 <AUDIO_REQ_SetCurrent+0x82>
  {
    haudio->control.cmd = AUDIO_REQ_SET_CUR;     /* Set the request value */
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 8007d12:	2201      	movs	r2, #1
 8007d14:	f883 2c51 	strb.w	r2, [r3, #3153]	@ 0xc51
    haudio->control.len = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);  /* Set the request data length */
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	88db      	ldrh	r3, [r3, #6]
 8007d1c:	2b3f      	cmp	r3, #63	@ 0x3f
 8007d1e:	d803      	bhi.n	8007d28 <AUDIO_REQ_SetCurrent+0x44>
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	88db      	ldrh	r3, [r3, #6]
 8007d24:	b2da      	uxtb	r2, r3
 8007d26:	e000      	b.n	8007d2a <AUDIO_REQ_SetCurrent+0x46>
 8007d28:	2240      	movs	r2, #64	@ 0x40
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 8007d30:	f883 2c92 	strb.w	r2, [r3, #3218]	@ 0xc92
    haudio->control.unit = HIBYTE(req->wIndex);  /* Set the request target unit */
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	889b      	ldrh	r3, [r3, #4]
 8007d38:	0a1b      	lsrs	r3, r3, #8
 8007d3a:	b29b      	uxth	r3, r3
 8007d3c:	b2da      	uxtb	r2, r3
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 8007d44:	f883 2c93 	strb.w	r2, [r3, #3219]	@ 0xc93

    /* Prepare the reception of the buffer over EP0 */
    (void)USBD_CtlPrepareRx(pdev, haudio->control.data, haudio->control.len);
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	f503 43b8 	add.w	r3, r3, #23552	@ 0x5c00
 8007d4e:	3352      	adds	r3, #82	@ 0x52
 8007d50:	68fa      	ldr	r2, [r7, #12]
 8007d52:	f502 42a0 	add.w	r2, r2, #20480	@ 0x5000
 8007d56:	f892 2c92 	ldrb.w	r2, [r2, #3218]	@ 0xc92
 8007d5a:	4619      	mov	r1, r3
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	f001 fb3f 	bl	80093e0 <USBD_CtlPrepareRx>
 8007d62:	e000      	b.n	8007d66 <AUDIO_REQ_SetCurrent+0x82>
    return;
 8007d64:	bf00      	nop
  }
}
 8007d66:	3710      	adds	r7, #16
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	bd80      	pop	{r7, pc}

08007d6c <USBD_AUDIO_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_AUDIO_GetDeviceQualifierDesc(uint16_t *length)
{
 8007d6c:	b480      	push	{r7}
 8007d6e:	b083      	sub	sp, #12
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_AUDIO_DeviceQualifierDesc);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	220a      	movs	r2, #10
 8007d78:	801a      	strh	r2, [r3, #0]

  return USBD_AUDIO_DeviceQualifierDesc;
 8007d7a:	4b03      	ldr	r3, [pc, #12]	@ (8007d88 <USBD_AUDIO_GetDeviceQualifierDesc+0x1c>)
}
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	370c      	adds	r7, #12
 8007d80:	46bd      	mov	sp, r7
 8007d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d86:	4770      	bx	lr
 8007d88:	20000100 	.word	0x20000100

08007d8c <USBD_AUDIO_RegisterInterface>:
  * @param  fops: Audio interface callback
  * @retval status
  */
uint8_t USBD_AUDIO_RegisterInterface(USBD_HandleTypeDef *pdev,
                                     USBD_AUDIO_ItfTypeDef *fops)
{
 8007d8c:	b480      	push	{r7}
 8007d8e:	b083      	sub	sp, #12
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
 8007d94:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d101      	bne.n	8007da0 <USBD_AUDIO_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007d9c:	2303      	movs	r3, #3
 8007d9e:	e009      	b.n	8007db4 <USBD_AUDIO_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007da6:	687a      	ldr	r2, [r7, #4]
 8007da8:	33b0      	adds	r3, #176	@ 0xb0
 8007daa:	009b      	lsls	r3, r3, #2
 8007dac:	4413      	add	r3, r2
 8007dae:	683a      	ldr	r2, [r7, #0]
 8007db0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007db2:	2300      	movs	r3, #0
}
 8007db4:	4618      	mov	r0, r3
 8007db6:	370c      	adds	r7, #12
 8007db8:	46bd      	mov	sp, r7
 8007dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbe:	4770      	bx	lr

08007dc0 <USBD_AUDIO_GetAudioHeaderDesc>:
  * @param  pdev: device instance
  * @param  pConfDesc:  pointer to Bos descriptor
  * @retval pointer to the Audio AC Header descriptor
  */
static void *USBD_AUDIO_GetAudioHeaderDesc(uint8_t *pConfDesc)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b086      	sub	sp, #24
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	60fb      	str	r3, [r7, #12]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	617b      	str	r3, [r7, #20]
  uint8_t *pAudioDesc =  NULL;
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	885b      	ldrh	r3, [r3, #2]
 8007dd8:	b29b      	uxth	r3, r3
 8007dda:	68fa      	ldr	r2, [r7, #12]
 8007ddc:	7812      	ldrb	r2, [r2, #0]
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d91b      	bls.n	8007e1a <USBD_AUDIO_GetAudioHeaderDesc+0x5a>
  {
    ptr = desc->bLength;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	781b      	ldrb	r3, [r3, #0]
 8007de6:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007de8:	e011      	b.n	8007e0e <USBD_AUDIO_GetAudioHeaderDesc+0x4e>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007dea:	f107 030a 	add.w	r3, r7, #10
 8007dee:	4619      	mov	r1, r3
 8007df0:	6978      	ldr	r0, [r7, #20]
 8007df2:	f000 fc4e 	bl	8008692 <USBD_GetNextDesc>
 8007df6:	6178      	str	r0, [r7, #20]
      if ((pdesc->bDescriptorType == AUDIO_INTERFACE_DESCRIPTOR_TYPE) &&
 8007df8:	697b      	ldr	r3, [r7, #20]
 8007dfa:	785b      	ldrb	r3, [r3, #1]
 8007dfc:	2b24      	cmp	r3, #36	@ 0x24
 8007dfe:	d106      	bne.n	8007e0e <USBD_AUDIO_GetAudioHeaderDesc+0x4e>
          (pdesc->bDescriptorSubType == AUDIO_CONTROL_HEADER))
 8007e00:	697b      	ldr	r3, [r7, #20]
 8007e02:	789b      	ldrb	r3, [r3, #2]
      if ((pdesc->bDescriptorType == AUDIO_INTERFACE_DESCRIPTOR_TYPE) &&
 8007e04:	2b01      	cmp	r3, #1
 8007e06:	d102      	bne.n	8007e0e <USBD_AUDIO_GetAudioHeaderDesc+0x4e>
      {
        pAudioDesc = (uint8_t *)pdesc;
 8007e08:	697b      	ldr	r3, [r7, #20]
 8007e0a:	613b      	str	r3, [r7, #16]
        break;
 8007e0c:	e005      	b.n	8007e1a <USBD_AUDIO_GetAudioHeaderDesc+0x5a>
    while (ptr < desc->wTotalLength)
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	885b      	ldrh	r3, [r3, #2]
 8007e12:	b29a      	uxth	r2, r3
 8007e14:	897b      	ldrh	r3, [r7, #10]
 8007e16:	429a      	cmp	r2, r3
 8007e18:	d8e7      	bhi.n	8007dea <USBD_AUDIO_GetAudioHeaderDesc+0x2a>
      }
    }
  }
  return pAudioDesc;
 8007e1a:	693b      	ldr	r3, [r7, #16]
}
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	3718      	adds	r7, #24
 8007e20:	46bd      	mov	sp, r7
 8007e22:	bd80      	pop	{r7, pc}

08007e24 <resetPlay>:


static void resetPlay(USBD_HandleTypeDef* pdev){
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b084      	sub	sp, #16
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]

	USBD_AUDIO_HandleTypeDef *haudio;
	haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	32b0      	adds	r2, #176	@ 0xb0
 8007e36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e3a:	60fb      	str	r3, [r7, #12]

	haudio->offset = AUDIO_OFFSET_UNKNOWN;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 8007e42:	2203      	movs	r2, #3
 8007e44:	f883 2c44 	strb.w	r2, [r3, #3140]	@ 0xc44
	haudio->rd_enable = 0U;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 8007e4e:	2200      	movs	r2, #0
 8007e50:	f883 2c45 	strb.w	r2, [r3, #3141]	@ 0xc45
	haudio->rd_ptr = 0U;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	f8a3 2c46 	strh.w	r2, [r3, #3142]	@ 0xc46
	haudio->wr_ptr = 0U;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 8007e66:	2200      	movs	r2, #0
 8007e68:	f8a3 2c48 	strh.w	r2, [r3, #3144]	@ 0xc48

	USBD_LL_FlushEP(pdev, AUDIO_OUT_EP);
 8007e6c:	2101      	movs	r1, #1
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f001 ff7e 	bl	8009d70 <USBD_LL_FlushEP>

	((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit(0U);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007e7a:	687a      	ldr	r2, [r7, #4]
 8007e7c:	33b0      	adds	r3, #176	@ 0xb0
 8007e7e:	009b      	lsls	r3, r3, #2
 8007e80:	4413      	add	r3, r2
 8007e82:	685b      	ldr	r3, [r3, #4]
 8007e84:	685b      	ldr	r3, [r3, #4]
 8007e86:	2000      	movs	r0, #0
 8007e88:	4798      	blx	r3
	((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init(haudio->freq, AUDIO_DEFAULT_VOLUME, haudio->bit_depth);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007e90:	687a      	ldr	r2, [r7, #4]
 8007e92:	33b0      	adds	r3, #176	@ 0xb0
 8007e94:	009b      	lsls	r3, r3, #2
 8007e96:	4413      	add	r3, r2
 8007e98:	685b      	ldr	r3, [r3, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	68fa      	ldr	r2, [r7, #12]
 8007e9e:	f502 42a0 	add.w	r2, r2, #20480	@ 0x5000
 8007ea2:	f8d2 0c4c 	ldr.w	r0, [r2, #3148]	@ 0xc4c
 8007ea6:	68fa      	ldr	r2, [r7, #12]
 8007ea8:	f502 42a0 	add.w	r2, r2, #20480	@ 0x5000
 8007eac:	f892 2c50 	ldrb.w	r2, [r2, #3152]	@ 0xc50
 8007eb0:	2146      	movs	r1, #70	@ 0x46
 8007eb2:	4798      	blx	r3
}
 8007eb4:	bf00      	nop
 8007eb6:	3710      	adds	r7, #16
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	bd80      	pop	{r7, pc}

08007ebc <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b086      	sub	sp, #24
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	60f8      	str	r0, [r7, #12]
 8007ec4:	60b9      	str	r1, [r7, #8]
 8007ec6:	4613      	mov	r3, r2
 8007ec8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d10a      	bne.n	8007ee6 <USBD_Init+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
 8007ed0:	4817      	ldr	r0, [pc, #92]	@ (8007f30 <USBD_Init+0x74>)
 8007ed2:	f002 fa07 	bl	800a2e4 <iprintf>
 8007ed6:	4817      	ldr	r0, [pc, #92]	@ (8007f34 <USBD_Init+0x78>)
 8007ed8:	f002 fa04 	bl	800a2e4 <iprintf>
 8007edc:	200a      	movs	r0, #10
 8007ede:	f002 fa13 	bl	800a308 <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007ee2:	2303      	movs	r3, #3
 8007ee4:	e01f      	b.n	8007f26 <USBD_Init+0x6a>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	2200      	movs	r2, #0
 8007eea:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	2200      	movs	r2, #0
 8007efa:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007efe:	68bb      	ldr	r3, [r7, #8]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d003      	beq.n	8007f0c <USBD_Init+0x50>
  {
    pdev->pDesc = pdesc;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	68ba      	ldr	r2, [r7, #8]
 8007f08:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	2201      	movs	r2, #1
 8007f10:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	79fa      	ldrb	r2, [r7, #7]
 8007f18:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007f1a:	68f8      	ldr	r0, [r7, #12]
 8007f1c:	f001 fe7c 	bl	8009c18 <USBD_LL_Init>
 8007f20:	4603      	mov	r3, r0
 8007f22:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007f24:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f26:	4618      	mov	r0, r3
 8007f28:	3718      	adds	r7, #24
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	bd80      	pop	{r7, pc}
 8007f2e:	bf00      	nop
 8007f30:	0800aef4 	.word	0x0800aef4
 8007f34:	0800aefc 	.word	0x0800aefc

08007f38 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b084      	sub	sp, #16
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
 8007f40:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007f42:	2300      	movs	r3, #0
 8007f44:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d10a      	bne.n	8007f62 <USBD_RegisterClass+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
 8007f4c:	481a      	ldr	r0, [pc, #104]	@ (8007fb8 <USBD_RegisterClass+0x80>)
 8007f4e:	f002 f9c9 	bl	800a2e4 <iprintf>
 8007f52:	481a      	ldr	r0, [pc, #104]	@ (8007fbc <USBD_RegisterClass+0x84>)
 8007f54:	f002 f9c6 	bl	800a2e4 <iprintf>
 8007f58:	200a      	movs	r0, #10
 8007f5a:	f002 f9d5 	bl	800a308 <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007f5e:	2303      	movs	r3, #3
 8007f60:	e025      	b.n	8007fae <USBD_RegisterClass+0x76>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	683a      	ldr	r2, [r7, #0]
 8007f66:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	32ae      	adds	r2, #174	@ 0xae
 8007f74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d00f      	beq.n	8007f9e <USBD_RegisterClass+0x66>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	32ae      	adds	r2, #174	@ 0xae
 8007f88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f8e:	f107 020e 	add.w	r2, r7, #14
 8007f92:	4610      	mov	r0, r2
 8007f94:	4798      	blx	r3
 8007f96:	4602      	mov	r2, r0
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8007fa4:	1c5a      	adds	r2, r3, #1
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8007fac:	2300      	movs	r3, #0
}
 8007fae:	4618      	mov	r0, r3
 8007fb0:	3710      	adds	r7, #16
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}
 8007fb6:	bf00      	nop
 8007fb8:	0800aef4 	.word	0x0800aef4
 8007fbc:	0800af14 	.word	0x0800af14

08007fc0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b082      	sub	sp, #8
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007fc8:	6878      	ldr	r0, [r7, #4]
 8007fca:	f001 fe71 	bl	8009cb0 <USBD_LL_Start>
 8007fce:	4603      	mov	r3, r0
}
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	3708      	adds	r7, #8
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	bd80      	pop	{r7, pc}

08007fd8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007fd8:	b480      	push	{r7}
 8007fda:	b083      	sub	sp, #12
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007fe0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	370c      	adds	r7, #12
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fec:	4770      	bx	lr

08007fee <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007fee:	b580      	push	{r7, lr}
 8007ff0:	b084      	sub	sp, #16
 8007ff2:	af00      	add	r7, sp, #0
 8007ff4:	6078      	str	r0, [r7, #4]
 8007ff6:	460b      	mov	r3, r1
 8007ff8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008004:	2b00      	cmp	r3, #0
 8008006:	d009      	beq.n	800801c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	78fa      	ldrb	r2, [r7, #3]
 8008012:	4611      	mov	r1, r2
 8008014:	6878      	ldr	r0, [r7, #4]
 8008016:	4798      	blx	r3
 8008018:	4603      	mov	r3, r0
 800801a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800801c:	7bfb      	ldrb	r3, [r7, #15]
}
 800801e:	4618      	mov	r0, r3
 8008020:	3710      	adds	r7, #16
 8008022:	46bd      	mov	sp, r7
 8008024:	bd80      	pop	{r7, pc}

08008026 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008026:	b580      	push	{r7, lr}
 8008028:	b084      	sub	sp, #16
 800802a:	af00      	add	r7, sp, #0
 800802c:	6078      	str	r0, [r7, #4]
 800802e:	460b      	mov	r3, r1
 8008030:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008032:	2300      	movs	r3, #0
 8008034:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800803c:	685b      	ldr	r3, [r3, #4]
 800803e:	78fa      	ldrb	r2, [r7, #3]
 8008040:	4611      	mov	r1, r2
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	4798      	blx	r3
 8008046:	4603      	mov	r3, r0
 8008048:	2b00      	cmp	r3, #0
 800804a:	d001      	beq.n	8008050 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800804c:	2303      	movs	r3, #3
 800804e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008050:	7bfb      	ldrb	r3, [r7, #15]
}
 8008052:	4618      	mov	r0, r3
 8008054:	3710      	adds	r7, #16
 8008056:	46bd      	mov	sp, r7
 8008058:	bd80      	pop	{r7, pc}

0800805a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800805a:	b580      	push	{r7, lr}
 800805c:	b084      	sub	sp, #16
 800805e:	af00      	add	r7, sp, #0
 8008060:	6078      	str	r0, [r7, #4]
 8008062:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800806a:	6839      	ldr	r1, [r7, #0]
 800806c:	4618      	mov	r0, r3
 800806e:	f001 f8d4 	bl	800921a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2201      	movs	r2, #1
 8008076:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8008080:	461a      	mov	r2, r3
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800808e:	f003 031f 	and.w	r3, r3, #31
 8008092:	2b02      	cmp	r3, #2
 8008094:	d01a      	beq.n	80080cc <USBD_LL_SetupStage+0x72>
 8008096:	2b02      	cmp	r3, #2
 8008098:	d822      	bhi.n	80080e0 <USBD_LL_SetupStage+0x86>
 800809a:	2b00      	cmp	r3, #0
 800809c:	d002      	beq.n	80080a4 <USBD_LL_SetupStage+0x4a>
 800809e:	2b01      	cmp	r3, #1
 80080a0:	d00a      	beq.n	80080b8 <USBD_LL_SetupStage+0x5e>
 80080a2:	e01d      	b.n	80080e0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80080aa:	4619      	mov	r1, r3
 80080ac:	6878      	ldr	r0, [r7, #4]
 80080ae:	f000 fb2b 	bl	8008708 <USBD_StdDevReq>
 80080b2:	4603      	mov	r3, r0
 80080b4:	73fb      	strb	r3, [r7, #15]
      break;
 80080b6:	e020      	b.n	80080fa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80080be:	4619      	mov	r1, r3
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	f000 fb93 	bl	80087ec <USBD_StdItfReq>
 80080c6:	4603      	mov	r3, r0
 80080c8:	73fb      	strb	r3, [r7, #15]
      break;
 80080ca:	e016      	b.n	80080fa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80080d2:	4619      	mov	r1, r3
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	f000 fbf5 	bl	80088c4 <USBD_StdEPReq>
 80080da:	4603      	mov	r3, r0
 80080dc:	73fb      	strb	r3, [r7, #15]
      break;
 80080de:	e00c      	b.n	80080fa <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80080e6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80080ea:	b2db      	uxtb	r3, r3
 80080ec:	4619      	mov	r1, r3
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	f001 fe5d 	bl	8009dae <USBD_LL_StallEP>
 80080f4:	4603      	mov	r3, r0
 80080f6:	73fb      	strb	r3, [r7, #15]
      break;
 80080f8:	bf00      	nop
  }

  return ret;
 80080fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80080fc:	4618      	mov	r0, r3
 80080fe:	3710      	adds	r7, #16
 8008100:	46bd      	mov	sp, r7
 8008102:	bd80      	pop	{r7, pc}

08008104 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b086      	sub	sp, #24
 8008108:	af00      	add	r7, sp, #0
 800810a:	60f8      	str	r0, [r7, #12]
 800810c:	460b      	mov	r3, r1
 800810e:	607a      	str	r2, [r7, #4]
 8008110:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008112:	2300      	movs	r3, #0
 8008114:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8008116:	7afb      	ldrb	r3, [r7, #11]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d16e      	bne.n	80081fa <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008122:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800812a:	2b03      	cmp	r3, #3
 800812c:	f040 8098 	bne.w	8008260 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008130:	693b      	ldr	r3, [r7, #16]
 8008132:	689a      	ldr	r2, [r3, #8]
 8008134:	693b      	ldr	r3, [r7, #16]
 8008136:	68db      	ldr	r3, [r3, #12]
 8008138:	429a      	cmp	r2, r3
 800813a:	d913      	bls.n	8008164 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800813c:	693b      	ldr	r3, [r7, #16]
 800813e:	689a      	ldr	r2, [r3, #8]
 8008140:	693b      	ldr	r3, [r7, #16]
 8008142:	68db      	ldr	r3, [r3, #12]
 8008144:	1ad2      	subs	r2, r2, r3
 8008146:	693b      	ldr	r3, [r7, #16]
 8008148:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800814a:	693b      	ldr	r3, [r7, #16]
 800814c:	68da      	ldr	r2, [r3, #12]
 800814e:	693b      	ldr	r3, [r7, #16]
 8008150:	689b      	ldr	r3, [r3, #8]
 8008152:	4293      	cmp	r3, r2
 8008154:	bf28      	it	cs
 8008156:	4613      	movcs	r3, r2
 8008158:	461a      	mov	r2, r3
 800815a:	6879      	ldr	r1, [r7, #4]
 800815c:	68f8      	ldr	r0, [r7, #12]
 800815e:	f001 f95c 	bl	800941a <USBD_CtlContinueRx>
 8008162:	e07d      	b.n	8008260 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800816a:	f003 031f 	and.w	r3, r3, #31
 800816e:	2b02      	cmp	r3, #2
 8008170:	d014      	beq.n	800819c <USBD_LL_DataOutStage+0x98>
 8008172:	2b02      	cmp	r3, #2
 8008174:	d81d      	bhi.n	80081b2 <USBD_LL_DataOutStage+0xae>
 8008176:	2b00      	cmp	r3, #0
 8008178:	d002      	beq.n	8008180 <USBD_LL_DataOutStage+0x7c>
 800817a:	2b01      	cmp	r3, #1
 800817c:	d003      	beq.n	8008186 <USBD_LL_DataOutStage+0x82>
 800817e:	e018      	b.n	80081b2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008180:	2300      	movs	r3, #0
 8008182:	75bb      	strb	r3, [r7, #22]
            break;
 8008184:	e018      	b.n	80081b8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800818c:	b2db      	uxtb	r3, r3
 800818e:	4619      	mov	r1, r3
 8008190:	68f8      	ldr	r0, [r7, #12]
 8008192:	f000 fa64 	bl	800865e <USBD_CoreFindIF>
 8008196:	4603      	mov	r3, r0
 8008198:	75bb      	strb	r3, [r7, #22]
            break;
 800819a:	e00d      	b.n	80081b8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80081a2:	b2db      	uxtb	r3, r3
 80081a4:	4619      	mov	r1, r3
 80081a6:	68f8      	ldr	r0, [r7, #12]
 80081a8:	f000 fa66 	bl	8008678 <USBD_CoreFindEP>
 80081ac:	4603      	mov	r3, r0
 80081ae:	75bb      	strb	r3, [r7, #22]
            break;
 80081b0:	e002      	b.n	80081b8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80081b2:	2300      	movs	r3, #0
 80081b4:	75bb      	strb	r3, [r7, #22]
            break;
 80081b6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80081b8:	7dbb      	ldrb	r3, [r7, #22]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d119      	bne.n	80081f2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80081c4:	b2db      	uxtb	r3, r3
 80081c6:	2b03      	cmp	r3, #3
 80081c8:	d113      	bne.n	80081f2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80081ca:	7dba      	ldrb	r2, [r7, #22]
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	32ae      	adds	r2, #174	@ 0xae
 80081d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081d4:	691b      	ldr	r3, [r3, #16]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d00b      	beq.n	80081f2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80081da:	7dba      	ldrb	r2, [r7, #22]
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80081e2:	7dba      	ldrb	r2, [r7, #22]
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	32ae      	adds	r2, #174	@ 0xae
 80081e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081ec:	691b      	ldr	r3, [r3, #16]
 80081ee:	68f8      	ldr	r0, [r7, #12]
 80081f0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80081f2:	68f8      	ldr	r0, [r7, #12]
 80081f4:	f001 f922 	bl	800943c <USBD_CtlSendStatus>
 80081f8:	e032      	b.n	8008260 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80081fa:	7afb      	ldrb	r3, [r7, #11]
 80081fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008200:	b2db      	uxtb	r3, r3
 8008202:	4619      	mov	r1, r3
 8008204:	68f8      	ldr	r0, [r7, #12]
 8008206:	f000 fa37 	bl	8008678 <USBD_CoreFindEP>
 800820a:	4603      	mov	r3, r0
 800820c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800820e:	7dbb      	ldrb	r3, [r7, #22]
 8008210:	2bff      	cmp	r3, #255	@ 0xff
 8008212:	d025      	beq.n	8008260 <USBD_LL_DataOutStage+0x15c>
 8008214:	7dbb      	ldrb	r3, [r7, #22]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d122      	bne.n	8008260 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008220:	b2db      	uxtb	r3, r3
 8008222:	2b03      	cmp	r3, #3
 8008224:	d117      	bne.n	8008256 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008226:	7dba      	ldrb	r2, [r7, #22]
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	32ae      	adds	r2, #174	@ 0xae
 800822c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008230:	699b      	ldr	r3, [r3, #24]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d00f      	beq.n	8008256 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008236:	7dba      	ldrb	r2, [r7, #22]
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800823e:	7dba      	ldrb	r2, [r7, #22]
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	32ae      	adds	r2, #174	@ 0xae
 8008244:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008248:	699b      	ldr	r3, [r3, #24]
 800824a:	7afa      	ldrb	r2, [r7, #11]
 800824c:	4611      	mov	r1, r2
 800824e:	68f8      	ldr	r0, [r7, #12]
 8008250:	4798      	blx	r3
 8008252:	4603      	mov	r3, r0
 8008254:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008256:	7dfb      	ldrb	r3, [r7, #23]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d001      	beq.n	8008260 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800825c:	7dfb      	ldrb	r3, [r7, #23]
 800825e:	e000      	b.n	8008262 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008260:	2300      	movs	r3, #0
}
 8008262:	4618      	mov	r0, r3
 8008264:	3718      	adds	r7, #24
 8008266:	46bd      	mov	sp, r7
 8008268:	bd80      	pop	{r7, pc}

0800826a <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800826a:	b580      	push	{r7, lr}
 800826c:	b086      	sub	sp, #24
 800826e:	af00      	add	r7, sp, #0
 8008270:	60f8      	str	r0, [r7, #12]
 8008272:	460b      	mov	r3, r1
 8008274:	607a      	str	r2, [r7, #4]
 8008276:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008278:	7afb      	ldrb	r3, [r7, #11]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d16f      	bne.n	800835e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	3314      	adds	r3, #20
 8008282:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800828a:	2b02      	cmp	r3, #2
 800828c:	d15a      	bne.n	8008344 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800828e:	693b      	ldr	r3, [r7, #16]
 8008290:	689a      	ldr	r2, [r3, #8]
 8008292:	693b      	ldr	r3, [r7, #16]
 8008294:	68db      	ldr	r3, [r3, #12]
 8008296:	429a      	cmp	r2, r3
 8008298:	d914      	bls.n	80082c4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800829a:	693b      	ldr	r3, [r7, #16]
 800829c:	689a      	ldr	r2, [r3, #8]
 800829e:	693b      	ldr	r3, [r7, #16]
 80082a0:	68db      	ldr	r3, [r3, #12]
 80082a2:	1ad2      	subs	r2, r2, r3
 80082a4:	693b      	ldr	r3, [r7, #16]
 80082a6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80082a8:	693b      	ldr	r3, [r7, #16]
 80082aa:	689b      	ldr	r3, [r3, #8]
 80082ac:	461a      	mov	r2, r3
 80082ae:	6879      	ldr	r1, [r7, #4]
 80082b0:	68f8      	ldr	r0, [r7, #12]
 80082b2:	f001 f884 	bl	80093be <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80082b6:	2300      	movs	r3, #0
 80082b8:	2200      	movs	r2, #0
 80082ba:	2100      	movs	r1, #0
 80082bc:	68f8      	ldr	r0, [r7, #12]
 80082be:	f001 fe20 	bl	8009f02 <USBD_LL_PrepareReceive>
 80082c2:	e03f      	b.n	8008344 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80082c4:	693b      	ldr	r3, [r7, #16]
 80082c6:	68da      	ldr	r2, [r3, #12]
 80082c8:	693b      	ldr	r3, [r7, #16]
 80082ca:	689b      	ldr	r3, [r3, #8]
 80082cc:	429a      	cmp	r2, r3
 80082ce:	d11c      	bne.n	800830a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80082d0:	693b      	ldr	r3, [r7, #16]
 80082d2:	685a      	ldr	r2, [r3, #4]
 80082d4:	693b      	ldr	r3, [r7, #16]
 80082d6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80082d8:	429a      	cmp	r2, r3
 80082da:	d316      	bcc.n	800830a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80082dc:	693b      	ldr	r3, [r7, #16]
 80082de:	685a      	ldr	r2, [r3, #4]
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80082e6:	429a      	cmp	r2, r3
 80082e8:	d20f      	bcs.n	800830a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80082ea:	2200      	movs	r2, #0
 80082ec:	2100      	movs	r1, #0
 80082ee:	68f8      	ldr	r0, [r7, #12]
 80082f0:	f001 f865 	bl	80093be <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	2200      	movs	r2, #0
 80082f8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80082fc:	2300      	movs	r3, #0
 80082fe:	2200      	movs	r2, #0
 8008300:	2100      	movs	r1, #0
 8008302:	68f8      	ldr	r0, [r7, #12]
 8008304:	f001 fdfd 	bl	8009f02 <USBD_LL_PrepareReceive>
 8008308:	e01c      	b.n	8008344 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008310:	b2db      	uxtb	r3, r3
 8008312:	2b03      	cmp	r3, #3
 8008314:	d10f      	bne.n	8008336 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800831c:	68db      	ldr	r3, [r3, #12]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d009      	beq.n	8008336 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	2200      	movs	r2, #0
 8008326:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008330:	68db      	ldr	r3, [r3, #12]
 8008332:	68f8      	ldr	r0, [r7, #12]
 8008334:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008336:	2180      	movs	r1, #128	@ 0x80
 8008338:	68f8      	ldr	r0, [r7, #12]
 800833a:	f001 fd38 	bl	8009dae <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800833e:	68f8      	ldr	r0, [r7, #12]
 8008340:	f001 f88f 	bl	8009462 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800834a:	2b00      	cmp	r3, #0
 800834c:	d03a      	beq.n	80083c4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800834e:	68f8      	ldr	r0, [r7, #12]
 8008350:	f7ff fe42 	bl	8007fd8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	2200      	movs	r2, #0
 8008358:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800835c:	e032      	b.n	80083c4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800835e:	7afb      	ldrb	r3, [r7, #11]
 8008360:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008364:	b2db      	uxtb	r3, r3
 8008366:	4619      	mov	r1, r3
 8008368:	68f8      	ldr	r0, [r7, #12]
 800836a:	f000 f985 	bl	8008678 <USBD_CoreFindEP>
 800836e:	4603      	mov	r3, r0
 8008370:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008372:	7dfb      	ldrb	r3, [r7, #23]
 8008374:	2bff      	cmp	r3, #255	@ 0xff
 8008376:	d025      	beq.n	80083c4 <USBD_LL_DataInStage+0x15a>
 8008378:	7dfb      	ldrb	r3, [r7, #23]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d122      	bne.n	80083c4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008384:	b2db      	uxtb	r3, r3
 8008386:	2b03      	cmp	r3, #3
 8008388:	d11c      	bne.n	80083c4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800838a:	7dfa      	ldrb	r2, [r7, #23]
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	32ae      	adds	r2, #174	@ 0xae
 8008390:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008394:	695b      	ldr	r3, [r3, #20]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d014      	beq.n	80083c4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800839a:	7dfa      	ldrb	r2, [r7, #23]
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80083a2:	7dfa      	ldrb	r2, [r7, #23]
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	32ae      	adds	r2, #174	@ 0xae
 80083a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083ac:	695b      	ldr	r3, [r3, #20]
 80083ae:	7afa      	ldrb	r2, [r7, #11]
 80083b0:	4611      	mov	r1, r2
 80083b2:	68f8      	ldr	r0, [r7, #12]
 80083b4:	4798      	blx	r3
 80083b6:	4603      	mov	r3, r0
 80083b8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80083ba:	7dbb      	ldrb	r3, [r7, #22]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d001      	beq.n	80083c4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80083c0:	7dbb      	ldrb	r3, [r7, #22]
 80083c2:	e000      	b.n	80083c6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80083c4:	2300      	movs	r3, #0
}
 80083c6:	4618      	mov	r0, r3
 80083c8:	3718      	adds	r7, #24
 80083ca:	46bd      	mov	sp, r7
 80083cc:	bd80      	pop	{r7, pc}

080083ce <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80083ce:	b580      	push	{r7, lr}
 80083d0:	b084      	sub	sp, #16
 80083d2:	af00      	add	r7, sp, #0
 80083d4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80083d6:	2300      	movs	r3, #0
 80083d8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2201      	movs	r2, #1
 80083de:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	2200      	movs	r2, #0
 80083e6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	2200      	movs	r2, #0
 80083ee:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2200      	movs	r2, #0
 80083f4:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2200      	movs	r2, #0
 80083fc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008406:	2b00      	cmp	r3, #0
 8008408:	d014      	beq.n	8008434 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008410:	685b      	ldr	r3, [r3, #4]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d00e      	beq.n	8008434 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800841c:	685b      	ldr	r3, [r3, #4]
 800841e:	687a      	ldr	r2, [r7, #4]
 8008420:	6852      	ldr	r2, [r2, #4]
 8008422:	b2d2      	uxtb	r2, r2
 8008424:	4611      	mov	r1, r2
 8008426:	6878      	ldr	r0, [r7, #4]
 8008428:	4798      	blx	r3
 800842a:	4603      	mov	r3, r0
 800842c:	2b00      	cmp	r3, #0
 800842e:	d001      	beq.n	8008434 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008430:	2303      	movs	r3, #3
 8008432:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008434:	2340      	movs	r3, #64	@ 0x40
 8008436:	2200      	movs	r2, #0
 8008438:	2100      	movs	r1, #0
 800843a:	6878      	ldr	r0, [r7, #4]
 800843c:	f001 fc53 	bl	8009ce6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2201      	movs	r2, #1
 8008444:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2240      	movs	r2, #64	@ 0x40
 800844c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008450:	2340      	movs	r3, #64	@ 0x40
 8008452:	2200      	movs	r2, #0
 8008454:	2180      	movs	r1, #128	@ 0x80
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	f001 fc45 	bl	8009ce6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2201      	movs	r2, #1
 8008460:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2240      	movs	r2, #64	@ 0x40
 8008466:	621a      	str	r2, [r3, #32]

  return ret;
 8008468:	7bfb      	ldrb	r3, [r7, #15]
}
 800846a:	4618      	mov	r0, r3
 800846c:	3710      	adds	r7, #16
 800846e:	46bd      	mov	sp, r7
 8008470:	bd80      	pop	{r7, pc}

08008472 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008472:	b480      	push	{r7}
 8008474:	b083      	sub	sp, #12
 8008476:	af00      	add	r7, sp, #0
 8008478:	6078      	str	r0, [r7, #4]
 800847a:	460b      	mov	r3, r1
 800847c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	78fa      	ldrb	r2, [r7, #3]
 8008482:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008484:	2300      	movs	r3, #0
}
 8008486:	4618      	mov	r0, r3
 8008488:	370c      	adds	r7, #12
 800848a:	46bd      	mov	sp, r7
 800848c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008490:	4770      	bx	lr

08008492 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008492:	b480      	push	{r7}
 8008494:	b083      	sub	sp, #12
 8008496:	af00      	add	r7, sp, #0
 8008498:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80084a0:	b2db      	uxtb	r3, r3
 80084a2:	2b04      	cmp	r3, #4
 80084a4:	d006      	beq.n	80084b4 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80084ac:	b2da      	uxtb	r2, r3
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2204      	movs	r2, #4
 80084b8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80084bc:	2300      	movs	r3, #0
}
 80084be:	4618      	mov	r0, r3
 80084c0:	370c      	adds	r7, #12
 80084c2:	46bd      	mov	sp, r7
 80084c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c8:	4770      	bx	lr

080084ca <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80084ca:	b480      	push	{r7}
 80084cc:	b083      	sub	sp, #12
 80084ce:	af00      	add	r7, sp, #0
 80084d0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80084d8:	b2db      	uxtb	r3, r3
 80084da:	2b04      	cmp	r3, #4
 80084dc:	d106      	bne.n	80084ec <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80084e4:	b2da      	uxtb	r2, r3
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80084ec:	2300      	movs	r3, #0
}
 80084ee:	4618      	mov	r0, r3
 80084f0:	370c      	adds	r7, #12
 80084f2:	46bd      	mov	sp, r7
 80084f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f8:	4770      	bx	lr

080084fa <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80084fa:	b580      	push	{r7, lr}
 80084fc:	b082      	sub	sp, #8
 80084fe:	af00      	add	r7, sp, #0
 8008500:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008508:	b2db      	uxtb	r3, r3
 800850a:	2b03      	cmp	r3, #3
 800850c:	d110      	bne.n	8008530 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008514:	2b00      	cmp	r3, #0
 8008516:	d00b      	beq.n	8008530 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800851e:	69db      	ldr	r3, [r3, #28]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d005      	beq.n	8008530 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800852a:	69db      	ldr	r3, [r3, #28]
 800852c:	6878      	ldr	r0, [r7, #4]
 800852e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008530:	2300      	movs	r3, #0
}
 8008532:	4618      	mov	r0, r3
 8008534:	3708      	adds	r7, #8
 8008536:	46bd      	mov	sp, r7
 8008538:	bd80      	pop	{r7, pc}

0800853a <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800853a:	b580      	push	{r7, lr}
 800853c:	b082      	sub	sp, #8
 800853e:	af00      	add	r7, sp, #0
 8008540:	6078      	str	r0, [r7, #4]
 8008542:	460b      	mov	r3, r1
 8008544:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	32ae      	adds	r2, #174	@ 0xae
 8008550:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d101      	bne.n	800855c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008558:	2303      	movs	r3, #3
 800855a:	e01c      	b.n	8008596 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008562:	b2db      	uxtb	r3, r3
 8008564:	2b03      	cmp	r3, #3
 8008566:	d115      	bne.n	8008594 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	32ae      	adds	r2, #174	@ 0xae
 8008572:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008576:	6a1b      	ldr	r3, [r3, #32]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d00b      	beq.n	8008594 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	32ae      	adds	r2, #174	@ 0xae
 8008586:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800858a:	6a1b      	ldr	r3, [r3, #32]
 800858c:	78fa      	ldrb	r2, [r7, #3]
 800858e:	4611      	mov	r1, r2
 8008590:	6878      	ldr	r0, [r7, #4]
 8008592:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008594:	2300      	movs	r3, #0
}
 8008596:	4618      	mov	r0, r3
 8008598:	3708      	adds	r7, #8
 800859a:	46bd      	mov	sp, r7
 800859c:	bd80      	pop	{r7, pc}

0800859e <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800859e:	b580      	push	{r7, lr}
 80085a0:	b082      	sub	sp, #8
 80085a2:	af00      	add	r7, sp, #0
 80085a4:	6078      	str	r0, [r7, #4]
 80085a6:	460b      	mov	r3, r1
 80085a8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	32ae      	adds	r2, #174	@ 0xae
 80085b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d101      	bne.n	80085c0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80085bc:	2303      	movs	r3, #3
 80085be:	e01c      	b.n	80085fa <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80085c6:	b2db      	uxtb	r3, r3
 80085c8:	2b03      	cmp	r3, #3
 80085ca:	d115      	bne.n	80085f8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	32ae      	adds	r2, #174	@ 0xae
 80085d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d00b      	beq.n	80085f8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	32ae      	adds	r2, #174	@ 0xae
 80085ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085f0:	78fa      	ldrb	r2, [r7, #3]
 80085f2:	4611      	mov	r1, r2
 80085f4:	6878      	ldr	r0, [r7, #4]
 80085f6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80085f8:	2300      	movs	r3, #0
}
 80085fa:	4618      	mov	r0, r3
 80085fc:	3708      	adds	r7, #8
 80085fe:	46bd      	mov	sp, r7
 8008600:	bd80      	pop	{r7, pc}

08008602 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008602:	b480      	push	{r7}
 8008604:	b083      	sub	sp, #12
 8008606:	af00      	add	r7, sp, #0
 8008608:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800860a:	2300      	movs	r3, #0
}
 800860c:	4618      	mov	r0, r3
 800860e:	370c      	adds	r7, #12
 8008610:	46bd      	mov	sp, r7
 8008612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008616:	4770      	bx	lr

08008618 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b084      	sub	sp, #16
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008620:	2300      	movs	r3, #0
 8008622:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2201      	movs	r2, #1
 8008628:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008632:	2b00      	cmp	r3, #0
 8008634:	d00e      	beq.n	8008654 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800863c:	685b      	ldr	r3, [r3, #4]
 800863e:	687a      	ldr	r2, [r7, #4]
 8008640:	6852      	ldr	r2, [r2, #4]
 8008642:	b2d2      	uxtb	r2, r2
 8008644:	4611      	mov	r1, r2
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	4798      	blx	r3
 800864a:	4603      	mov	r3, r0
 800864c:	2b00      	cmp	r3, #0
 800864e:	d001      	beq.n	8008654 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008650:	2303      	movs	r3, #3
 8008652:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008654:	7bfb      	ldrb	r3, [r7, #15]
}
 8008656:	4618      	mov	r0, r3
 8008658:	3710      	adds	r7, #16
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}

0800865e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800865e:	b480      	push	{r7}
 8008660:	b083      	sub	sp, #12
 8008662:	af00      	add	r7, sp, #0
 8008664:	6078      	str	r0, [r7, #4]
 8008666:	460b      	mov	r3, r1
 8008668:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800866a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800866c:	4618      	mov	r0, r3
 800866e:	370c      	adds	r7, #12
 8008670:	46bd      	mov	sp, r7
 8008672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008676:	4770      	bx	lr

08008678 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008678:	b480      	push	{r7}
 800867a:	b083      	sub	sp, #12
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
 8008680:	460b      	mov	r3, r1
 8008682:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008684:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008686:	4618      	mov	r0, r3
 8008688:	370c      	adds	r7, #12
 800868a:	46bd      	mov	sp, r7
 800868c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008690:	4770      	bx	lr

08008692 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008692:	b480      	push	{r7}
 8008694:	b085      	sub	sp, #20
 8008696:	af00      	add	r7, sp, #0
 8008698:	6078      	str	r0, [r7, #4]
 800869a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	881b      	ldrh	r3, [r3, #0]
 80086a4:	68fa      	ldr	r2, [r7, #12]
 80086a6:	7812      	ldrb	r2, [r2, #0]
 80086a8:	4413      	add	r3, r2
 80086aa:	b29a      	uxth	r2, r3
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	781b      	ldrb	r3, [r3, #0]
 80086b4:	461a      	mov	r2, r3
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	4413      	add	r3, r2
 80086ba:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80086bc:	68fb      	ldr	r3, [r7, #12]
}
 80086be:	4618      	mov	r0, r3
 80086c0:	3714      	adds	r7, #20
 80086c2:	46bd      	mov	sp, r7
 80086c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c8:	4770      	bx	lr

080086ca <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80086ca:	b480      	push	{r7}
 80086cc:	b087      	sub	sp, #28
 80086ce:	af00      	add	r7, sp, #0
 80086d0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80086d6:	697b      	ldr	r3, [r7, #20]
 80086d8:	781b      	ldrb	r3, [r3, #0]
 80086da:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80086dc:	697b      	ldr	r3, [r7, #20]
 80086de:	3301      	adds	r3, #1
 80086e0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80086e2:	697b      	ldr	r3, [r7, #20]
 80086e4:	781b      	ldrb	r3, [r3, #0]
 80086e6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80086e8:	8a3b      	ldrh	r3, [r7, #16]
 80086ea:	021b      	lsls	r3, r3, #8
 80086ec:	b21a      	sxth	r2, r3
 80086ee:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80086f2:	4313      	orrs	r3, r2
 80086f4:	b21b      	sxth	r3, r3
 80086f6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80086f8:	89fb      	ldrh	r3, [r7, #14]
}
 80086fa:	4618      	mov	r0, r3
 80086fc:	371c      	adds	r7, #28
 80086fe:	46bd      	mov	sp, r7
 8008700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008704:	4770      	bx	lr
	...

08008708 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b084      	sub	sp, #16
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
 8008710:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008712:	2300      	movs	r3, #0
 8008714:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	781b      	ldrb	r3, [r3, #0]
 800871a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800871e:	2b40      	cmp	r3, #64	@ 0x40
 8008720:	d005      	beq.n	800872e <USBD_StdDevReq+0x26>
 8008722:	2b40      	cmp	r3, #64	@ 0x40
 8008724:	d857      	bhi.n	80087d6 <USBD_StdDevReq+0xce>
 8008726:	2b00      	cmp	r3, #0
 8008728:	d00f      	beq.n	800874a <USBD_StdDevReq+0x42>
 800872a:	2b20      	cmp	r3, #32
 800872c:	d153      	bne.n	80087d6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	32ae      	adds	r2, #174	@ 0xae
 8008738:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800873c:	689b      	ldr	r3, [r3, #8]
 800873e:	6839      	ldr	r1, [r7, #0]
 8008740:	6878      	ldr	r0, [r7, #4]
 8008742:	4798      	blx	r3
 8008744:	4603      	mov	r3, r0
 8008746:	73fb      	strb	r3, [r7, #15]
      break;
 8008748:	e04a      	b.n	80087e0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	785b      	ldrb	r3, [r3, #1]
 800874e:	2b09      	cmp	r3, #9
 8008750:	d83b      	bhi.n	80087ca <USBD_StdDevReq+0xc2>
 8008752:	a201      	add	r2, pc, #4	@ (adr r2, 8008758 <USBD_StdDevReq+0x50>)
 8008754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008758:	080087ad 	.word	0x080087ad
 800875c:	080087c1 	.word	0x080087c1
 8008760:	080087cb 	.word	0x080087cb
 8008764:	080087b7 	.word	0x080087b7
 8008768:	080087cb 	.word	0x080087cb
 800876c:	0800878b 	.word	0x0800878b
 8008770:	08008781 	.word	0x08008781
 8008774:	080087cb 	.word	0x080087cb
 8008778:	080087a3 	.word	0x080087a3
 800877c:	08008795 	.word	0x08008795
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008780:	6839      	ldr	r1, [r7, #0]
 8008782:	6878      	ldr	r0, [r7, #4]
 8008784:	f000 fa3c 	bl	8008c00 <USBD_GetDescriptor>
          break;
 8008788:	e024      	b.n	80087d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800878a:	6839      	ldr	r1, [r7, #0]
 800878c:	6878      	ldr	r0, [r7, #4]
 800878e:	f000 fba1 	bl	8008ed4 <USBD_SetAddress>
          break;
 8008792:	e01f      	b.n	80087d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008794:	6839      	ldr	r1, [r7, #0]
 8008796:	6878      	ldr	r0, [r7, #4]
 8008798:	f000 fbe0 	bl	8008f5c <USBD_SetConfig>
 800879c:	4603      	mov	r3, r0
 800879e:	73fb      	strb	r3, [r7, #15]
          break;
 80087a0:	e018      	b.n	80087d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80087a2:	6839      	ldr	r1, [r7, #0]
 80087a4:	6878      	ldr	r0, [r7, #4]
 80087a6:	f000 fc83 	bl	80090b0 <USBD_GetConfig>
          break;
 80087aa:	e013      	b.n	80087d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80087ac:	6839      	ldr	r1, [r7, #0]
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f000 fcb4 	bl	800911c <USBD_GetStatus>
          break;
 80087b4:	e00e      	b.n	80087d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80087b6:	6839      	ldr	r1, [r7, #0]
 80087b8:	6878      	ldr	r0, [r7, #4]
 80087ba:	f000 fce3 	bl	8009184 <USBD_SetFeature>
          break;
 80087be:	e009      	b.n	80087d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80087c0:	6839      	ldr	r1, [r7, #0]
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	f000 fd07 	bl	80091d6 <USBD_ClrFeature>
          break;
 80087c8:	e004      	b.n	80087d4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80087ca:	6839      	ldr	r1, [r7, #0]
 80087cc:	6878      	ldr	r0, [r7, #4]
 80087ce:	f000 fd5e 	bl	800928e <USBD_CtlError>
          break;
 80087d2:	bf00      	nop
      }
      break;
 80087d4:	e004      	b.n	80087e0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80087d6:	6839      	ldr	r1, [r7, #0]
 80087d8:	6878      	ldr	r0, [r7, #4]
 80087da:	f000 fd58 	bl	800928e <USBD_CtlError>
      break;
 80087de:	bf00      	nop
  }

  return ret;
 80087e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80087e2:	4618      	mov	r0, r3
 80087e4:	3710      	adds	r7, #16
 80087e6:	46bd      	mov	sp, r7
 80087e8:	bd80      	pop	{r7, pc}
 80087ea:	bf00      	nop

080087ec <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b084      	sub	sp, #16
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
 80087f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80087f6:	2300      	movs	r3, #0
 80087f8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	781b      	ldrb	r3, [r3, #0]
 80087fe:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008802:	2b40      	cmp	r3, #64	@ 0x40
 8008804:	d005      	beq.n	8008812 <USBD_StdItfReq+0x26>
 8008806:	2b40      	cmp	r3, #64	@ 0x40
 8008808:	d852      	bhi.n	80088b0 <USBD_StdItfReq+0xc4>
 800880a:	2b00      	cmp	r3, #0
 800880c:	d001      	beq.n	8008812 <USBD_StdItfReq+0x26>
 800880e:	2b20      	cmp	r3, #32
 8008810:	d14e      	bne.n	80088b0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008818:	b2db      	uxtb	r3, r3
 800881a:	3b01      	subs	r3, #1
 800881c:	2b02      	cmp	r3, #2
 800881e:	d840      	bhi.n	80088a2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	889b      	ldrh	r3, [r3, #4]
 8008824:	b2db      	uxtb	r3, r3
 8008826:	2b01      	cmp	r3, #1
 8008828:	d836      	bhi.n	8008898 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	889b      	ldrh	r3, [r3, #4]
 800882e:	b2db      	uxtb	r3, r3
 8008830:	4619      	mov	r1, r3
 8008832:	6878      	ldr	r0, [r7, #4]
 8008834:	f7ff ff13 	bl	800865e <USBD_CoreFindIF>
 8008838:	4603      	mov	r3, r0
 800883a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800883c:	7bbb      	ldrb	r3, [r7, #14]
 800883e:	2bff      	cmp	r3, #255	@ 0xff
 8008840:	d01d      	beq.n	800887e <USBD_StdItfReq+0x92>
 8008842:	7bbb      	ldrb	r3, [r7, #14]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d11a      	bne.n	800887e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008848:	7bba      	ldrb	r2, [r7, #14]
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	32ae      	adds	r2, #174	@ 0xae
 800884e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008852:	689b      	ldr	r3, [r3, #8]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d00f      	beq.n	8008878 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008858:	7bba      	ldrb	r2, [r7, #14]
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008860:	7bba      	ldrb	r2, [r7, #14]
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	32ae      	adds	r2, #174	@ 0xae
 8008866:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800886a:	689b      	ldr	r3, [r3, #8]
 800886c:	6839      	ldr	r1, [r7, #0]
 800886e:	6878      	ldr	r0, [r7, #4]
 8008870:	4798      	blx	r3
 8008872:	4603      	mov	r3, r0
 8008874:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008876:	e004      	b.n	8008882 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008878:	2303      	movs	r3, #3
 800887a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800887c:	e001      	b.n	8008882 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800887e:	2303      	movs	r3, #3
 8008880:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008882:	683b      	ldr	r3, [r7, #0]
 8008884:	88db      	ldrh	r3, [r3, #6]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d110      	bne.n	80088ac <USBD_StdItfReq+0xc0>
 800888a:	7bfb      	ldrb	r3, [r7, #15]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d10d      	bne.n	80088ac <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008890:	6878      	ldr	r0, [r7, #4]
 8008892:	f000 fdd3 	bl	800943c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008896:	e009      	b.n	80088ac <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008898:	6839      	ldr	r1, [r7, #0]
 800889a:	6878      	ldr	r0, [r7, #4]
 800889c:	f000 fcf7 	bl	800928e <USBD_CtlError>
          break;
 80088a0:	e004      	b.n	80088ac <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80088a2:	6839      	ldr	r1, [r7, #0]
 80088a4:	6878      	ldr	r0, [r7, #4]
 80088a6:	f000 fcf2 	bl	800928e <USBD_CtlError>
          break;
 80088aa:	e000      	b.n	80088ae <USBD_StdItfReq+0xc2>
          break;
 80088ac:	bf00      	nop
      }
      break;
 80088ae:	e004      	b.n	80088ba <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80088b0:	6839      	ldr	r1, [r7, #0]
 80088b2:	6878      	ldr	r0, [r7, #4]
 80088b4:	f000 fceb 	bl	800928e <USBD_CtlError>
      break;
 80088b8:	bf00      	nop
  }

  return ret;
 80088ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80088bc:	4618      	mov	r0, r3
 80088be:	3710      	adds	r7, #16
 80088c0:	46bd      	mov	sp, r7
 80088c2:	bd80      	pop	{r7, pc}

080088c4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b084      	sub	sp, #16
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
 80088cc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80088ce:	2300      	movs	r3, #0
 80088d0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	889b      	ldrh	r3, [r3, #4]
 80088d6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80088d8:	683b      	ldr	r3, [r7, #0]
 80088da:	781b      	ldrb	r3, [r3, #0]
 80088dc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80088e0:	2b40      	cmp	r3, #64	@ 0x40
 80088e2:	d007      	beq.n	80088f4 <USBD_StdEPReq+0x30>
 80088e4:	2b40      	cmp	r3, #64	@ 0x40
 80088e6:	f200 817f 	bhi.w	8008be8 <USBD_StdEPReq+0x324>
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d02a      	beq.n	8008944 <USBD_StdEPReq+0x80>
 80088ee:	2b20      	cmp	r3, #32
 80088f0:	f040 817a 	bne.w	8008be8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80088f4:	7bbb      	ldrb	r3, [r7, #14]
 80088f6:	4619      	mov	r1, r3
 80088f8:	6878      	ldr	r0, [r7, #4]
 80088fa:	f7ff febd 	bl	8008678 <USBD_CoreFindEP>
 80088fe:	4603      	mov	r3, r0
 8008900:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008902:	7b7b      	ldrb	r3, [r7, #13]
 8008904:	2bff      	cmp	r3, #255	@ 0xff
 8008906:	f000 8174 	beq.w	8008bf2 <USBD_StdEPReq+0x32e>
 800890a:	7b7b      	ldrb	r3, [r7, #13]
 800890c:	2b00      	cmp	r3, #0
 800890e:	f040 8170 	bne.w	8008bf2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008912:	7b7a      	ldrb	r2, [r7, #13]
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800891a:	7b7a      	ldrb	r2, [r7, #13]
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	32ae      	adds	r2, #174	@ 0xae
 8008920:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008924:	689b      	ldr	r3, [r3, #8]
 8008926:	2b00      	cmp	r3, #0
 8008928:	f000 8163 	beq.w	8008bf2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800892c:	7b7a      	ldrb	r2, [r7, #13]
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	32ae      	adds	r2, #174	@ 0xae
 8008932:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008936:	689b      	ldr	r3, [r3, #8]
 8008938:	6839      	ldr	r1, [r7, #0]
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	4798      	blx	r3
 800893e:	4603      	mov	r3, r0
 8008940:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008942:	e156      	b.n	8008bf2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	785b      	ldrb	r3, [r3, #1]
 8008948:	2b03      	cmp	r3, #3
 800894a:	d008      	beq.n	800895e <USBD_StdEPReq+0x9a>
 800894c:	2b03      	cmp	r3, #3
 800894e:	f300 8145 	bgt.w	8008bdc <USBD_StdEPReq+0x318>
 8008952:	2b00      	cmp	r3, #0
 8008954:	f000 809b 	beq.w	8008a8e <USBD_StdEPReq+0x1ca>
 8008958:	2b01      	cmp	r3, #1
 800895a:	d03c      	beq.n	80089d6 <USBD_StdEPReq+0x112>
 800895c:	e13e      	b.n	8008bdc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008964:	b2db      	uxtb	r3, r3
 8008966:	2b02      	cmp	r3, #2
 8008968:	d002      	beq.n	8008970 <USBD_StdEPReq+0xac>
 800896a:	2b03      	cmp	r3, #3
 800896c:	d016      	beq.n	800899c <USBD_StdEPReq+0xd8>
 800896e:	e02c      	b.n	80089ca <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008970:	7bbb      	ldrb	r3, [r7, #14]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d00d      	beq.n	8008992 <USBD_StdEPReq+0xce>
 8008976:	7bbb      	ldrb	r3, [r7, #14]
 8008978:	2b80      	cmp	r3, #128	@ 0x80
 800897a:	d00a      	beq.n	8008992 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800897c:	7bbb      	ldrb	r3, [r7, #14]
 800897e:	4619      	mov	r1, r3
 8008980:	6878      	ldr	r0, [r7, #4]
 8008982:	f001 fa14 	bl	8009dae <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008986:	2180      	movs	r1, #128	@ 0x80
 8008988:	6878      	ldr	r0, [r7, #4]
 800898a:	f001 fa10 	bl	8009dae <USBD_LL_StallEP>
 800898e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008990:	e020      	b.n	80089d4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008992:	6839      	ldr	r1, [r7, #0]
 8008994:	6878      	ldr	r0, [r7, #4]
 8008996:	f000 fc7a 	bl	800928e <USBD_CtlError>
              break;
 800899a:	e01b      	b.n	80089d4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	885b      	ldrh	r3, [r3, #2]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d10e      	bne.n	80089c2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80089a4:	7bbb      	ldrb	r3, [r7, #14]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d00b      	beq.n	80089c2 <USBD_StdEPReq+0xfe>
 80089aa:	7bbb      	ldrb	r3, [r7, #14]
 80089ac:	2b80      	cmp	r3, #128	@ 0x80
 80089ae:	d008      	beq.n	80089c2 <USBD_StdEPReq+0xfe>
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	88db      	ldrh	r3, [r3, #6]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d104      	bne.n	80089c2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80089b8:	7bbb      	ldrb	r3, [r7, #14]
 80089ba:	4619      	mov	r1, r3
 80089bc:	6878      	ldr	r0, [r7, #4]
 80089be:	f001 f9f6 	bl	8009dae <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80089c2:	6878      	ldr	r0, [r7, #4]
 80089c4:	f000 fd3a 	bl	800943c <USBD_CtlSendStatus>

              break;
 80089c8:	e004      	b.n	80089d4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80089ca:	6839      	ldr	r1, [r7, #0]
 80089cc:	6878      	ldr	r0, [r7, #4]
 80089ce:	f000 fc5e 	bl	800928e <USBD_CtlError>
              break;
 80089d2:	bf00      	nop
          }
          break;
 80089d4:	e107      	b.n	8008be6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80089dc:	b2db      	uxtb	r3, r3
 80089de:	2b02      	cmp	r3, #2
 80089e0:	d002      	beq.n	80089e8 <USBD_StdEPReq+0x124>
 80089e2:	2b03      	cmp	r3, #3
 80089e4:	d016      	beq.n	8008a14 <USBD_StdEPReq+0x150>
 80089e6:	e04b      	b.n	8008a80 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80089e8:	7bbb      	ldrb	r3, [r7, #14]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d00d      	beq.n	8008a0a <USBD_StdEPReq+0x146>
 80089ee:	7bbb      	ldrb	r3, [r7, #14]
 80089f0:	2b80      	cmp	r3, #128	@ 0x80
 80089f2:	d00a      	beq.n	8008a0a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80089f4:	7bbb      	ldrb	r3, [r7, #14]
 80089f6:	4619      	mov	r1, r3
 80089f8:	6878      	ldr	r0, [r7, #4]
 80089fa:	f001 f9d8 	bl	8009dae <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80089fe:	2180      	movs	r1, #128	@ 0x80
 8008a00:	6878      	ldr	r0, [r7, #4]
 8008a02:	f001 f9d4 	bl	8009dae <USBD_LL_StallEP>
 8008a06:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008a08:	e040      	b.n	8008a8c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008a0a:	6839      	ldr	r1, [r7, #0]
 8008a0c:	6878      	ldr	r0, [r7, #4]
 8008a0e:	f000 fc3e 	bl	800928e <USBD_CtlError>
              break;
 8008a12:	e03b      	b.n	8008a8c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	885b      	ldrh	r3, [r3, #2]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d136      	bne.n	8008a8a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008a1c:	7bbb      	ldrb	r3, [r7, #14]
 8008a1e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d004      	beq.n	8008a30 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008a26:	7bbb      	ldrb	r3, [r7, #14]
 8008a28:	4619      	mov	r1, r3
 8008a2a:	6878      	ldr	r0, [r7, #4]
 8008a2c:	f001 f9de 	bl	8009dec <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008a30:	6878      	ldr	r0, [r7, #4]
 8008a32:	f000 fd03 	bl	800943c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008a36:	7bbb      	ldrb	r3, [r7, #14]
 8008a38:	4619      	mov	r1, r3
 8008a3a:	6878      	ldr	r0, [r7, #4]
 8008a3c:	f7ff fe1c 	bl	8008678 <USBD_CoreFindEP>
 8008a40:	4603      	mov	r3, r0
 8008a42:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008a44:	7b7b      	ldrb	r3, [r7, #13]
 8008a46:	2bff      	cmp	r3, #255	@ 0xff
 8008a48:	d01f      	beq.n	8008a8a <USBD_StdEPReq+0x1c6>
 8008a4a:	7b7b      	ldrb	r3, [r7, #13]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d11c      	bne.n	8008a8a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008a50:	7b7a      	ldrb	r2, [r7, #13]
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008a58:	7b7a      	ldrb	r2, [r7, #13]
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	32ae      	adds	r2, #174	@ 0xae
 8008a5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a62:	689b      	ldr	r3, [r3, #8]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d010      	beq.n	8008a8a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008a68:	7b7a      	ldrb	r2, [r7, #13]
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	32ae      	adds	r2, #174	@ 0xae
 8008a6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a72:	689b      	ldr	r3, [r3, #8]
 8008a74:	6839      	ldr	r1, [r7, #0]
 8008a76:	6878      	ldr	r0, [r7, #4]
 8008a78:	4798      	blx	r3
 8008a7a:	4603      	mov	r3, r0
 8008a7c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008a7e:	e004      	b.n	8008a8a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008a80:	6839      	ldr	r1, [r7, #0]
 8008a82:	6878      	ldr	r0, [r7, #4]
 8008a84:	f000 fc03 	bl	800928e <USBD_CtlError>
              break;
 8008a88:	e000      	b.n	8008a8c <USBD_StdEPReq+0x1c8>
              break;
 8008a8a:	bf00      	nop
          }
          break;
 8008a8c:	e0ab      	b.n	8008be6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a94:	b2db      	uxtb	r3, r3
 8008a96:	2b02      	cmp	r3, #2
 8008a98:	d002      	beq.n	8008aa0 <USBD_StdEPReq+0x1dc>
 8008a9a:	2b03      	cmp	r3, #3
 8008a9c:	d032      	beq.n	8008b04 <USBD_StdEPReq+0x240>
 8008a9e:	e097      	b.n	8008bd0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008aa0:	7bbb      	ldrb	r3, [r7, #14]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d007      	beq.n	8008ab6 <USBD_StdEPReq+0x1f2>
 8008aa6:	7bbb      	ldrb	r3, [r7, #14]
 8008aa8:	2b80      	cmp	r3, #128	@ 0x80
 8008aaa:	d004      	beq.n	8008ab6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008aac:	6839      	ldr	r1, [r7, #0]
 8008aae:	6878      	ldr	r0, [r7, #4]
 8008ab0:	f000 fbed 	bl	800928e <USBD_CtlError>
                break;
 8008ab4:	e091      	b.n	8008bda <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008ab6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	da0b      	bge.n	8008ad6 <USBD_StdEPReq+0x212>
 8008abe:	7bbb      	ldrb	r3, [r7, #14]
 8008ac0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008ac4:	4613      	mov	r3, r2
 8008ac6:	009b      	lsls	r3, r3, #2
 8008ac8:	4413      	add	r3, r2
 8008aca:	009b      	lsls	r3, r3, #2
 8008acc:	3310      	adds	r3, #16
 8008ace:	687a      	ldr	r2, [r7, #4]
 8008ad0:	4413      	add	r3, r2
 8008ad2:	3304      	adds	r3, #4
 8008ad4:	e00b      	b.n	8008aee <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008ad6:	7bbb      	ldrb	r3, [r7, #14]
 8008ad8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008adc:	4613      	mov	r3, r2
 8008ade:	009b      	lsls	r3, r3, #2
 8008ae0:	4413      	add	r3, r2
 8008ae2:	009b      	lsls	r3, r3, #2
 8008ae4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008ae8:	687a      	ldr	r2, [r7, #4]
 8008aea:	4413      	add	r3, r2
 8008aec:	3304      	adds	r3, #4
 8008aee:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008af0:	68bb      	ldr	r3, [r7, #8]
 8008af2:	2200      	movs	r2, #0
 8008af4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008af6:	68bb      	ldr	r3, [r7, #8]
 8008af8:	2202      	movs	r2, #2
 8008afa:	4619      	mov	r1, r3
 8008afc:	6878      	ldr	r0, [r7, #4]
 8008afe:	f000 fc43 	bl	8009388 <USBD_CtlSendData>
              break;
 8008b02:	e06a      	b.n	8008bda <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008b04:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	da11      	bge.n	8008b30 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008b0c:	7bbb      	ldrb	r3, [r7, #14]
 8008b0e:	f003 020f 	and.w	r2, r3, #15
 8008b12:	6879      	ldr	r1, [r7, #4]
 8008b14:	4613      	mov	r3, r2
 8008b16:	009b      	lsls	r3, r3, #2
 8008b18:	4413      	add	r3, r2
 8008b1a:	009b      	lsls	r3, r3, #2
 8008b1c:	440b      	add	r3, r1
 8008b1e:	3324      	adds	r3, #36	@ 0x24
 8008b20:	881b      	ldrh	r3, [r3, #0]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d117      	bne.n	8008b56 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008b26:	6839      	ldr	r1, [r7, #0]
 8008b28:	6878      	ldr	r0, [r7, #4]
 8008b2a:	f000 fbb0 	bl	800928e <USBD_CtlError>
                  break;
 8008b2e:	e054      	b.n	8008bda <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008b30:	7bbb      	ldrb	r3, [r7, #14]
 8008b32:	f003 020f 	and.w	r2, r3, #15
 8008b36:	6879      	ldr	r1, [r7, #4]
 8008b38:	4613      	mov	r3, r2
 8008b3a:	009b      	lsls	r3, r3, #2
 8008b3c:	4413      	add	r3, r2
 8008b3e:	009b      	lsls	r3, r3, #2
 8008b40:	440b      	add	r3, r1
 8008b42:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008b46:	881b      	ldrh	r3, [r3, #0]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d104      	bne.n	8008b56 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008b4c:	6839      	ldr	r1, [r7, #0]
 8008b4e:	6878      	ldr	r0, [r7, #4]
 8008b50:	f000 fb9d 	bl	800928e <USBD_CtlError>
                  break;
 8008b54:	e041      	b.n	8008bda <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008b56:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	da0b      	bge.n	8008b76 <USBD_StdEPReq+0x2b2>
 8008b5e:	7bbb      	ldrb	r3, [r7, #14]
 8008b60:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008b64:	4613      	mov	r3, r2
 8008b66:	009b      	lsls	r3, r3, #2
 8008b68:	4413      	add	r3, r2
 8008b6a:	009b      	lsls	r3, r3, #2
 8008b6c:	3310      	adds	r3, #16
 8008b6e:	687a      	ldr	r2, [r7, #4]
 8008b70:	4413      	add	r3, r2
 8008b72:	3304      	adds	r3, #4
 8008b74:	e00b      	b.n	8008b8e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008b76:	7bbb      	ldrb	r3, [r7, #14]
 8008b78:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008b7c:	4613      	mov	r3, r2
 8008b7e:	009b      	lsls	r3, r3, #2
 8008b80:	4413      	add	r3, r2
 8008b82:	009b      	lsls	r3, r3, #2
 8008b84:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008b88:	687a      	ldr	r2, [r7, #4]
 8008b8a:	4413      	add	r3, r2
 8008b8c:	3304      	adds	r3, #4
 8008b8e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008b90:	7bbb      	ldrb	r3, [r7, #14]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d002      	beq.n	8008b9c <USBD_StdEPReq+0x2d8>
 8008b96:	7bbb      	ldrb	r3, [r7, #14]
 8008b98:	2b80      	cmp	r3, #128	@ 0x80
 8008b9a:	d103      	bne.n	8008ba4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008b9c:	68bb      	ldr	r3, [r7, #8]
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	601a      	str	r2, [r3, #0]
 8008ba2:	e00e      	b.n	8008bc2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008ba4:	7bbb      	ldrb	r3, [r7, #14]
 8008ba6:	4619      	mov	r1, r3
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f001 f93e 	bl	8009e2a <USBD_LL_IsStallEP>
 8008bae:	4603      	mov	r3, r0
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d003      	beq.n	8008bbc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008bb4:	68bb      	ldr	r3, [r7, #8]
 8008bb6:	2201      	movs	r2, #1
 8008bb8:	601a      	str	r2, [r3, #0]
 8008bba:	e002      	b.n	8008bc2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008bbc:	68bb      	ldr	r3, [r7, #8]
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008bc2:	68bb      	ldr	r3, [r7, #8]
 8008bc4:	2202      	movs	r2, #2
 8008bc6:	4619      	mov	r1, r3
 8008bc8:	6878      	ldr	r0, [r7, #4]
 8008bca:	f000 fbdd 	bl	8009388 <USBD_CtlSendData>
              break;
 8008bce:	e004      	b.n	8008bda <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008bd0:	6839      	ldr	r1, [r7, #0]
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	f000 fb5b 	bl	800928e <USBD_CtlError>
              break;
 8008bd8:	bf00      	nop
          }
          break;
 8008bda:	e004      	b.n	8008be6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008bdc:	6839      	ldr	r1, [r7, #0]
 8008bde:	6878      	ldr	r0, [r7, #4]
 8008be0:	f000 fb55 	bl	800928e <USBD_CtlError>
          break;
 8008be4:	bf00      	nop
      }
      break;
 8008be6:	e005      	b.n	8008bf4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008be8:	6839      	ldr	r1, [r7, #0]
 8008bea:	6878      	ldr	r0, [r7, #4]
 8008bec:	f000 fb4f 	bl	800928e <USBD_CtlError>
      break;
 8008bf0:	e000      	b.n	8008bf4 <USBD_StdEPReq+0x330>
      break;
 8008bf2:	bf00      	nop
  }

  return ret;
 8008bf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	3710      	adds	r7, #16
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	bd80      	pop	{r7, pc}
	...

08008c00 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b084      	sub	sp, #16
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
 8008c08:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008c0e:	2300      	movs	r3, #0
 8008c10:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008c12:	2300      	movs	r3, #0
 8008c14:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	885b      	ldrh	r3, [r3, #2]
 8008c1a:	0a1b      	lsrs	r3, r3, #8
 8008c1c:	b29b      	uxth	r3, r3
 8008c1e:	3b01      	subs	r3, #1
 8008c20:	2b06      	cmp	r3, #6
 8008c22:	f200 8128 	bhi.w	8008e76 <USBD_GetDescriptor+0x276>
 8008c26:	a201      	add	r2, pc, #4	@ (adr r2, 8008c2c <USBD_GetDescriptor+0x2c>)
 8008c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c2c:	08008c49 	.word	0x08008c49
 8008c30:	08008c61 	.word	0x08008c61
 8008c34:	08008ca1 	.word	0x08008ca1
 8008c38:	08008e77 	.word	0x08008e77
 8008c3c:	08008e77 	.word	0x08008e77
 8008c40:	08008e17 	.word	0x08008e17
 8008c44:	08008e43 	.word	0x08008e43
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	687a      	ldr	r2, [r7, #4]
 8008c52:	7c12      	ldrb	r2, [r2, #16]
 8008c54:	f107 0108 	add.w	r1, r7, #8
 8008c58:	4610      	mov	r0, r2
 8008c5a:	4798      	blx	r3
 8008c5c:	60f8      	str	r0, [r7, #12]
      break;
 8008c5e:	e112      	b.n	8008e86 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	7c1b      	ldrb	r3, [r3, #16]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d10d      	bne.n	8008c84 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c70:	f107 0208 	add.w	r2, r7, #8
 8008c74:	4610      	mov	r0, r2
 8008c76:	4798      	blx	r3
 8008c78:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	3301      	adds	r3, #1
 8008c7e:	2202      	movs	r2, #2
 8008c80:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008c82:	e100      	b.n	8008e86 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c8c:	f107 0208 	add.w	r2, r7, #8
 8008c90:	4610      	mov	r0, r2
 8008c92:	4798      	blx	r3
 8008c94:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	3301      	adds	r3, #1
 8008c9a:	2202      	movs	r2, #2
 8008c9c:	701a      	strb	r2, [r3, #0]
      break;
 8008c9e:	e0f2      	b.n	8008e86 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	885b      	ldrh	r3, [r3, #2]
 8008ca4:	b2db      	uxtb	r3, r3
 8008ca6:	2b05      	cmp	r3, #5
 8008ca8:	f200 80ac 	bhi.w	8008e04 <USBD_GetDescriptor+0x204>
 8008cac:	a201      	add	r2, pc, #4	@ (adr r2, 8008cb4 <USBD_GetDescriptor+0xb4>)
 8008cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cb2:	bf00      	nop
 8008cb4:	08008ccd 	.word	0x08008ccd
 8008cb8:	08008d01 	.word	0x08008d01
 8008cbc:	08008d35 	.word	0x08008d35
 8008cc0:	08008d69 	.word	0x08008d69
 8008cc4:	08008d9d 	.word	0x08008d9d
 8008cc8:	08008dd1 	.word	0x08008dd1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008cd2:	685b      	ldr	r3, [r3, #4]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d00b      	beq.n	8008cf0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008cde:	685b      	ldr	r3, [r3, #4]
 8008ce0:	687a      	ldr	r2, [r7, #4]
 8008ce2:	7c12      	ldrb	r2, [r2, #16]
 8008ce4:	f107 0108 	add.w	r1, r7, #8
 8008ce8:	4610      	mov	r0, r2
 8008cea:	4798      	blx	r3
 8008cec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008cee:	e091      	b.n	8008e14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008cf0:	6839      	ldr	r1, [r7, #0]
 8008cf2:	6878      	ldr	r0, [r7, #4]
 8008cf4:	f000 facb 	bl	800928e <USBD_CtlError>
            err++;
 8008cf8:	7afb      	ldrb	r3, [r7, #11]
 8008cfa:	3301      	adds	r3, #1
 8008cfc:	72fb      	strb	r3, [r7, #11]
          break;
 8008cfe:	e089      	b.n	8008e14 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008d06:	689b      	ldr	r3, [r3, #8]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d00b      	beq.n	8008d24 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008d12:	689b      	ldr	r3, [r3, #8]
 8008d14:	687a      	ldr	r2, [r7, #4]
 8008d16:	7c12      	ldrb	r2, [r2, #16]
 8008d18:	f107 0108 	add.w	r1, r7, #8
 8008d1c:	4610      	mov	r0, r2
 8008d1e:	4798      	blx	r3
 8008d20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d22:	e077      	b.n	8008e14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008d24:	6839      	ldr	r1, [r7, #0]
 8008d26:	6878      	ldr	r0, [r7, #4]
 8008d28:	f000 fab1 	bl	800928e <USBD_CtlError>
            err++;
 8008d2c:	7afb      	ldrb	r3, [r7, #11]
 8008d2e:	3301      	adds	r3, #1
 8008d30:	72fb      	strb	r3, [r7, #11]
          break;
 8008d32:	e06f      	b.n	8008e14 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008d3a:	68db      	ldr	r3, [r3, #12]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d00b      	beq.n	8008d58 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008d46:	68db      	ldr	r3, [r3, #12]
 8008d48:	687a      	ldr	r2, [r7, #4]
 8008d4a:	7c12      	ldrb	r2, [r2, #16]
 8008d4c:	f107 0108 	add.w	r1, r7, #8
 8008d50:	4610      	mov	r0, r2
 8008d52:	4798      	blx	r3
 8008d54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d56:	e05d      	b.n	8008e14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008d58:	6839      	ldr	r1, [r7, #0]
 8008d5a:	6878      	ldr	r0, [r7, #4]
 8008d5c:	f000 fa97 	bl	800928e <USBD_CtlError>
            err++;
 8008d60:	7afb      	ldrb	r3, [r7, #11]
 8008d62:	3301      	adds	r3, #1
 8008d64:	72fb      	strb	r3, [r7, #11]
          break;
 8008d66:	e055      	b.n	8008e14 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008d6e:	691b      	ldr	r3, [r3, #16]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d00b      	beq.n	8008d8c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008d7a:	691b      	ldr	r3, [r3, #16]
 8008d7c:	687a      	ldr	r2, [r7, #4]
 8008d7e:	7c12      	ldrb	r2, [r2, #16]
 8008d80:	f107 0108 	add.w	r1, r7, #8
 8008d84:	4610      	mov	r0, r2
 8008d86:	4798      	blx	r3
 8008d88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d8a:	e043      	b.n	8008e14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008d8c:	6839      	ldr	r1, [r7, #0]
 8008d8e:	6878      	ldr	r0, [r7, #4]
 8008d90:	f000 fa7d 	bl	800928e <USBD_CtlError>
            err++;
 8008d94:	7afb      	ldrb	r3, [r7, #11]
 8008d96:	3301      	adds	r3, #1
 8008d98:	72fb      	strb	r3, [r7, #11]
          break;
 8008d9a:	e03b      	b.n	8008e14 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008da2:	695b      	ldr	r3, [r3, #20]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d00b      	beq.n	8008dc0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008dae:	695b      	ldr	r3, [r3, #20]
 8008db0:	687a      	ldr	r2, [r7, #4]
 8008db2:	7c12      	ldrb	r2, [r2, #16]
 8008db4:	f107 0108 	add.w	r1, r7, #8
 8008db8:	4610      	mov	r0, r2
 8008dba:	4798      	blx	r3
 8008dbc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008dbe:	e029      	b.n	8008e14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008dc0:	6839      	ldr	r1, [r7, #0]
 8008dc2:	6878      	ldr	r0, [r7, #4]
 8008dc4:	f000 fa63 	bl	800928e <USBD_CtlError>
            err++;
 8008dc8:	7afb      	ldrb	r3, [r7, #11]
 8008dca:	3301      	adds	r3, #1
 8008dcc:	72fb      	strb	r3, [r7, #11]
          break;
 8008dce:	e021      	b.n	8008e14 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008dd6:	699b      	ldr	r3, [r3, #24]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d00b      	beq.n	8008df4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008de2:	699b      	ldr	r3, [r3, #24]
 8008de4:	687a      	ldr	r2, [r7, #4]
 8008de6:	7c12      	ldrb	r2, [r2, #16]
 8008de8:	f107 0108 	add.w	r1, r7, #8
 8008dec:	4610      	mov	r0, r2
 8008dee:	4798      	blx	r3
 8008df0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008df2:	e00f      	b.n	8008e14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008df4:	6839      	ldr	r1, [r7, #0]
 8008df6:	6878      	ldr	r0, [r7, #4]
 8008df8:	f000 fa49 	bl	800928e <USBD_CtlError>
            err++;
 8008dfc:	7afb      	ldrb	r3, [r7, #11]
 8008dfe:	3301      	adds	r3, #1
 8008e00:	72fb      	strb	r3, [r7, #11]
          break;
 8008e02:	e007      	b.n	8008e14 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008e04:	6839      	ldr	r1, [r7, #0]
 8008e06:	6878      	ldr	r0, [r7, #4]
 8008e08:	f000 fa41 	bl	800928e <USBD_CtlError>
          err++;
 8008e0c:	7afb      	ldrb	r3, [r7, #11]
 8008e0e:	3301      	adds	r3, #1
 8008e10:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008e12:	bf00      	nop
      }
      break;
 8008e14:	e037      	b.n	8008e86 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	7c1b      	ldrb	r3, [r3, #16]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d109      	bne.n	8008e32 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e26:	f107 0208 	add.w	r2, r7, #8
 8008e2a:	4610      	mov	r0, r2
 8008e2c:	4798      	blx	r3
 8008e2e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008e30:	e029      	b.n	8008e86 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008e32:	6839      	ldr	r1, [r7, #0]
 8008e34:	6878      	ldr	r0, [r7, #4]
 8008e36:	f000 fa2a 	bl	800928e <USBD_CtlError>
        err++;
 8008e3a:	7afb      	ldrb	r3, [r7, #11]
 8008e3c:	3301      	adds	r3, #1
 8008e3e:	72fb      	strb	r3, [r7, #11]
      break;
 8008e40:	e021      	b.n	8008e86 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	7c1b      	ldrb	r3, [r3, #16]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d10d      	bne.n	8008e66 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e52:	f107 0208 	add.w	r2, r7, #8
 8008e56:	4610      	mov	r0, r2
 8008e58:	4798      	blx	r3
 8008e5a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	3301      	adds	r3, #1
 8008e60:	2207      	movs	r2, #7
 8008e62:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008e64:	e00f      	b.n	8008e86 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008e66:	6839      	ldr	r1, [r7, #0]
 8008e68:	6878      	ldr	r0, [r7, #4]
 8008e6a:	f000 fa10 	bl	800928e <USBD_CtlError>
        err++;
 8008e6e:	7afb      	ldrb	r3, [r7, #11]
 8008e70:	3301      	adds	r3, #1
 8008e72:	72fb      	strb	r3, [r7, #11]
      break;
 8008e74:	e007      	b.n	8008e86 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008e76:	6839      	ldr	r1, [r7, #0]
 8008e78:	6878      	ldr	r0, [r7, #4]
 8008e7a:	f000 fa08 	bl	800928e <USBD_CtlError>
      err++;
 8008e7e:	7afb      	ldrb	r3, [r7, #11]
 8008e80:	3301      	adds	r3, #1
 8008e82:	72fb      	strb	r3, [r7, #11]
      break;
 8008e84:	bf00      	nop
  }

  if (err != 0U)
 8008e86:	7afb      	ldrb	r3, [r7, #11]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d11e      	bne.n	8008eca <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	88db      	ldrh	r3, [r3, #6]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d016      	beq.n	8008ec2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008e94:	893b      	ldrh	r3, [r7, #8]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d00e      	beq.n	8008eb8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008e9a:	683b      	ldr	r3, [r7, #0]
 8008e9c:	88da      	ldrh	r2, [r3, #6]
 8008e9e:	893b      	ldrh	r3, [r7, #8]
 8008ea0:	4293      	cmp	r3, r2
 8008ea2:	bf28      	it	cs
 8008ea4:	4613      	movcs	r3, r2
 8008ea6:	b29b      	uxth	r3, r3
 8008ea8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008eaa:	893b      	ldrh	r3, [r7, #8]
 8008eac:	461a      	mov	r2, r3
 8008eae:	68f9      	ldr	r1, [r7, #12]
 8008eb0:	6878      	ldr	r0, [r7, #4]
 8008eb2:	f000 fa69 	bl	8009388 <USBD_CtlSendData>
 8008eb6:	e009      	b.n	8008ecc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008eb8:	6839      	ldr	r1, [r7, #0]
 8008eba:	6878      	ldr	r0, [r7, #4]
 8008ebc:	f000 f9e7 	bl	800928e <USBD_CtlError>
 8008ec0:	e004      	b.n	8008ecc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	f000 faba 	bl	800943c <USBD_CtlSendStatus>
 8008ec8:	e000      	b.n	8008ecc <USBD_GetDescriptor+0x2cc>
    return;
 8008eca:	bf00      	nop
  }
}
 8008ecc:	3710      	adds	r7, #16
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	bd80      	pop	{r7, pc}
 8008ed2:	bf00      	nop

08008ed4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b084      	sub	sp, #16
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
 8008edc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008ede:	683b      	ldr	r3, [r7, #0]
 8008ee0:	889b      	ldrh	r3, [r3, #4]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d131      	bne.n	8008f4a <USBD_SetAddress+0x76>
 8008ee6:	683b      	ldr	r3, [r7, #0]
 8008ee8:	88db      	ldrh	r3, [r3, #6]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d12d      	bne.n	8008f4a <USBD_SetAddress+0x76>
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	885b      	ldrh	r3, [r3, #2]
 8008ef2:	2b7f      	cmp	r3, #127	@ 0x7f
 8008ef4:	d829      	bhi.n	8008f4a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008ef6:	683b      	ldr	r3, [r7, #0]
 8008ef8:	885b      	ldrh	r3, [r3, #2]
 8008efa:	b2db      	uxtb	r3, r3
 8008efc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008f00:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f08:	b2db      	uxtb	r3, r3
 8008f0a:	2b03      	cmp	r3, #3
 8008f0c:	d104      	bne.n	8008f18 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008f0e:	6839      	ldr	r1, [r7, #0]
 8008f10:	6878      	ldr	r0, [r7, #4]
 8008f12:	f000 f9bc 	bl	800928e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f16:	e01d      	b.n	8008f54 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	7bfa      	ldrb	r2, [r7, #15]
 8008f1c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008f20:	7bfb      	ldrb	r3, [r7, #15]
 8008f22:	4619      	mov	r1, r3
 8008f24:	6878      	ldr	r0, [r7, #4]
 8008f26:	f000 ffac 	bl	8009e82 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008f2a:	6878      	ldr	r0, [r7, #4]
 8008f2c:	f000 fa86 	bl	800943c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008f30:	7bfb      	ldrb	r3, [r7, #15]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d004      	beq.n	8008f40 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	2202      	movs	r2, #2
 8008f3a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f3e:	e009      	b.n	8008f54 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2201      	movs	r2, #1
 8008f44:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f48:	e004      	b.n	8008f54 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008f4a:	6839      	ldr	r1, [r7, #0]
 8008f4c:	6878      	ldr	r0, [r7, #4]
 8008f4e:	f000 f99e 	bl	800928e <USBD_CtlError>
  }
}
 8008f52:	bf00      	nop
 8008f54:	bf00      	nop
 8008f56:	3710      	adds	r7, #16
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	bd80      	pop	{r7, pc}

08008f5c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b084      	sub	sp, #16
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
 8008f64:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008f66:	2300      	movs	r3, #0
 8008f68:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008f6a:	683b      	ldr	r3, [r7, #0]
 8008f6c:	885b      	ldrh	r3, [r3, #2]
 8008f6e:	b2da      	uxtb	r2, r3
 8008f70:	4b4e      	ldr	r3, [pc, #312]	@ (80090ac <USBD_SetConfig+0x150>)
 8008f72:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008f74:	4b4d      	ldr	r3, [pc, #308]	@ (80090ac <USBD_SetConfig+0x150>)
 8008f76:	781b      	ldrb	r3, [r3, #0]
 8008f78:	2b01      	cmp	r3, #1
 8008f7a:	d905      	bls.n	8008f88 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008f7c:	6839      	ldr	r1, [r7, #0]
 8008f7e:	6878      	ldr	r0, [r7, #4]
 8008f80:	f000 f985 	bl	800928e <USBD_CtlError>
    return USBD_FAIL;
 8008f84:	2303      	movs	r3, #3
 8008f86:	e08c      	b.n	80090a2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f8e:	b2db      	uxtb	r3, r3
 8008f90:	2b02      	cmp	r3, #2
 8008f92:	d002      	beq.n	8008f9a <USBD_SetConfig+0x3e>
 8008f94:	2b03      	cmp	r3, #3
 8008f96:	d029      	beq.n	8008fec <USBD_SetConfig+0x90>
 8008f98:	e075      	b.n	8009086 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008f9a:	4b44      	ldr	r3, [pc, #272]	@ (80090ac <USBD_SetConfig+0x150>)
 8008f9c:	781b      	ldrb	r3, [r3, #0]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d020      	beq.n	8008fe4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008fa2:	4b42      	ldr	r3, [pc, #264]	@ (80090ac <USBD_SetConfig+0x150>)
 8008fa4:	781b      	ldrb	r3, [r3, #0]
 8008fa6:	461a      	mov	r2, r3
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008fac:	4b3f      	ldr	r3, [pc, #252]	@ (80090ac <USBD_SetConfig+0x150>)
 8008fae:	781b      	ldrb	r3, [r3, #0]
 8008fb0:	4619      	mov	r1, r3
 8008fb2:	6878      	ldr	r0, [r7, #4]
 8008fb4:	f7ff f81b 	bl	8007fee <USBD_SetClassConfig>
 8008fb8:	4603      	mov	r3, r0
 8008fba:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008fbc:	7bfb      	ldrb	r3, [r7, #15]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d008      	beq.n	8008fd4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008fc2:	6839      	ldr	r1, [r7, #0]
 8008fc4:	6878      	ldr	r0, [r7, #4]
 8008fc6:	f000 f962 	bl	800928e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	2202      	movs	r2, #2
 8008fce:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008fd2:	e065      	b.n	80090a0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008fd4:	6878      	ldr	r0, [r7, #4]
 8008fd6:	f000 fa31 	bl	800943c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	2203      	movs	r2, #3
 8008fde:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008fe2:	e05d      	b.n	80090a0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008fe4:	6878      	ldr	r0, [r7, #4]
 8008fe6:	f000 fa29 	bl	800943c <USBD_CtlSendStatus>
      break;
 8008fea:	e059      	b.n	80090a0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008fec:	4b2f      	ldr	r3, [pc, #188]	@ (80090ac <USBD_SetConfig+0x150>)
 8008fee:	781b      	ldrb	r3, [r3, #0]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d112      	bne.n	800901a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2202      	movs	r2, #2
 8008ff8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8008ffc:	4b2b      	ldr	r3, [pc, #172]	@ (80090ac <USBD_SetConfig+0x150>)
 8008ffe:	781b      	ldrb	r3, [r3, #0]
 8009000:	461a      	mov	r2, r3
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009006:	4b29      	ldr	r3, [pc, #164]	@ (80090ac <USBD_SetConfig+0x150>)
 8009008:	781b      	ldrb	r3, [r3, #0]
 800900a:	4619      	mov	r1, r3
 800900c:	6878      	ldr	r0, [r7, #4]
 800900e:	f7ff f80a 	bl	8008026 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009012:	6878      	ldr	r0, [r7, #4]
 8009014:	f000 fa12 	bl	800943c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009018:	e042      	b.n	80090a0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800901a:	4b24      	ldr	r3, [pc, #144]	@ (80090ac <USBD_SetConfig+0x150>)
 800901c:	781b      	ldrb	r3, [r3, #0]
 800901e:	461a      	mov	r2, r3
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	685b      	ldr	r3, [r3, #4]
 8009024:	429a      	cmp	r2, r3
 8009026:	d02a      	beq.n	800907e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	685b      	ldr	r3, [r3, #4]
 800902c:	b2db      	uxtb	r3, r3
 800902e:	4619      	mov	r1, r3
 8009030:	6878      	ldr	r0, [r7, #4]
 8009032:	f7fe fff8 	bl	8008026 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009036:	4b1d      	ldr	r3, [pc, #116]	@ (80090ac <USBD_SetConfig+0x150>)
 8009038:	781b      	ldrb	r3, [r3, #0]
 800903a:	461a      	mov	r2, r3
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009040:	4b1a      	ldr	r3, [pc, #104]	@ (80090ac <USBD_SetConfig+0x150>)
 8009042:	781b      	ldrb	r3, [r3, #0]
 8009044:	4619      	mov	r1, r3
 8009046:	6878      	ldr	r0, [r7, #4]
 8009048:	f7fe ffd1 	bl	8007fee <USBD_SetClassConfig>
 800904c:	4603      	mov	r3, r0
 800904e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009050:	7bfb      	ldrb	r3, [r7, #15]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d00f      	beq.n	8009076 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009056:	6839      	ldr	r1, [r7, #0]
 8009058:	6878      	ldr	r0, [r7, #4]
 800905a:	f000 f918 	bl	800928e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	685b      	ldr	r3, [r3, #4]
 8009062:	b2db      	uxtb	r3, r3
 8009064:	4619      	mov	r1, r3
 8009066:	6878      	ldr	r0, [r7, #4]
 8009068:	f7fe ffdd 	bl	8008026 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	2202      	movs	r2, #2
 8009070:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009074:	e014      	b.n	80090a0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009076:	6878      	ldr	r0, [r7, #4]
 8009078:	f000 f9e0 	bl	800943c <USBD_CtlSendStatus>
      break;
 800907c:	e010      	b.n	80090a0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800907e:	6878      	ldr	r0, [r7, #4]
 8009080:	f000 f9dc 	bl	800943c <USBD_CtlSendStatus>
      break;
 8009084:	e00c      	b.n	80090a0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009086:	6839      	ldr	r1, [r7, #0]
 8009088:	6878      	ldr	r0, [r7, #4]
 800908a:	f000 f900 	bl	800928e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800908e:	4b07      	ldr	r3, [pc, #28]	@ (80090ac <USBD_SetConfig+0x150>)
 8009090:	781b      	ldrb	r3, [r3, #0]
 8009092:	4619      	mov	r1, r3
 8009094:	6878      	ldr	r0, [r7, #4]
 8009096:	f7fe ffc6 	bl	8008026 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800909a:	2303      	movs	r3, #3
 800909c:	73fb      	strb	r3, [r7, #15]
      break;
 800909e:	bf00      	nop
  }

  return ret;
 80090a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80090a2:	4618      	mov	r0, r3
 80090a4:	3710      	adds	r7, #16
 80090a6:	46bd      	mov	sp, r7
 80090a8:	bd80      	pop	{r7, pc}
 80090aa:	bf00      	nop
 80090ac:	20000a9c 	.word	0x20000a9c

080090b0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b082      	sub	sp, #8
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
 80090b8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80090ba:	683b      	ldr	r3, [r7, #0]
 80090bc:	88db      	ldrh	r3, [r3, #6]
 80090be:	2b01      	cmp	r3, #1
 80090c0:	d004      	beq.n	80090cc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80090c2:	6839      	ldr	r1, [r7, #0]
 80090c4:	6878      	ldr	r0, [r7, #4]
 80090c6:	f000 f8e2 	bl	800928e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80090ca:	e023      	b.n	8009114 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80090d2:	b2db      	uxtb	r3, r3
 80090d4:	2b02      	cmp	r3, #2
 80090d6:	dc02      	bgt.n	80090de <USBD_GetConfig+0x2e>
 80090d8:	2b00      	cmp	r3, #0
 80090da:	dc03      	bgt.n	80090e4 <USBD_GetConfig+0x34>
 80090dc:	e015      	b.n	800910a <USBD_GetConfig+0x5a>
 80090de:	2b03      	cmp	r3, #3
 80090e0:	d00b      	beq.n	80090fa <USBD_GetConfig+0x4a>
 80090e2:	e012      	b.n	800910a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	2200      	movs	r2, #0
 80090e8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	3308      	adds	r3, #8
 80090ee:	2201      	movs	r2, #1
 80090f0:	4619      	mov	r1, r3
 80090f2:	6878      	ldr	r0, [r7, #4]
 80090f4:	f000 f948 	bl	8009388 <USBD_CtlSendData>
        break;
 80090f8:	e00c      	b.n	8009114 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	3304      	adds	r3, #4
 80090fe:	2201      	movs	r2, #1
 8009100:	4619      	mov	r1, r3
 8009102:	6878      	ldr	r0, [r7, #4]
 8009104:	f000 f940 	bl	8009388 <USBD_CtlSendData>
        break;
 8009108:	e004      	b.n	8009114 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800910a:	6839      	ldr	r1, [r7, #0]
 800910c:	6878      	ldr	r0, [r7, #4]
 800910e:	f000 f8be 	bl	800928e <USBD_CtlError>
        break;
 8009112:	bf00      	nop
}
 8009114:	bf00      	nop
 8009116:	3708      	adds	r7, #8
 8009118:	46bd      	mov	sp, r7
 800911a:	bd80      	pop	{r7, pc}

0800911c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800911c:	b580      	push	{r7, lr}
 800911e:	b082      	sub	sp, #8
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
 8009124:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800912c:	b2db      	uxtb	r3, r3
 800912e:	3b01      	subs	r3, #1
 8009130:	2b02      	cmp	r3, #2
 8009132:	d81e      	bhi.n	8009172 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	88db      	ldrh	r3, [r3, #6]
 8009138:	2b02      	cmp	r3, #2
 800913a:	d004      	beq.n	8009146 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800913c:	6839      	ldr	r1, [r7, #0]
 800913e:	6878      	ldr	r0, [r7, #4]
 8009140:	f000 f8a5 	bl	800928e <USBD_CtlError>
        break;
 8009144:	e01a      	b.n	800917c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	2201      	movs	r2, #1
 800914a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009152:	2b00      	cmp	r3, #0
 8009154:	d005      	beq.n	8009162 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	68db      	ldr	r3, [r3, #12]
 800915a:	f043 0202 	orr.w	r2, r3, #2
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	330c      	adds	r3, #12
 8009166:	2202      	movs	r2, #2
 8009168:	4619      	mov	r1, r3
 800916a:	6878      	ldr	r0, [r7, #4]
 800916c:	f000 f90c 	bl	8009388 <USBD_CtlSendData>
      break;
 8009170:	e004      	b.n	800917c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009172:	6839      	ldr	r1, [r7, #0]
 8009174:	6878      	ldr	r0, [r7, #4]
 8009176:	f000 f88a 	bl	800928e <USBD_CtlError>
      break;
 800917a:	bf00      	nop
  }
}
 800917c:	bf00      	nop
 800917e:	3708      	adds	r7, #8
 8009180:	46bd      	mov	sp, r7
 8009182:	bd80      	pop	{r7, pc}

08009184 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009184:	b580      	push	{r7, lr}
 8009186:	b082      	sub	sp, #8
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
 800918c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800918e:	683b      	ldr	r3, [r7, #0]
 8009190:	885b      	ldrh	r3, [r3, #2]
 8009192:	2b01      	cmp	r3, #1
 8009194:	d107      	bne.n	80091a6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	2201      	movs	r2, #1
 800919a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800919e:	6878      	ldr	r0, [r7, #4]
 80091a0:	f000 f94c 	bl	800943c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80091a4:	e013      	b.n	80091ce <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80091a6:	683b      	ldr	r3, [r7, #0]
 80091a8:	885b      	ldrh	r3, [r3, #2]
 80091aa:	2b02      	cmp	r3, #2
 80091ac:	d10b      	bne.n	80091c6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80091ae:	683b      	ldr	r3, [r7, #0]
 80091b0:	889b      	ldrh	r3, [r3, #4]
 80091b2:	0a1b      	lsrs	r3, r3, #8
 80091b4:	b29b      	uxth	r3, r3
 80091b6:	b2da      	uxtb	r2, r3
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80091be:	6878      	ldr	r0, [r7, #4]
 80091c0:	f000 f93c 	bl	800943c <USBD_CtlSendStatus>
}
 80091c4:	e003      	b.n	80091ce <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80091c6:	6839      	ldr	r1, [r7, #0]
 80091c8:	6878      	ldr	r0, [r7, #4]
 80091ca:	f000 f860 	bl	800928e <USBD_CtlError>
}
 80091ce:	bf00      	nop
 80091d0:	3708      	adds	r7, #8
 80091d2:	46bd      	mov	sp, r7
 80091d4:	bd80      	pop	{r7, pc}

080091d6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091d6:	b580      	push	{r7, lr}
 80091d8:	b082      	sub	sp, #8
 80091da:	af00      	add	r7, sp, #0
 80091dc:	6078      	str	r0, [r7, #4]
 80091de:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80091e6:	b2db      	uxtb	r3, r3
 80091e8:	3b01      	subs	r3, #1
 80091ea:	2b02      	cmp	r3, #2
 80091ec:	d80b      	bhi.n	8009206 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	885b      	ldrh	r3, [r3, #2]
 80091f2:	2b01      	cmp	r3, #1
 80091f4:	d10c      	bne.n	8009210 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	2200      	movs	r2, #0
 80091fa:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80091fe:	6878      	ldr	r0, [r7, #4]
 8009200:	f000 f91c 	bl	800943c <USBD_CtlSendStatus>
      }
      break;
 8009204:	e004      	b.n	8009210 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009206:	6839      	ldr	r1, [r7, #0]
 8009208:	6878      	ldr	r0, [r7, #4]
 800920a:	f000 f840 	bl	800928e <USBD_CtlError>
      break;
 800920e:	e000      	b.n	8009212 <USBD_ClrFeature+0x3c>
      break;
 8009210:	bf00      	nop
  }
}
 8009212:	bf00      	nop
 8009214:	3708      	adds	r7, #8
 8009216:	46bd      	mov	sp, r7
 8009218:	bd80      	pop	{r7, pc}

0800921a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800921a:	b580      	push	{r7, lr}
 800921c:	b084      	sub	sp, #16
 800921e:	af00      	add	r7, sp, #0
 8009220:	6078      	str	r0, [r7, #4]
 8009222:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009224:	683b      	ldr	r3, [r7, #0]
 8009226:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	781a      	ldrb	r2, [r3, #0]
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	3301      	adds	r3, #1
 8009234:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	781a      	ldrb	r2, [r3, #0]
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	3301      	adds	r3, #1
 8009242:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009244:	68f8      	ldr	r0, [r7, #12]
 8009246:	f7ff fa40 	bl	80086ca <SWAPBYTE>
 800924a:	4603      	mov	r3, r0
 800924c:	461a      	mov	r2, r3
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	3301      	adds	r3, #1
 8009256:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	3301      	adds	r3, #1
 800925c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800925e:	68f8      	ldr	r0, [r7, #12]
 8009260:	f7ff fa33 	bl	80086ca <SWAPBYTE>
 8009264:	4603      	mov	r3, r0
 8009266:	461a      	mov	r2, r3
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	3301      	adds	r3, #1
 8009270:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	3301      	adds	r3, #1
 8009276:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009278:	68f8      	ldr	r0, [r7, #12]
 800927a:	f7ff fa26 	bl	80086ca <SWAPBYTE>
 800927e:	4603      	mov	r3, r0
 8009280:	461a      	mov	r2, r3
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	80da      	strh	r2, [r3, #6]
}
 8009286:	bf00      	nop
 8009288:	3710      	adds	r7, #16
 800928a:	46bd      	mov	sp, r7
 800928c:	bd80      	pop	{r7, pc}

0800928e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800928e:	b580      	push	{r7, lr}
 8009290:	b082      	sub	sp, #8
 8009292:	af00      	add	r7, sp, #0
 8009294:	6078      	str	r0, [r7, #4]
 8009296:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009298:	2180      	movs	r1, #128	@ 0x80
 800929a:	6878      	ldr	r0, [r7, #4]
 800929c:	f000 fd87 	bl	8009dae <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80092a0:	2100      	movs	r1, #0
 80092a2:	6878      	ldr	r0, [r7, #4]
 80092a4:	f000 fd83 	bl	8009dae <USBD_LL_StallEP>
}
 80092a8:	bf00      	nop
 80092aa:	3708      	adds	r7, #8
 80092ac:	46bd      	mov	sp, r7
 80092ae:	bd80      	pop	{r7, pc}

080092b0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b086      	sub	sp, #24
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	60f8      	str	r0, [r7, #12]
 80092b8:	60b9      	str	r1, [r7, #8]
 80092ba:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80092bc:	2300      	movs	r3, #0
 80092be:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d042      	beq.n	800934c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 80092ca:	6938      	ldr	r0, [r7, #16]
 80092cc:	f000 f842 	bl	8009354 <USBD_GetLen>
 80092d0:	4603      	mov	r3, r0
 80092d2:	3301      	adds	r3, #1
 80092d4:	005b      	lsls	r3, r3, #1
 80092d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80092da:	d808      	bhi.n	80092ee <USBD_GetString+0x3e>
 80092dc:	6938      	ldr	r0, [r7, #16]
 80092de:	f000 f839 	bl	8009354 <USBD_GetLen>
 80092e2:	4603      	mov	r3, r0
 80092e4:	3301      	adds	r3, #1
 80092e6:	b29b      	uxth	r3, r3
 80092e8:	005b      	lsls	r3, r3, #1
 80092ea:	b29a      	uxth	r2, r3
 80092ec:	e001      	b.n	80092f2 <USBD_GetString+0x42>
 80092ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80092f6:	7dfb      	ldrb	r3, [r7, #23]
 80092f8:	68ba      	ldr	r2, [r7, #8]
 80092fa:	4413      	add	r3, r2
 80092fc:	687a      	ldr	r2, [r7, #4]
 80092fe:	7812      	ldrb	r2, [r2, #0]
 8009300:	701a      	strb	r2, [r3, #0]
  idx++;
 8009302:	7dfb      	ldrb	r3, [r7, #23]
 8009304:	3301      	adds	r3, #1
 8009306:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009308:	7dfb      	ldrb	r3, [r7, #23]
 800930a:	68ba      	ldr	r2, [r7, #8]
 800930c:	4413      	add	r3, r2
 800930e:	2203      	movs	r2, #3
 8009310:	701a      	strb	r2, [r3, #0]
  idx++;
 8009312:	7dfb      	ldrb	r3, [r7, #23]
 8009314:	3301      	adds	r3, #1
 8009316:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009318:	e013      	b.n	8009342 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800931a:	7dfb      	ldrb	r3, [r7, #23]
 800931c:	68ba      	ldr	r2, [r7, #8]
 800931e:	4413      	add	r3, r2
 8009320:	693a      	ldr	r2, [r7, #16]
 8009322:	7812      	ldrb	r2, [r2, #0]
 8009324:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009326:	693b      	ldr	r3, [r7, #16]
 8009328:	3301      	adds	r3, #1
 800932a:	613b      	str	r3, [r7, #16]
    idx++;
 800932c:	7dfb      	ldrb	r3, [r7, #23]
 800932e:	3301      	adds	r3, #1
 8009330:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009332:	7dfb      	ldrb	r3, [r7, #23]
 8009334:	68ba      	ldr	r2, [r7, #8]
 8009336:	4413      	add	r3, r2
 8009338:	2200      	movs	r2, #0
 800933a:	701a      	strb	r2, [r3, #0]
    idx++;
 800933c:	7dfb      	ldrb	r3, [r7, #23]
 800933e:	3301      	adds	r3, #1
 8009340:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009342:	693b      	ldr	r3, [r7, #16]
 8009344:	781b      	ldrb	r3, [r3, #0]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d1e7      	bne.n	800931a <USBD_GetString+0x6a>
 800934a:	e000      	b.n	800934e <USBD_GetString+0x9e>
    return;
 800934c:	bf00      	nop
  }
}
 800934e:	3718      	adds	r7, #24
 8009350:	46bd      	mov	sp, r7
 8009352:	bd80      	pop	{r7, pc}

08009354 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009354:	b480      	push	{r7}
 8009356:	b085      	sub	sp, #20
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800935c:	2300      	movs	r3, #0
 800935e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009364:	e005      	b.n	8009372 <USBD_GetLen+0x1e>
  {
    len++;
 8009366:	7bfb      	ldrb	r3, [r7, #15]
 8009368:	3301      	adds	r3, #1
 800936a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800936c:	68bb      	ldr	r3, [r7, #8]
 800936e:	3301      	adds	r3, #1
 8009370:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009372:	68bb      	ldr	r3, [r7, #8]
 8009374:	781b      	ldrb	r3, [r3, #0]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d1f5      	bne.n	8009366 <USBD_GetLen+0x12>
  }

  return len;
 800937a:	7bfb      	ldrb	r3, [r7, #15]
}
 800937c:	4618      	mov	r0, r3
 800937e:	3714      	adds	r7, #20
 8009380:	46bd      	mov	sp, r7
 8009382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009386:	4770      	bx	lr

08009388 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b084      	sub	sp, #16
 800938c:	af00      	add	r7, sp, #0
 800938e:	60f8      	str	r0, [r7, #12]
 8009390:	60b9      	str	r1, [r7, #8]
 8009392:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	2202      	movs	r2, #2
 8009398:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	687a      	ldr	r2, [r7, #4]
 80093a0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	687a      	ldr	r2, [r7, #4]
 80093a6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	68ba      	ldr	r2, [r7, #8]
 80093ac:	2100      	movs	r1, #0
 80093ae:	68f8      	ldr	r0, [r7, #12]
 80093b0:	f000 fd86 	bl	8009ec0 <USBD_LL_Transmit>

  return USBD_OK;
 80093b4:	2300      	movs	r3, #0
}
 80093b6:	4618      	mov	r0, r3
 80093b8:	3710      	adds	r7, #16
 80093ba:	46bd      	mov	sp, r7
 80093bc:	bd80      	pop	{r7, pc}

080093be <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80093be:	b580      	push	{r7, lr}
 80093c0:	b084      	sub	sp, #16
 80093c2:	af00      	add	r7, sp, #0
 80093c4:	60f8      	str	r0, [r7, #12]
 80093c6:	60b9      	str	r1, [r7, #8]
 80093c8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	68ba      	ldr	r2, [r7, #8]
 80093ce:	2100      	movs	r1, #0
 80093d0:	68f8      	ldr	r0, [r7, #12]
 80093d2:	f000 fd75 	bl	8009ec0 <USBD_LL_Transmit>

  return USBD_OK;
 80093d6:	2300      	movs	r3, #0
}
 80093d8:	4618      	mov	r0, r3
 80093da:	3710      	adds	r7, #16
 80093dc:	46bd      	mov	sp, r7
 80093de:	bd80      	pop	{r7, pc}

080093e0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b084      	sub	sp, #16
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	60f8      	str	r0, [r7, #12]
 80093e8:	60b9      	str	r1, [r7, #8]
 80093ea:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	2203      	movs	r2, #3
 80093f0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	687a      	ldr	r2, [r7, #4]
 80093f8:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	687a      	ldr	r2, [r7, #4]
 8009400:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	68ba      	ldr	r2, [r7, #8]
 8009408:	2100      	movs	r1, #0
 800940a:	68f8      	ldr	r0, [r7, #12]
 800940c:	f000 fd79 	bl	8009f02 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009410:	2300      	movs	r3, #0
}
 8009412:	4618      	mov	r0, r3
 8009414:	3710      	adds	r7, #16
 8009416:	46bd      	mov	sp, r7
 8009418:	bd80      	pop	{r7, pc}

0800941a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800941a:	b580      	push	{r7, lr}
 800941c:	b084      	sub	sp, #16
 800941e:	af00      	add	r7, sp, #0
 8009420:	60f8      	str	r0, [r7, #12]
 8009422:	60b9      	str	r1, [r7, #8]
 8009424:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	68ba      	ldr	r2, [r7, #8]
 800942a:	2100      	movs	r1, #0
 800942c:	68f8      	ldr	r0, [r7, #12]
 800942e:	f000 fd68 	bl	8009f02 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009432:	2300      	movs	r3, #0
}
 8009434:	4618      	mov	r0, r3
 8009436:	3710      	adds	r7, #16
 8009438:	46bd      	mov	sp, r7
 800943a:	bd80      	pop	{r7, pc}

0800943c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b082      	sub	sp, #8
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2204      	movs	r2, #4
 8009448:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800944c:	2300      	movs	r3, #0
 800944e:	2200      	movs	r2, #0
 8009450:	2100      	movs	r1, #0
 8009452:	6878      	ldr	r0, [r7, #4]
 8009454:	f000 fd34 	bl	8009ec0 <USBD_LL_Transmit>

  return USBD_OK;
 8009458:	2300      	movs	r3, #0
}
 800945a:	4618      	mov	r0, r3
 800945c:	3708      	adds	r7, #8
 800945e:	46bd      	mov	sp, r7
 8009460:	bd80      	pop	{r7, pc}

08009462 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009462:	b580      	push	{r7, lr}
 8009464:	b082      	sub	sp, #8
 8009466:	af00      	add	r7, sp, #0
 8009468:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	2205      	movs	r2, #5
 800946e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009472:	2300      	movs	r3, #0
 8009474:	2200      	movs	r2, #0
 8009476:	2100      	movs	r1, #0
 8009478:	6878      	ldr	r0, [r7, #4]
 800947a:	f000 fd42 	bl	8009f02 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800947e:	2300      	movs	r3, #0
}
 8009480:	4618      	mov	r0, r3
 8009482:	3708      	adds	r7, #8
 8009484:	46bd      	mov	sp, r7
 8009486:	bd80      	pop	{r7, pc}

08009488 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009488:	b580      	push	{r7, lr}
 800948a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800948c:	2200      	movs	r2, #0
 800948e:	4912      	ldr	r1, [pc, #72]	@ (80094d8 <MX_USB_DEVICE_Init+0x50>)
 8009490:	4812      	ldr	r0, [pc, #72]	@ (80094dc <MX_USB_DEVICE_Init+0x54>)
 8009492:	f7fe fd13 	bl	8007ebc <USBD_Init>
 8009496:	4603      	mov	r3, r0
 8009498:	2b00      	cmp	r3, #0
 800949a:	d001      	beq.n	80094a0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800949c:	f7f7 feb8 	bl	8001210 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_AUDIO) != USBD_OK)
 80094a0:	490f      	ldr	r1, [pc, #60]	@ (80094e0 <MX_USB_DEVICE_Init+0x58>)
 80094a2:	480e      	ldr	r0, [pc, #56]	@ (80094dc <MX_USB_DEVICE_Init+0x54>)
 80094a4:	f7fe fd48 	bl	8007f38 <USBD_RegisterClass>
 80094a8:	4603      	mov	r3, r0
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d001      	beq.n	80094b2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80094ae:	f7f7 feaf 	bl	8001210 <Error_Handler>
  }
  if (USBD_AUDIO_RegisterInterface(&hUsbDeviceFS, &USBD_AUDIO_fops_FS) != USBD_OK)
 80094b2:	490c      	ldr	r1, [pc, #48]	@ (80094e4 <MX_USB_DEVICE_Init+0x5c>)
 80094b4:	4809      	ldr	r0, [pc, #36]	@ (80094dc <MX_USB_DEVICE_Init+0x54>)
 80094b6:	f7fe fc69 	bl	8007d8c <USBD_AUDIO_RegisterInterface>
 80094ba:	4603      	mov	r3, r0
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d001      	beq.n	80094c4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80094c0:	f7f7 fea6 	bl	8001210 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80094c4:	4805      	ldr	r0, [pc, #20]	@ (80094dc <MX_USB_DEVICE_Init+0x54>)
 80094c6:	f7fe fd7b 	bl	8007fc0 <USBD_Start>
 80094ca:	4603      	mov	r3, r0
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d001      	beq.n	80094d4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80094d0:	f7f7 fe9e 	bl	8001210 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80094d4:	bf00      	nop
 80094d6:	bd80      	pop	{r7, pc}
 80094d8:	2000012c 	.word	0x2000012c
 80094dc:	20000aa0 	.word	0x20000aa0
 80094e0:	20000024 	.word	0x20000024
 80094e4:	20000110 	.word	0x20000110

080094e8 <AUDIO_Init_FS>:
  * @param  Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param  options: Reserved for future use
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_Init_FS(uint32_t AudioFreq, uint32_t Volume, uint32_t options)
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b084      	sub	sp, #16
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	60f8      	str	r0, [r7, #12]
 80094f0:	60b9      	str	r1, [r7, #8]
 80094f2:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 0 */
  setFreq(AudioFreq, (uint8_t)options);
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	b2db      	uxtb	r3, r3
 80094f8:	4619      	mov	r1, r3
 80094fa:	68f8      	ldr	r0, [r7, #12]
 80094fc:	f7f7 fa8e 	bl	8000a1c <setFreq>
  bit_depth = options;
 8009500:	4a04      	ldr	r2, [pc, #16]	@ (8009514 <AUDIO_Init_FS+0x2c>)
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	6013      	str	r3, [r2, #0]
  reset();
 8009506:	f7f7 fad3 	bl	8000ab0 <reset>
  //UNUSED(AudioFreq);
  UNUSED(Volume);
  //bit_depth = options;
  //UNUSED(options);
  return (USBD_OK);
 800950a:	2300      	movs	r3, #0
  /* USER CODE END 0 */
}
 800950c:	4618      	mov	r0, r3
 800950e:	3710      	adds	r7, #16
 8009510:	46bd      	mov	sp, r7
 8009512:	bd80      	pop	{r7, pc}
 8009514:	2000010c 	.word	0x2000010c

08009518 <AUDIO_DeInit_FS>:
  * @brief  De-Initializes the AUDIO media low layer
  * @param  options: Reserved for future use
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_DeInit_FS(uint32_t options)
{
 8009518:	b480      	push	{r7}
 800951a:	b083      	sub	sp, #12
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 1 */
  UNUSED(options);
  return (USBD_OK);
 8009520:	2300      	movs	r3, #0
  /* USER CODE END 1 */
}
 8009522:	4618      	mov	r0, r3
 8009524:	370c      	adds	r7, #12
 8009526:	46bd      	mov	sp, r7
 8009528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952c:	4770      	bx	lr

0800952e <AUDIO_AudioCmd_FS>:
  * @param  size: Number of data to be sent (in bytes)
  * @param  cmd: Command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_AudioCmd_FS(uint8_t* pbuf, uint32_t size, uint8_t cmd)
{
 800952e:	b580      	push	{r7, lr}
 8009530:	b084      	sub	sp, #16
 8009532:	af00      	add	r7, sp, #0
 8009534:	60f8      	str	r0, [r7, #12]
 8009536:	60b9      	str	r1, [r7, #8]
 8009538:	4613      	mov	r3, r2
 800953a:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  switch(cmd)
 800953c:	79fb      	ldrb	r3, [r7, #7]
 800953e:	2b01      	cmp	r3, #1
 8009540:	d006      	beq.n	8009550 <AUDIO_AudioCmd_FS+0x22>
 8009542:	2b02      	cmp	r3, #2
 8009544:	d105      	bne.n	8009552 <AUDIO_AudioCmd_FS+0x24>
  {
    case AUDIO_CMD_START:
    break;

    case AUDIO_CMD_PLAY:
    	processData(pbuf, size);
 8009546:	68b9      	ldr	r1, [r7, #8]
 8009548:	68f8      	ldr	r0, [r7, #12]
 800954a:	f000 f839 	bl	80095c0 <processData>
    break;
 800954e:	e000      	b.n	8009552 <AUDIO_AudioCmd_FS+0x24>
    break;
 8009550:	bf00      	nop

  }
  UNUSED(pbuf);
  UNUSED(size);
  UNUSED(cmd);
  return (USBD_OK);
 8009552:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8009554:	4618      	mov	r0, r3
 8009556:	3710      	adds	r7, #16
 8009558:	46bd      	mov	sp, r7
 800955a:	bd80      	pop	{r7, pc}

0800955c <AUDIO_VolumeCtl_FS>:
  * @brief  Controls AUDIO Volume.
  * @param  vol: volume level (0..100)
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_VolumeCtl_FS(uint8_t vol)
{
 800955c:	b480      	push	{r7}
 800955e:	b083      	sub	sp, #12
 8009560:	af00      	add	r7, sp, #0
 8009562:	4603      	mov	r3, r0
 8009564:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 3 */
  UNUSED(vol);
  return (USBD_OK);
 8009566:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009568:	4618      	mov	r0, r3
 800956a:	370c      	adds	r7, #12
 800956c:	46bd      	mov	sp, r7
 800956e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009572:	4770      	bx	lr

08009574 <AUDIO_MuteCtl_FS>:
  * @brief  Controls AUDIO Mute.
  * @param  cmd: command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_MuteCtl_FS(uint8_t cmd)
{
 8009574:	b580      	push	{r7, lr}
 8009576:	b082      	sub	sp, #8
 8009578:	af00      	add	r7, sp, #0
 800957a:	4603      	mov	r3, r0
 800957c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  muteOutput(cmd);
 800957e:	79fb      	ldrb	r3, [r7, #7]
 8009580:	4618      	mov	r0, r3
 8009582:	f7f7 f9fb 	bl	800097c <muteOutput>
  UNUSED(cmd);
  return (USBD_OK);
 8009586:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009588:	4618      	mov	r0, r3
 800958a:	3708      	adds	r7, #8
 800958c:	46bd      	mov	sp, r7
 800958e:	bd80      	pop	{r7, pc}

08009590 <AUDIO_PeriodicTC_FS>:
  * @brief  AUDIO_PeriodicT_FS
  * @param  cmd: Command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_PeriodicTC_FS(uint8_t *pbuf, uint32_t size, uint8_t cmd)
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b084      	sub	sp, #16
 8009594:	af00      	add	r7, sp, #0
 8009596:	60f8      	str	r0, [r7, #12]
 8009598:	60b9      	str	r1, [r7, #8]
 800959a:	4613      	mov	r3, r2
 800959c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  processData(pbuf, size);
 800959e:	68b9      	ldr	r1, [r7, #8]
 80095a0:	68f8      	ldr	r0, [r7, #12]
 80095a2:	f000 f80d 	bl	80095c0 <processData>
  UNUSED(size);
  UNUSED(cmd);
  return (USBD_OK);
 80095a6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80095a8:	4618      	mov	r0, r3
 80095aa:	3710      	adds	r7, #16
 80095ac:	46bd      	mov	sp, r7
 80095ae:	bd80      	pop	{r7, pc}

080095b0 <AUDIO_GetState_FS>:
/**
  * @brief  Gets AUDIO State.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_GetState_FS(void)
{
 80095b0:	b480      	push	{r7}
 80095b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 80095b4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80095b6:	4618      	mov	r0, r3
 80095b8:	46bd      	mov	sp, r7
 80095ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095be:	4770      	bx	lr

080095c0 <processData>:
  USBD_AUDIO_Sync(&hUsbDeviceFS, AUDIO_OFFSET_HALF);
  /* USER CODE END 8 */
}

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void processData(uint8_t *data, uint32_t size){
 80095c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095c4:	b08b      	sub	sp, #44	@ 0x2c
 80095c6:	af00      	add	r7, sp, #0
 80095c8:	60f8      	str	r0, [r7, #12]
 80095ca:	60b9      	str	r1, [r7, #8]
	switch(bit_depth){
 80095cc:	4b6a      	ldr	r3, [pc, #424]	@ (8009778 <processData+0x1b8>)
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	2b10      	cmp	r3, #16
 80095d2:	d002      	beq.n	80095da <processData+0x1a>
 80095d4:	2b18      	cmp	r3, #24
 80095d6:	d05c      	beq.n	8009692 <processData+0xd2>
		    }
		    recieveData(arr, size/3);
		   	break;
		}
	}
}
 80095d8:	e0c8      	b.n	800976c <processData+0x1ac>
		{
 80095da:	466b      	mov	r3, sp
 80095dc:	461c      	mov	r4, r3
			uint32_t arr[size/2];
 80095de:	68bb      	ldr	r3, [r7, #8]
 80095e0:	0859      	lsrs	r1, r3, #1
 80095e2:	460b      	mov	r3, r1
 80095e4:	3b01      	subs	r3, #1
 80095e6:	617b      	str	r3, [r7, #20]
 80095e8:	2300      	movs	r3, #0
 80095ea:	6039      	str	r1, [r7, #0]
 80095ec:	607b      	str	r3, [r7, #4]
 80095ee:	f04f 0200 	mov.w	r2, #0
 80095f2:	f04f 0300 	mov.w	r3, #0
 80095f6:	e9d7 5600 	ldrd	r5, r6, [r7]
 80095fa:	4630      	mov	r0, r6
 80095fc:	0143      	lsls	r3, r0, #5
 80095fe:	4628      	mov	r0, r5
 8009600:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8009604:	4628      	mov	r0, r5
 8009606:	0142      	lsls	r2, r0, #5
 8009608:	2300      	movs	r3, #0
 800960a:	468a      	mov	sl, r1
 800960c:	469b      	mov	fp, r3
 800960e:	f04f 0200 	mov.w	r2, #0
 8009612:	f04f 0300 	mov.w	r3, #0
 8009616:	ea4f 134b 	mov.w	r3, fp, lsl #5
 800961a:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 800961e:	ea4f 124a 	mov.w	r2, sl, lsl #5
 8009622:	008b      	lsls	r3, r1, #2
 8009624:	3307      	adds	r3, #7
 8009626:	08db      	lsrs	r3, r3, #3
 8009628:	00db      	lsls	r3, r3, #3
 800962a:	ebad 0d03 	sub.w	sp, sp, r3
 800962e:	466b      	mov	r3, sp
 8009630:	3303      	adds	r3, #3
 8009632:	089b      	lsrs	r3, r3, #2
 8009634:	009b      	lsls	r3, r3, #2
 8009636:	613b      	str	r3, [r7, #16]
			for(int i = 0; i < size/2; i++){
 8009638:	2300      	movs	r3, #0
 800963a:	627b      	str	r3, [r7, #36]	@ 0x24
 800963c:	e01a      	b.n	8009674 <processData+0xb4>
				arr[i] = 0;
 800963e:	693b      	ldr	r3, [r7, #16]
 8009640:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009642:	2100      	movs	r1, #0
 8009644:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				arr[i] = (((data[2 * i + 1]) << 8) + ((data[2 * i])));
 8009648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800964a:	005b      	lsls	r3, r3, #1
 800964c:	3301      	adds	r3, #1
 800964e:	68fa      	ldr	r2, [r7, #12]
 8009650:	4413      	add	r3, r2
 8009652:	781b      	ldrb	r3, [r3, #0]
 8009654:	021b      	lsls	r3, r3, #8
 8009656:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009658:	0052      	lsls	r2, r2, #1
 800965a:	4611      	mov	r1, r2
 800965c:	68fa      	ldr	r2, [r7, #12]
 800965e:	440a      	add	r2, r1
 8009660:	7812      	ldrb	r2, [r2, #0]
 8009662:	4413      	add	r3, r2
 8009664:	4619      	mov	r1, r3
 8009666:	693b      	ldr	r3, [r7, #16]
 8009668:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800966a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for(int i = 0; i < size/2; i++){
 800966e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009670:	3301      	adds	r3, #1
 8009672:	627b      	str	r3, [r7, #36]	@ 0x24
 8009674:	68bb      	ldr	r3, [r7, #8]
 8009676:	085a      	lsrs	r2, r3, #1
 8009678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800967a:	429a      	cmp	r2, r3
 800967c:	d8df      	bhi.n	800963e <processData+0x7e>
			recieveData(arr, size/2);
 800967e:	68bb      	ldr	r3, [r7, #8]
 8009680:	085b      	lsrs	r3, r3, #1
 8009682:	b29b      	uxth	r3, r3
 8009684:	4619      	mov	r1, r3
 8009686:	6938      	ldr	r0, [r7, #16]
 8009688:	f7f6 ffa8 	bl	80005dc <recieveData>
			break;
 800968c:	bf00      	nop
 800968e:	46a5      	mov	sp, r4
}
 8009690:	e06c      	b.n	800976c <processData+0x1ac>
		case 24U:{
 8009692:	466b      	mov	r3, sp
 8009694:	461e      	mov	r6, r3
	    	uint32_t arr[size/3];
 8009696:	68bb      	ldr	r3, [r7, #8]
 8009698:	4a38      	ldr	r2, [pc, #224]	@ (800977c <processData+0x1bc>)
 800969a:	fba2 2303 	umull	r2, r3, r2, r3
 800969e:	0859      	lsrs	r1, r3, #1
 80096a0:	460b      	mov	r3, r1
 80096a2:	3b01      	subs	r3, #1
 80096a4:	61fb      	str	r3, [r7, #28]
 80096a6:	2300      	movs	r3, #0
 80096a8:	4688      	mov	r8, r1
 80096aa:	4699      	mov	r9, r3
 80096ac:	f04f 0200 	mov.w	r2, #0
 80096b0:	f04f 0300 	mov.w	r3, #0
 80096b4:	ea4f 1349 	mov.w	r3, r9, lsl #5
 80096b8:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 80096bc:	ea4f 1248 	mov.w	r2, r8, lsl #5
 80096c0:	2300      	movs	r3, #0
 80096c2:	460c      	mov	r4, r1
 80096c4:	461d      	mov	r5, r3
 80096c6:	f04f 0200 	mov.w	r2, #0
 80096ca:	f04f 0300 	mov.w	r3, #0
 80096ce:	016b      	lsls	r3, r5, #5
 80096d0:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 80096d4:	0162      	lsls	r2, r4, #5
 80096d6:	008b      	lsls	r3, r1, #2
 80096d8:	3307      	adds	r3, #7
 80096da:	08db      	lsrs	r3, r3, #3
 80096dc:	00db      	lsls	r3, r3, #3
 80096de:	ebad 0d03 	sub.w	sp, sp, r3
 80096e2:	466b      	mov	r3, sp
 80096e4:	3303      	adds	r3, #3
 80096e6:	089b      	lsrs	r3, r3, #2
 80096e8:	009b      	lsls	r3, r3, #2
 80096ea:	61bb      	str	r3, [r7, #24]
		    for(int i = 0; i < size/3; i++){
 80096ec:	2300      	movs	r3, #0
 80096ee:	623b      	str	r3, [r7, #32]
 80096f0:	e028      	b.n	8009744 <processData+0x184>
		    	arr[i] = 0;
 80096f2:	69bb      	ldr	r3, [r7, #24]
 80096f4:	6a3a      	ldr	r2, [r7, #32]
 80096f6:	2100      	movs	r1, #0
 80096f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		    	arr[i] = (((data[3 * i + 2]) << 8) + ((data[3 * i + 1])) + ((data[3 * i]) << 24));
 80096fc:	6a3a      	ldr	r2, [r7, #32]
 80096fe:	4613      	mov	r3, r2
 8009700:	005b      	lsls	r3, r3, #1
 8009702:	4413      	add	r3, r2
 8009704:	3302      	adds	r3, #2
 8009706:	68fa      	ldr	r2, [r7, #12]
 8009708:	4413      	add	r3, r2
 800970a:	781b      	ldrb	r3, [r3, #0]
 800970c:	0219      	lsls	r1, r3, #8
 800970e:	6a3a      	ldr	r2, [r7, #32]
 8009710:	4613      	mov	r3, r2
 8009712:	005b      	lsls	r3, r3, #1
 8009714:	4413      	add	r3, r2
 8009716:	3301      	adds	r3, #1
 8009718:	68fa      	ldr	r2, [r7, #12]
 800971a:	4413      	add	r3, r2
 800971c:	781b      	ldrb	r3, [r3, #0]
 800971e:	4419      	add	r1, r3
 8009720:	6a3a      	ldr	r2, [r7, #32]
 8009722:	4613      	mov	r3, r2
 8009724:	005b      	lsls	r3, r3, #1
 8009726:	4413      	add	r3, r2
 8009728:	461a      	mov	r2, r3
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	4413      	add	r3, r2
 800972e:	781b      	ldrb	r3, [r3, #0]
 8009730:	061b      	lsls	r3, r3, #24
 8009732:	440b      	add	r3, r1
 8009734:	4619      	mov	r1, r3
 8009736:	69bb      	ldr	r3, [r7, #24]
 8009738:	6a3a      	ldr	r2, [r7, #32]
 800973a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		    for(int i = 0; i < size/3; i++){
 800973e:	6a3b      	ldr	r3, [r7, #32]
 8009740:	3301      	adds	r3, #1
 8009742:	623b      	str	r3, [r7, #32]
 8009744:	68bb      	ldr	r3, [r7, #8]
 8009746:	4a0d      	ldr	r2, [pc, #52]	@ (800977c <processData+0x1bc>)
 8009748:	fba2 2303 	umull	r2, r3, r2, r3
 800974c:	085a      	lsrs	r2, r3, #1
 800974e:	6a3b      	ldr	r3, [r7, #32]
 8009750:	429a      	cmp	r2, r3
 8009752:	d8ce      	bhi.n	80096f2 <processData+0x132>
		    recieveData(arr, size/3);
 8009754:	68bb      	ldr	r3, [r7, #8]
 8009756:	4a09      	ldr	r2, [pc, #36]	@ (800977c <processData+0x1bc>)
 8009758:	fba2 2303 	umull	r2, r3, r2, r3
 800975c:	085b      	lsrs	r3, r3, #1
 800975e:	b29b      	uxth	r3, r3
 8009760:	4619      	mov	r1, r3
 8009762:	69b8      	ldr	r0, [r7, #24]
 8009764:	f7f6 ff3a 	bl	80005dc <recieveData>
		   	break;
 8009768:	bf00      	nop
 800976a:	46b5      	mov	sp, r6
}
 800976c:	bf00      	nop
 800976e:	372c      	adds	r7, #44	@ 0x2c
 8009770:	46bd      	mov	sp, r7
 8009772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009776:	bf00      	nop
 8009778:	2000010c 	.word	0x2000010c
 800977c:	aaaaaaab 	.word	0xaaaaaaab

08009780 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009780:	b480      	push	{r7}
 8009782:	b083      	sub	sp, #12
 8009784:	af00      	add	r7, sp, #0
 8009786:	4603      	mov	r3, r0
 8009788:	6039      	str	r1, [r7, #0]
 800978a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800978c:	683b      	ldr	r3, [r7, #0]
 800978e:	2212      	movs	r2, #18
 8009790:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009792:	4b03      	ldr	r3, [pc, #12]	@ (80097a0 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009794:	4618      	mov	r0, r3
 8009796:	370c      	adds	r7, #12
 8009798:	46bd      	mov	sp, r7
 800979a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979e:	4770      	bx	lr
 80097a0:	20000148 	.word	0x20000148

080097a4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80097a4:	b480      	push	{r7}
 80097a6:	b083      	sub	sp, #12
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	4603      	mov	r3, r0
 80097ac:	6039      	str	r1, [r7, #0]
 80097ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80097b0:	683b      	ldr	r3, [r7, #0]
 80097b2:	2204      	movs	r2, #4
 80097b4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80097b6:	4b03      	ldr	r3, [pc, #12]	@ (80097c4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80097b8:	4618      	mov	r0, r3
 80097ba:	370c      	adds	r7, #12
 80097bc:	46bd      	mov	sp, r7
 80097be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c2:	4770      	bx	lr
 80097c4:	2000015c 	.word	0x2000015c

080097c8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80097c8:	b580      	push	{r7, lr}
 80097ca:	b082      	sub	sp, #8
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	4603      	mov	r3, r0
 80097d0:	6039      	str	r1, [r7, #0]
 80097d2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80097d4:	79fb      	ldrb	r3, [r7, #7]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d105      	bne.n	80097e6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80097da:	683a      	ldr	r2, [r7, #0]
 80097dc:	4907      	ldr	r1, [pc, #28]	@ (80097fc <USBD_FS_ProductStrDescriptor+0x34>)
 80097de:	4808      	ldr	r0, [pc, #32]	@ (8009800 <USBD_FS_ProductStrDescriptor+0x38>)
 80097e0:	f7ff fd66 	bl	80092b0 <USBD_GetString>
 80097e4:	e004      	b.n	80097f0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80097e6:	683a      	ldr	r2, [r7, #0]
 80097e8:	4904      	ldr	r1, [pc, #16]	@ (80097fc <USBD_FS_ProductStrDescriptor+0x34>)
 80097ea:	4805      	ldr	r0, [pc, #20]	@ (8009800 <USBD_FS_ProductStrDescriptor+0x38>)
 80097ec:	f7ff fd60 	bl	80092b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80097f0:	4b02      	ldr	r3, [pc, #8]	@ (80097fc <USBD_FS_ProductStrDescriptor+0x34>)
}
 80097f2:	4618      	mov	r0, r3
 80097f4:	3708      	adds	r7, #8
 80097f6:	46bd      	mov	sp, r7
 80097f8:	bd80      	pop	{r7, pc}
 80097fa:	bf00      	nop
 80097fc:	20000d7c 	.word	0x20000d7c
 8009800:	0800af2c 	.word	0x0800af2c

08009804 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009804:	b580      	push	{r7, lr}
 8009806:	b082      	sub	sp, #8
 8009808:	af00      	add	r7, sp, #0
 800980a:	4603      	mov	r3, r0
 800980c:	6039      	str	r1, [r7, #0]
 800980e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009810:	683a      	ldr	r2, [r7, #0]
 8009812:	4904      	ldr	r1, [pc, #16]	@ (8009824 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009814:	4804      	ldr	r0, [pc, #16]	@ (8009828 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009816:	f7ff fd4b 	bl	80092b0 <USBD_GetString>
  return USBD_StrDesc;
 800981a:	4b02      	ldr	r3, [pc, #8]	@ (8009824 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800981c:	4618      	mov	r0, r3
 800981e:	3708      	adds	r7, #8
 8009820:	46bd      	mov	sp, r7
 8009822:	bd80      	pop	{r7, pc}
 8009824:	20000d7c 	.word	0x20000d7c
 8009828:	0800af40 	.word	0x0800af40

0800982c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800982c:	b580      	push	{r7, lr}
 800982e:	b082      	sub	sp, #8
 8009830:	af00      	add	r7, sp, #0
 8009832:	4603      	mov	r3, r0
 8009834:	6039      	str	r1, [r7, #0]
 8009836:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009838:	683b      	ldr	r3, [r7, #0]
 800983a:	221a      	movs	r2, #26
 800983c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800983e:	f000 f843 	bl	80098c8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009842:	4b02      	ldr	r3, [pc, #8]	@ (800984c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009844:	4618      	mov	r0, r3
 8009846:	3708      	adds	r7, #8
 8009848:	46bd      	mov	sp, r7
 800984a:	bd80      	pop	{r7, pc}
 800984c:	20000160 	.word	0x20000160

08009850 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009850:	b580      	push	{r7, lr}
 8009852:	b082      	sub	sp, #8
 8009854:	af00      	add	r7, sp, #0
 8009856:	4603      	mov	r3, r0
 8009858:	6039      	str	r1, [r7, #0]
 800985a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800985c:	79fb      	ldrb	r3, [r7, #7]
 800985e:	2b00      	cmp	r3, #0
 8009860:	d105      	bne.n	800986e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009862:	683a      	ldr	r2, [r7, #0]
 8009864:	4907      	ldr	r1, [pc, #28]	@ (8009884 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009866:	4808      	ldr	r0, [pc, #32]	@ (8009888 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009868:	f7ff fd22 	bl	80092b0 <USBD_GetString>
 800986c:	e004      	b.n	8009878 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800986e:	683a      	ldr	r2, [r7, #0]
 8009870:	4904      	ldr	r1, [pc, #16]	@ (8009884 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009872:	4805      	ldr	r0, [pc, #20]	@ (8009888 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009874:	f7ff fd1c 	bl	80092b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009878:	4b02      	ldr	r3, [pc, #8]	@ (8009884 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800987a:	4618      	mov	r0, r3
 800987c:	3708      	adds	r7, #8
 800987e:	46bd      	mov	sp, r7
 8009880:	bd80      	pop	{r7, pc}
 8009882:	bf00      	nop
 8009884:	20000d7c 	.word	0x20000d7c
 8009888:	0800af54 	.word	0x0800af54

0800988c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800988c:	b580      	push	{r7, lr}
 800988e:	b082      	sub	sp, #8
 8009890:	af00      	add	r7, sp, #0
 8009892:	4603      	mov	r3, r0
 8009894:	6039      	str	r1, [r7, #0]
 8009896:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009898:	79fb      	ldrb	r3, [r7, #7]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d105      	bne.n	80098aa <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800989e:	683a      	ldr	r2, [r7, #0]
 80098a0:	4907      	ldr	r1, [pc, #28]	@ (80098c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80098a2:	4808      	ldr	r0, [pc, #32]	@ (80098c4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80098a4:	f7ff fd04 	bl	80092b0 <USBD_GetString>
 80098a8:	e004      	b.n	80098b4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80098aa:	683a      	ldr	r2, [r7, #0]
 80098ac:	4904      	ldr	r1, [pc, #16]	@ (80098c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80098ae:	4805      	ldr	r0, [pc, #20]	@ (80098c4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80098b0:	f7ff fcfe 	bl	80092b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80098b4:	4b02      	ldr	r3, [pc, #8]	@ (80098c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80098b6:	4618      	mov	r0, r3
 80098b8:	3708      	adds	r7, #8
 80098ba:	46bd      	mov	sp, r7
 80098bc:	bd80      	pop	{r7, pc}
 80098be:	bf00      	nop
 80098c0:	20000d7c 	.word	0x20000d7c
 80098c4:	0800af64 	.word	0x0800af64

080098c8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b084      	sub	sp, #16
 80098cc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80098ce:	4b0f      	ldr	r3, [pc, #60]	@ (800990c <Get_SerialNum+0x44>)
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80098d4:	4b0e      	ldr	r3, [pc, #56]	@ (8009910 <Get_SerialNum+0x48>)
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80098da:	4b0e      	ldr	r3, [pc, #56]	@ (8009914 <Get_SerialNum+0x4c>)
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80098e0:	68fa      	ldr	r2, [r7, #12]
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	4413      	add	r3, r2
 80098e6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d009      	beq.n	8009902 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80098ee:	2208      	movs	r2, #8
 80098f0:	4909      	ldr	r1, [pc, #36]	@ (8009918 <Get_SerialNum+0x50>)
 80098f2:	68f8      	ldr	r0, [r7, #12]
 80098f4:	f000 f814 	bl	8009920 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80098f8:	2204      	movs	r2, #4
 80098fa:	4908      	ldr	r1, [pc, #32]	@ (800991c <Get_SerialNum+0x54>)
 80098fc:	68b8      	ldr	r0, [r7, #8]
 80098fe:	f000 f80f 	bl	8009920 <IntToUnicode>
  }
}
 8009902:	bf00      	nop
 8009904:	3710      	adds	r7, #16
 8009906:	46bd      	mov	sp, r7
 8009908:	bd80      	pop	{r7, pc}
 800990a:	bf00      	nop
 800990c:	1fff7a10 	.word	0x1fff7a10
 8009910:	1fff7a14 	.word	0x1fff7a14
 8009914:	1fff7a18 	.word	0x1fff7a18
 8009918:	20000162 	.word	0x20000162
 800991c:	20000172 	.word	0x20000172

08009920 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009920:	b480      	push	{r7}
 8009922:	b087      	sub	sp, #28
 8009924:	af00      	add	r7, sp, #0
 8009926:	60f8      	str	r0, [r7, #12]
 8009928:	60b9      	str	r1, [r7, #8]
 800992a:	4613      	mov	r3, r2
 800992c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800992e:	2300      	movs	r3, #0
 8009930:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009932:	2300      	movs	r3, #0
 8009934:	75fb      	strb	r3, [r7, #23]
 8009936:	e027      	b.n	8009988 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	0f1b      	lsrs	r3, r3, #28
 800993c:	2b09      	cmp	r3, #9
 800993e:	d80b      	bhi.n	8009958 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	0f1b      	lsrs	r3, r3, #28
 8009944:	b2da      	uxtb	r2, r3
 8009946:	7dfb      	ldrb	r3, [r7, #23]
 8009948:	005b      	lsls	r3, r3, #1
 800994a:	4619      	mov	r1, r3
 800994c:	68bb      	ldr	r3, [r7, #8]
 800994e:	440b      	add	r3, r1
 8009950:	3230      	adds	r2, #48	@ 0x30
 8009952:	b2d2      	uxtb	r2, r2
 8009954:	701a      	strb	r2, [r3, #0]
 8009956:	e00a      	b.n	800996e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	0f1b      	lsrs	r3, r3, #28
 800995c:	b2da      	uxtb	r2, r3
 800995e:	7dfb      	ldrb	r3, [r7, #23]
 8009960:	005b      	lsls	r3, r3, #1
 8009962:	4619      	mov	r1, r3
 8009964:	68bb      	ldr	r3, [r7, #8]
 8009966:	440b      	add	r3, r1
 8009968:	3237      	adds	r2, #55	@ 0x37
 800996a:	b2d2      	uxtb	r2, r2
 800996c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	011b      	lsls	r3, r3, #4
 8009972:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009974:	7dfb      	ldrb	r3, [r7, #23]
 8009976:	005b      	lsls	r3, r3, #1
 8009978:	3301      	adds	r3, #1
 800997a:	68ba      	ldr	r2, [r7, #8]
 800997c:	4413      	add	r3, r2
 800997e:	2200      	movs	r2, #0
 8009980:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009982:	7dfb      	ldrb	r3, [r7, #23]
 8009984:	3301      	adds	r3, #1
 8009986:	75fb      	strb	r3, [r7, #23]
 8009988:	7dfa      	ldrb	r2, [r7, #23]
 800998a:	79fb      	ldrb	r3, [r7, #7]
 800998c:	429a      	cmp	r2, r3
 800998e:	d3d3      	bcc.n	8009938 <IntToUnicode+0x18>
  }
}
 8009990:	bf00      	nop
 8009992:	bf00      	nop
 8009994:	371c      	adds	r7, #28
 8009996:	46bd      	mov	sp, r7
 8009998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999c:	4770      	bx	lr
	...

080099a0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b08a      	sub	sp, #40	@ 0x28
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80099a8:	f107 0314 	add.w	r3, r7, #20
 80099ac:	2200      	movs	r2, #0
 80099ae:	601a      	str	r2, [r3, #0]
 80099b0:	605a      	str	r2, [r3, #4]
 80099b2:	609a      	str	r2, [r3, #8]
 80099b4:	60da      	str	r2, [r3, #12]
 80099b6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80099c0:	d13a      	bne.n	8009a38 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80099c2:	2300      	movs	r3, #0
 80099c4:	613b      	str	r3, [r7, #16]
 80099c6:	4b1e      	ldr	r3, [pc, #120]	@ (8009a40 <HAL_PCD_MspInit+0xa0>)
 80099c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80099ca:	4a1d      	ldr	r2, [pc, #116]	@ (8009a40 <HAL_PCD_MspInit+0xa0>)
 80099cc:	f043 0301 	orr.w	r3, r3, #1
 80099d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80099d2:	4b1b      	ldr	r3, [pc, #108]	@ (8009a40 <HAL_PCD_MspInit+0xa0>)
 80099d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80099d6:	f003 0301 	and.w	r3, r3, #1
 80099da:	613b      	str	r3, [r7, #16]
 80099dc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80099de:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80099e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80099e4:	2302      	movs	r3, #2
 80099e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80099e8:	2300      	movs	r3, #0
 80099ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80099ec:	2303      	movs	r3, #3
 80099ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80099f0:	230a      	movs	r3, #10
 80099f2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80099f4:	f107 0314 	add.w	r3, r7, #20
 80099f8:	4619      	mov	r1, r3
 80099fa:	4812      	ldr	r0, [pc, #72]	@ (8009a44 <HAL_PCD_MspInit+0xa4>)
 80099fc:	f7f9 f81a 	bl	8002a34 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009a00:	4b0f      	ldr	r3, [pc, #60]	@ (8009a40 <HAL_PCD_MspInit+0xa0>)
 8009a02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a04:	4a0e      	ldr	r2, [pc, #56]	@ (8009a40 <HAL_PCD_MspInit+0xa0>)
 8009a06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009a0a:	6353      	str	r3, [r2, #52]	@ 0x34
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	60fb      	str	r3, [r7, #12]
 8009a10:	4b0b      	ldr	r3, [pc, #44]	@ (8009a40 <HAL_PCD_MspInit+0xa0>)
 8009a12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009a14:	4a0a      	ldr	r2, [pc, #40]	@ (8009a40 <HAL_PCD_MspInit+0xa0>)
 8009a16:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009a1a:	6453      	str	r3, [r2, #68]	@ 0x44
 8009a1c:	4b08      	ldr	r3, [pc, #32]	@ (8009a40 <HAL_PCD_MspInit+0xa0>)
 8009a1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009a20:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009a24:	60fb      	str	r3, [r7, #12]
 8009a26:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009a28:	2200      	movs	r2, #0
 8009a2a:	2100      	movs	r1, #0
 8009a2c:	2043      	movs	r0, #67	@ 0x43
 8009a2e:	f7f8 fb8c 	bl	800214a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009a32:	2043      	movs	r0, #67	@ 0x43
 8009a34:	f7f8 fba5 	bl	8002182 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009a38:	bf00      	nop
 8009a3a:	3728      	adds	r7, #40	@ 0x28
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	bd80      	pop	{r7, pc}
 8009a40:	40023800 	.word	0x40023800
 8009a44:	40020000 	.word	0x40020000

08009a48 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b082      	sub	sp, #8
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009a5c:	4619      	mov	r1, r3
 8009a5e:	4610      	mov	r0, r2
 8009a60:	f7fe fafb 	bl	800805a <USBD_LL_SetupStage>
}
 8009a64:	bf00      	nop
 8009a66:	3708      	adds	r7, #8
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	bd80      	pop	{r7, pc}

08009a6c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b082      	sub	sp, #8
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
 8009a74:	460b      	mov	r3, r1
 8009a76:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8009a7e:	78fa      	ldrb	r2, [r7, #3]
 8009a80:	6879      	ldr	r1, [r7, #4]
 8009a82:	4613      	mov	r3, r2
 8009a84:	00db      	lsls	r3, r3, #3
 8009a86:	4413      	add	r3, r2
 8009a88:	009b      	lsls	r3, r3, #2
 8009a8a:	440b      	add	r3, r1
 8009a8c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8009a90:	681a      	ldr	r2, [r3, #0]
 8009a92:	78fb      	ldrb	r3, [r7, #3]
 8009a94:	4619      	mov	r1, r3
 8009a96:	f7fe fb35 	bl	8008104 <USBD_LL_DataOutStage>
}
 8009a9a:	bf00      	nop
 8009a9c:	3708      	adds	r7, #8
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	bd80      	pop	{r7, pc}

08009aa2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009aa2:	b580      	push	{r7, lr}
 8009aa4:	b082      	sub	sp, #8
 8009aa6:	af00      	add	r7, sp, #0
 8009aa8:	6078      	str	r0, [r7, #4]
 8009aaa:	460b      	mov	r3, r1
 8009aac:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8009ab4:	78fa      	ldrb	r2, [r7, #3]
 8009ab6:	6879      	ldr	r1, [r7, #4]
 8009ab8:	4613      	mov	r3, r2
 8009aba:	00db      	lsls	r3, r3, #3
 8009abc:	4413      	add	r3, r2
 8009abe:	009b      	lsls	r3, r3, #2
 8009ac0:	440b      	add	r3, r1
 8009ac2:	3320      	adds	r3, #32
 8009ac4:	681a      	ldr	r2, [r3, #0]
 8009ac6:	78fb      	ldrb	r3, [r7, #3]
 8009ac8:	4619      	mov	r1, r3
 8009aca:	f7fe fbce 	bl	800826a <USBD_LL_DataInStage>
}
 8009ace:	bf00      	nop
 8009ad0:	3708      	adds	r7, #8
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	bd80      	pop	{r7, pc}

08009ad6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ad6:	b580      	push	{r7, lr}
 8009ad8:	b082      	sub	sp, #8
 8009ada:	af00      	add	r7, sp, #0
 8009adc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	f7fe fd08 	bl	80084fa <USBD_LL_SOF>
}
 8009aea:	bf00      	nop
 8009aec:	3708      	adds	r7, #8
 8009aee:	46bd      	mov	sp, r7
 8009af0:	bd80      	pop	{r7, pc}

08009af2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009af2:	b580      	push	{r7, lr}
 8009af4:	b084      	sub	sp, #16
 8009af6:	af00      	add	r7, sp, #0
 8009af8:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009afa:	2301      	movs	r3, #1
 8009afc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	79db      	ldrb	r3, [r3, #7]
 8009b02:	2b02      	cmp	r3, #2
 8009b04:	d001      	beq.n	8009b0a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009b06:	f7f7 fb83 	bl	8001210 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009b10:	7bfa      	ldrb	r2, [r7, #15]
 8009b12:	4611      	mov	r1, r2
 8009b14:	4618      	mov	r0, r3
 8009b16:	f7fe fcac 	bl	8008472 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009b20:	4618      	mov	r0, r3
 8009b22:	f7fe fc54 	bl	80083ce <USBD_LL_Reset>
}
 8009b26:	bf00      	nop
 8009b28:	3710      	adds	r7, #16
 8009b2a:	46bd      	mov	sp, r7
 8009b2c:	bd80      	pop	{r7, pc}
	...

08009b30 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b082      	sub	sp, #8
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009b3e:	4618      	mov	r0, r3
 8009b40:	f7fe fca7 	bl	8008492 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	687a      	ldr	r2, [r7, #4]
 8009b50:	6812      	ldr	r2, [r2, #0]
 8009b52:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009b56:	f043 0301 	orr.w	r3, r3, #1
 8009b5a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	7adb      	ldrb	r3, [r3, #11]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d005      	beq.n	8009b70 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009b64:	4b04      	ldr	r3, [pc, #16]	@ (8009b78 <HAL_PCD_SuspendCallback+0x48>)
 8009b66:	691b      	ldr	r3, [r3, #16]
 8009b68:	4a03      	ldr	r2, [pc, #12]	@ (8009b78 <HAL_PCD_SuspendCallback+0x48>)
 8009b6a:	f043 0306 	orr.w	r3, r3, #6
 8009b6e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009b70:	bf00      	nop
 8009b72:	3708      	adds	r7, #8
 8009b74:	46bd      	mov	sp, r7
 8009b76:	bd80      	pop	{r7, pc}
 8009b78:	e000ed00 	.word	0xe000ed00

08009b7c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	b082      	sub	sp, #8
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	f7fe fc9d 	bl	80084ca <USBD_LL_Resume>
}
 8009b90:	bf00      	nop
 8009b92:	3708      	adds	r7, #8
 8009b94:	46bd      	mov	sp, r7
 8009b96:	bd80      	pop	{r7, pc}

08009b98 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b082      	sub	sp, #8
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
 8009ba0:	460b      	mov	r3, r1
 8009ba2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009baa:	78fa      	ldrb	r2, [r7, #3]
 8009bac:	4611      	mov	r1, r2
 8009bae:	4618      	mov	r0, r3
 8009bb0:	f7fe fcf5 	bl	800859e <USBD_LL_IsoOUTIncomplete>
}
 8009bb4:	bf00      	nop
 8009bb6:	3708      	adds	r7, #8
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	bd80      	pop	{r7, pc}

08009bbc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	b082      	sub	sp, #8
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
 8009bc4:	460b      	mov	r3, r1
 8009bc6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009bce:	78fa      	ldrb	r2, [r7, #3]
 8009bd0:	4611      	mov	r1, r2
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	f7fe fcb1 	bl	800853a <USBD_LL_IsoINIncomplete>
}
 8009bd8:	bf00      	nop
 8009bda:	3708      	adds	r7, #8
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	bd80      	pop	{r7, pc}

08009be0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b082      	sub	sp, #8
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009bee:	4618      	mov	r0, r3
 8009bf0:	f7fe fd07 	bl	8008602 <USBD_LL_DevConnected>
}
 8009bf4:	bf00      	nop
 8009bf6:	3708      	adds	r7, #8
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	bd80      	pop	{r7, pc}

08009bfc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	b082      	sub	sp, #8
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	f7fe fd04 	bl	8008618 <USBD_LL_DevDisconnected>
}
 8009c10:	bf00      	nop
 8009c12:	3708      	adds	r7, #8
 8009c14:	46bd      	mov	sp, r7
 8009c16:	bd80      	pop	{r7, pc}

08009c18 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b082      	sub	sp, #8
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	781b      	ldrb	r3, [r3, #0]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d13c      	bne.n	8009ca2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009c28:	4a20      	ldr	r2, [pc, #128]	@ (8009cac <USBD_LL_Init+0x94>)
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	4a1e      	ldr	r2, [pc, #120]	@ (8009cac <USBD_LL_Init+0x94>)
 8009c34:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009c38:	4b1c      	ldr	r3, [pc, #112]	@ (8009cac <USBD_LL_Init+0x94>)
 8009c3a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8009c3e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009c40:	4b1a      	ldr	r3, [pc, #104]	@ (8009cac <USBD_LL_Init+0x94>)
 8009c42:	2204      	movs	r2, #4
 8009c44:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009c46:	4b19      	ldr	r3, [pc, #100]	@ (8009cac <USBD_LL_Init+0x94>)
 8009c48:	2202      	movs	r2, #2
 8009c4a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009c4c:	4b17      	ldr	r3, [pc, #92]	@ (8009cac <USBD_LL_Init+0x94>)
 8009c4e:	2200      	movs	r2, #0
 8009c50:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009c52:	4b16      	ldr	r3, [pc, #88]	@ (8009cac <USBD_LL_Init+0x94>)
 8009c54:	2202      	movs	r2, #2
 8009c56:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009c58:	4b14      	ldr	r3, [pc, #80]	@ (8009cac <USBD_LL_Init+0x94>)
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009c5e:	4b13      	ldr	r3, [pc, #76]	@ (8009cac <USBD_LL_Init+0x94>)
 8009c60:	2200      	movs	r2, #0
 8009c62:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009c64:	4b11      	ldr	r3, [pc, #68]	@ (8009cac <USBD_LL_Init+0x94>)
 8009c66:	2200      	movs	r2, #0
 8009c68:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009c6a:	4b10      	ldr	r3, [pc, #64]	@ (8009cac <USBD_LL_Init+0x94>)
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009c70:	4b0e      	ldr	r3, [pc, #56]	@ (8009cac <USBD_LL_Init+0x94>)
 8009c72:	2200      	movs	r2, #0
 8009c74:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009c76:	480d      	ldr	r0, [pc, #52]	@ (8009cac <USBD_LL_Init+0x94>)
 8009c78:	f7fa f928 	bl	8003ecc <HAL_PCD_Init>
 8009c7c:	4603      	mov	r3, r0
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d001      	beq.n	8009c86 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009c82:	f7f7 fac5 	bl	8001210 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0xf0);
 8009c86:	21f0      	movs	r1, #240	@ 0xf0
 8009c88:	4808      	ldr	r0, [pc, #32]	@ (8009cac <USBD_LL_Init+0x94>)
 8009c8a:	f7fb fb8c 	bl	80053a6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009c8e:	2240      	movs	r2, #64	@ 0x40
 8009c90:	2100      	movs	r1, #0
 8009c92:	4806      	ldr	r0, [pc, #24]	@ (8009cac <USBD_LL_Init+0x94>)
 8009c94:	f7fb fb40 	bl	8005318 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009c98:	2280      	movs	r2, #128	@ 0x80
 8009c9a:	2101      	movs	r1, #1
 8009c9c:	4803      	ldr	r0, [pc, #12]	@ (8009cac <USBD_LL_Init+0x94>)
 8009c9e:	f7fb fb3b 	bl	8005318 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009ca2:	2300      	movs	r3, #0
}
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	3708      	adds	r7, #8
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	bd80      	pop	{r7, pc}
 8009cac:	20000f7c 	.word	0x20000f7c

08009cb0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b084      	sub	sp, #16
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009cb8:	2300      	movs	r3, #0
 8009cba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	f7fa fa0f 	bl	80040ea <HAL_PCD_Start>
 8009ccc:	4603      	mov	r3, r0
 8009cce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009cd0:	7bfb      	ldrb	r3, [r7, #15]
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	f000 f962 	bl	8009f9c <USBD_Get_USB_Status>
 8009cd8:	4603      	mov	r3, r0
 8009cda:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009cdc:	7bbb      	ldrb	r3, [r7, #14]
}
 8009cde:	4618      	mov	r0, r3
 8009ce0:	3710      	adds	r7, #16
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	bd80      	pop	{r7, pc}

08009ce6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009ce6:	b580      	push	{r7, lr}
 8009ce8:	b084      	sub	sp, #16
 8009cea:	af00      	add	r7, sp, #0
 8009cec:	6078      	str	r0, [r7, #4]
 8009cee:	4608      	mov	r0, r1
 8009cf0:	4611      	mov	r1, r2
 8009cf2:	461a      	mov	r2, r3
 8009cf4:	4603      	mov	r3, r0
 8009cf6:	70fb      	strb	r3, [r7, #3]
 8009cf8:	460b      	mov	r3, r1
 8009cfa:	70bb      	strb	r3, [r7, #2]
 8009cfc:	4613      	mov	r3, r2
 8009cfe:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d00:	2300      	movs	r3, #0
 8009d02:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d04:	2300      	movs	r3, #0
 8009d06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009d0e:	78bb      	ldrb	r3, [r7, #2]
 8009d10:	883a      	ldrh	r2, [r7, #0]
 8009d12:	78f9      	ldrb	r1, [r7, #3]
 8009d14:	f7fa fee8 	bl	8004ae8 <HAL_PCD_EP_Open>
 8009d18:	4603      	mov	r3, r0
 8009d1a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d1c:	7bfb      	ldrb	r3, [r7, #15]
 8009d1e:	4618      	mov	r0, r3
 8009d20:	f000 f93c 	bl	8009f9c <USBD_Get_USB_Status>
 8009d24:	4603      	mov	r3, r0
 8009d26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d28:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	3710      	adds	r7, #16
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	bd80      	pop	{r7, pc}

08009d32 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009d32:	b580      	push	{r7, lr}
 8009d34:	b084      	sub	sp, #16
 8009d36:	af00      	add	r7, sp, #0
 8009d38:	6078      	str	r0, [r7, #4]
 8009d3a:	460b      	mov	r3, r1
 8009d3c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d3e:	2300      	movs	r3, #0
 8009d40:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d42:	2300      	movs	r3, #0
 8009d44:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009d4c:	78fa      	ldrb	r2, [r7, #3]
 8009d4e:	4611      	mov	r1, r2
 8009d50:	4618      	mov	r0, r3
 8009d52:	f7fa ff33 	bl	8004bbc <HAL_PCD_EP_Close>
 8009d56:	4603      	mov	r3, r0
 8009d58:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d5a:	7bfb      	ldrb	r3, [r7, #15]
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	f000 f91d 	bl	8009f9c <USBD_Get_USB_Status>
 8009d62:	4603      	mov	r3, r0
 8009d64:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d66:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d68:	4618      	mov	r0, r3
 8009d6a:	3710      	adds	r7, #16
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	bd80      	pop	{r7, pc}

08009d70 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b084      	sub	sp, #16
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
 8009d78:	460b      	mov	r3, r1
 8009d7a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d80:	2300      	movs	r3, #0
 8009d82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009d8a:	78fa      	ldrb	r2, [r7, #3]
 8009d8c:	4611      	mov	r1, r2
 8009d8e:	4618      	mov	r0, r3
 8009d90:	f7fb f8da 	bl	8004f48 <HAL_PCD_EP_Flush>
 8009d94:	4603      	mov	r3, r0
 8009d96:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d98:	7bfb      	ldrb	r3, [r7, #15]
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	f000 f8fe 	bl	8009f9c <USBD_Get_USB_Status>
 8009da0:	4603      	mov	r3, r0
 8009da2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009da4:	7bbb      	ldrb	r3, [r7, #14]
}
 8009da6:	4618      	mov	r0, r3
 8009da8:	3710      	adds	r7, #16
 8009daa:	46bd      	mov	sp, r7
 8009dac:	bd80      	pop	{r7, pc}

08009dae <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009dae:	b580      	push	{r7, lr}
 8009db0:	b084      	sub	sp, #16
 8009db2:	af00      	add	r7, sp, #0
 8009db4:	6078      	str	r0, [r7, #4]
 8009db6:	460b      	mov	r3, r1
 8009db8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009dba:	2300      	movs	r3, #0
 8009dbc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009dc8:	78fa      	ldrb	r2, [r7, #3]
 8009dca:	4611      	mov	r1, r2
 8009dcc:	4618      	mov	r0, r3
 8009dce:	f7fa ffd1 	bl	8004d74 <HAL_PCD_EP_SetStall>
 8009dd2:	4603      	mov	r3, r0
 8009dd4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009dd6:	7bfb      	ldrb	r3, [r7, #15]
 8009dd8:	4618      	mov	r0, r3
 8009dda:	f000 f8df 	bl	8009f9c <USBD_Get_USB_Status>
 8009dde:	4603      	mov	r3, r0
 8009de0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009de2:	7bbb      	ldrb	r3, [r7, #14]
}
 8009de4:	4618      	mov	r0, r3
 8009de6:	3710      	adds	r7, #16
 8009de8:	46bd      	mov	sp, r7
 8009dea:	bd80      	pop	{r7, pc}

08009dec <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b084      	sub	sp, #16
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
 8009df4:	460b      	mov	r3, r1
 8009df6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009df8:	2300      	movs	r3, #0
 8009dfa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009e06:	78fa      	ldrb	r2, [r7, #3]
 8009e08:	4611      	mov	r1, r2
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	f7fb f815 	bl	8004e3a <HAL_PCD_EP_ClrStall>
 8009e10:	4603      	mov	r3, r0
 8009e12:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e14:	7bfb      	ldrb	r3, [r7, #15]
 8009e16:	4618      	mov	r0, r3
 8009e18:	f000 f8c0 	bl	8009f9c <USBD_Get_USB_Status>
 8009e1c:	4603      	mov	r3, r0
 8009e1e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e20:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e22:	4618      	mov	r0, r3
 8009e24:	3710      	adds	r7, #16
 8009e26:	46bd      	mov	sp, r7
 8009e28:	bd80      	pop	{r7, pc}

08009e2a <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009e2a:	b480      	push	{r7}
 8009e2c:	b085      	sub	sp, #20
 8009e2e:	af00      	add	r7, sp, #0
 8009e30:	6078      	str	r0, [r7, #4]
 8009e32:	460b      	mov	r3, r1
 8009e34:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009e3c:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009e3e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	da0b      	bge.n	8009e5e <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009e46:	78fb      	ldrb	r3, [r7, #3]
 8009e48:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009e4c:	68f9      	ldr	r1, [r7, #12]
 8009e4e:	4613      	mov	r3, r2
 8009e50:	00db      	lsls	r3, r3, #3
 8009e52:	4413      	add	r3, r2
 8009e54:	009b      	lsls	r3, r3, #2
 8009e56:	440b      	add	r3, r1
 8009e58:	3316      	adds	r3, #22
 8009e5a:	781b      	ldrb	r3, [r3, #0]
 8009e5c:	e00b      	b.n	8009e76 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009e5e:	78fb      	ldrb	r3, [r7, #3]
 8009e60:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009e64:	68f9      	ldr	r1, [r7, #12]
 8009e66:	4613      	mov	r3, r2
 8009e68:	00db      	lsls	r3, r3, #3
 8009e6a:	4413      	add	r3, r2
 8009e6c:	009b      	lsls	r3, r3, #2
 8009e6e:	440b      	add	r3, r1
 8009e70:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8009e74:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009e76:	4618      	mov	r0, r3
 8009e78:	3714      	adds	r7, #20
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e80:	4770      	bx	lr

08009e82 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009e82:	b580      	push	{r7, lr}
 8009e84:	b084      	sub	sp, #16
 8009e86:	af00      	add	r7, sp, #0
 8009e88:	6078      	str	r0, [r7, #4]
 8009e8a:	460b      	mov	r3, r1
 8009e8c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e8e:	2300      	movs	r3, #0
 8009e90:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e92:	2300      	movs	r3, #0
 8009e94:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009e9c:	78fa      	ldrb	r2, [r7, #3]
 8009e9e:	4611      	mov	r1, r2
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	f7fa fdfd 	bl	8004aa0 <HAL_PCD_SetAddress>
 8009ea6:	4603      	mov	r3, r0
 8009ea8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009eaa:	7bfb      	ldrb	r3, [r7, #15]
 8009eac:	4618      	mov	r0, r3
 8009eae:	f000 f875 	bl	8009f9c <USBD_Get_USB_Status>
 8009eb2:	4603      	mov	r3, r0
 8009eb4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009eb6:	7bbb      	ldrb	r3, [r7, #14]
}
 8009eb8:	4618      	mov	r0, r3
 8009eba:	3710      	adds	r7, #16
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	bd80      	pop	{r7, pc}

08009ec0 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b086      	sub	sp, #24
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	60f8      	str	r0, [r7, #12]
 8009ec8:	607a      	str	r2, [r7, #4]
 8009eca:	603b      	str	r3, [r7, #0]
 8009ecc:	460b      	mov	r3, r1
 8009ece:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ed4:	2300      	movs	r3, #0
 8009ed6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009ede:	7af9      	ldrb	r1, [r7, #11]
 8009ee0:	683b      	ldr	r3, [r7, #0]
 8009ee2:	687a      	ldr	r2, [r7, #4]
 8009ee4:	f7fa ff0c 	bl	8004d00 <HAL_PCD_EP_Transmit>
 8009ee8:	4603      	mov	r3, r0
 8009eea:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009eec:	7dfb      	ldrb	r3, [r7, #23]
 8009eee:	4618      	mov	r0, r3
 8009ef0:	f000 f854 	bl	8009f9c <USBD_Get_USB_Status>
 8009ef4:	4603      	mov	r3, r0
 8009ef6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009ef8:	7dbb      	ldrb	r3, [r7, #22]
}
 8009efa:	4618      	mov	r0, r3
 8009efc:	3718      	adds	r7, #24
 8009efe:	46bd      	mov	sp, r7
 8009f00:	bd80      	pop	{r7, pc}

08009f02 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009f02:	b580      	push	{r7, lr}
 8009f04:	b086      	sub	sp, #24
 8009f06:	af00      	add	r7, sp, #0
 8009f08:	60f8      	str	r0, [r7, #12]
 8009f0a:	607a      	str	r2, [r7, #4]
 8009f0c:	603b      	str	r3, [r7, #0]
 8009f0e:	460b      	mov	r3, r1
 8009f10:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f12:	2300      	movs	r3, #0
 8009f14:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f16:	2300      	movs	r3, #0
 8009f18:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009f20:	7af9      	ldrb	r1, [r7, #11]
 8009f22:	683b      	ldr	r3, [r7, #0]
 8009f24:	687a      	ldr	r2, [r7, #4]
 8009f26:	f7fa fe93 	bl	8004c50 <HAL_PCD_EP_Receive>
 8009f2a:	4603      	mov	r3, r0
 8009f2c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f2e:	7dfb      	ldrb	r3, [r7, #23]
 8009f30:	4618      	mov	r0, r3
 8009f32:	f000 f833 	bl	8009f9c <USBD_Get_USB_Status>
 8009f36:	4603      	mov	r3, r0
 8009f38:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009f3a:	7dbb      	ldrb	r3, [r7, #22]
}
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	3718      	adds	r7, #24
 8009f40:	46bd      	mov	sp, r7
 8009f42:	bd80      	pop	{r7, pc}

08009f44 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b082      	sub	sp, #8
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
 8009f4c:	460b      	mov	r3, r1
 8009f4e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009f56:	78fa      	ldrb	r2, [r7, #3]
 8009f58:	4611      	mov	r1, r2
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	f7fa feb8 	bl	8004cd0 <HAL_PCD_EP_GetRxCount>
 8009f60:	4603      	mov	r3, r0
}
 8009f62:	4618      	mov	r0, r3
 8009f64:	3708      	adds	r7, #8
 8009f66:	46bd      	mov	sp, r7
 8009f68:	bd80      	pop	{r7, pc}
	...

08009f6c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009f6c:	b480      	push	{r7}
 8009f6e:	b083      	sub	sp, #12
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_AUDIO_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009f74:	4b03      	ldr	r3, [pc, #12]	@ (8009f84 <USBD_static_malloc+0x18>)
}
 8009f76:	4618      	mov	r0, r3
 8009f78:	370c      	adds	r7, #12
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f80:	4770      	bx	lr
 8009f82:	bf00      	nop
 8009f84:	20001460 	.word	0x20001460

08009f88 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009f88:	b480      	push	{r7}
 8009f8a:	b083      	sub	sp, #12
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	6078      	str	r0, [r7, #4]

}
 8009f90:	bf00      	nop
 8009f92:	370c      	adds	r7, #12
 8009f94:	46bd      	mov	sp, r7
 8009f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9a:	4770      	bx	lr

08009f9c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009f9c:	b480      	push	{r7}
 8009f9e:	b085      	sub	sp, #20
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	4603      	mov	r3, r0
 8009fa4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009faa:	79fb      	ldrb	r3, [r7, #7]
 8009fac:	2b03      	cmp	r3, #3
 8009fae:	d817      	bhi.n	8009fe0 <USBD_Get_USB_Status+0x44>
 8009fb0:	a201      	add	r2, pc, #4	@ (adr r2, 8009fb8 <USBD_Get_USB_Status+0x1c>)
 8009fb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fb6:	bf00      	nop
 8009fb8:	08009fc9 	.word	0x08009fc9
 8009fbc:	08009fcf 	.word	0x08009fcf
 8009fc0:	08009fd5 	.word	0x08009fd5
 8009fc4:	08009fdb 	.word	0x08009fdb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009fc8:	2300      	movs	r3, #0
 8009fca:	73fb      	strb	r3, [r7, #15]
    break;
 8009fcc:	e00b      	b.n	8009fe6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009fce:	2303      	movs	r3, #3
 8009fd0:	73fb      	strb	r3, [r7, #15]
    break;
 8009fd2:	e008      	b.n	8009fe6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009fd4:	2301      	movs	r3, #1
 8009fd6:	73fb      	strb	r3, [r7, #15]
    break;
 8009fd8:	e005      	b.n	8009fe6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009fda:	2303      	movs	r3, #3
 8009fdc:	73fb      	strb	r3, [r7, #15]
    break;
 8009fde:	e002      	b.n	8009fe6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009fe0:	2303      	movs	r3, #3
 8009fe2:	73fb      	strb	r3, [r7, #15]
    break;
 8009fe4:	bf00      	nop
  }
  return usb_status;
 8009fe6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fe8:	4618      	mov	r0, r3
 8009fea:	3714      	adds	r7, #20
 8009fec:	46bd      	mov	sp, r7
 8009fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff2:	4770      	bx	lr

08009ff4 <malloc>:
 8009ff4:	4b02      	ldr	r3, [pc, #8]	@ (800a000 <malloc+0xc>)
 8009ff6:	4601      	mov	r1, r0
 8009ff8:	6818      	ldr	r0, [r3, #0]
 8009ffa:	f000 b825 	b.w	800a048 <_malloc_r>
 8009ffe:	bf00      	nop
 800a000:	20000188 	.word	0x20000188

0800a004 <sbrk_aligned>:
 800a004:	b570      	push	{r4, r5, r6, lr}
 800a006:	4e0f      	ldr	r6, [pc, #60]	@ (800a044 <sbrk_aligned+0x40>)
 800a008:	460c      	mov	r4, r1
 800a00a:	6831      	ldr	r1, [r6, #0]
 800a00c:	4605      	mov	r5, r0
 800a00e:	b911      	cbnz	r1, 800a016 <sbrk_aligned+0x12>
 800a010:	f000 fa02 	bl	800a418 <_sbrk_r>
 800a014:	6030      	str	r0, [r6, #0]
 800a016:	4621      	mov	r1, r4
 800a018:	4628      	mov	r0, r5
 800a01a:	f000 f9fd 	bl	800a418 <_sbrk_r>
 800a01e:	1c43      	adds	r3, r0, #1
 800a020:	d103      	bne.n	800a02a <sbrk_aligned+0x26>
 800a022:	f04f 34ff 	mov.w	r4, #4294967295
 800a026:	4620      	mov	r0, r4
 800a028:	bd70      	pop	{r4, r5, r6, pc}
 800a02a:	1cc4      	adds	r4, r0, #3
 800a02c:	f024 0403 	bic.w	r4, r4, #3
 800a030:	42a0      	cmp	r0, r4
 800a032:	d0f8      	beq.n	800a026 <sbrk_aligned+0x22>
 800a034:	1a21      	subs	r1, r4, r0
 800a036:	4628      	mov	r0, r5
 800a038:	f000 f9ee 	bl	800a418 <_sbrk_r>
 800a03c:	3001      	adds	r0, #1
 800a03e:	d1f2      	bne.n	800a026 <sbrk_aligned+0x22>
 800a040:	e7ef      	b.n	800a022 <sbrk_aligned+0x1e>
 800a042:	bf00      	nop
 800a044:	200070f8 	.word	0x200070f8

0800a048 <_malloc_r>:
 800a048:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a04c:	1ccd      	adds	r5, r1, #3
 800a04e:	f025 0503 	bic.w	r5, r5, #3
 800a052:	3508      	adds	r5, #8
 800a054:	2d0c      	cmp	r5, #12
 800a056:	bf38      	it	cc
 800a058:	250c      	movcc	r5, #12
 800a05a:	2d00      	cmp	r5, #0
 800a05c:	4606      	mov	r6, r0
 800a05e:	db01      	blt.n	800a064 <_malloc_r+0x1c>
 800a060:	42a9      	cmp	r1, r5
 800a062:	d904      	bls.n	800a06e <_malloc_r+0x26>
 800a064:	230c      	movs	r3, #12
 800a066:	6033      	str	r3, [r6, #0]
 800a068:	2000      	movs	r0, #0
 800a06a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a06e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a144 <_malloc_r+0xfc>
 800a072:	f000 f869 	bl	800a148 <__malloc_lock>
 800a076:	f8d8 3000 	ldr.w	r3, [r8]
 800a07a:	461c      	mov	r4, r3
 800a07c:	bb44      	cbnz	r4, 800a0d0 <_malloc_r+0x88>
 800a07e:	4629      	mov	r1, r5
 800a080:	4630      	mov	r0, r6
 800a082:	f7ff ffbf 	bl	800a004 <sbrk_aligned>
 800a086:	1c43      	adds	r3, r0, #1
 800a088:	4604      	mov	r4, r0
 800a08a:	d158      	bne.n	800a13e <_malloc_r+0xf6>
 800a08c:	f8d8 4000 	ldr.w	r4, [r8]
 800a090:	4627      	mov	r7, r4
 800a092:	2f00      	cmp	r7, #0
 800a094:	d143      	bne.n	800a11e <_malloc_r+0xd6>
 800a096:	2c00      	cmp	r4, #0
 800a098:	d04b      	beq.n	800a132 <_malloc_r+0xea>
 800a09a:	6823      	ldr	r3, [r4, #0]
 800a09c:	4639      	mov	r1, r7
 800a09e:	4630      	mov	r0, r6
 800a0a0:	eb04 0903 	add.w	r9, r4, r3
 800a0a4:	f000 f9b8 	bl	800a418 <_sbrk_r>
 800a0a8:	4581      	cmp	r9, r0
 800a0aa:	d142      	bne.n	800a132 <_malloc_r+0xea>
 800a0ac:	6821      	ldr	r1, [r4, #0]
 800a0ae:	1a6d      	subs	r5, r5, r1
 800a0b0:	4629      	mov	r1, r5
 800a0b2:	4630      	mov	r0, r6
 800a0b4:	f7ff ffa6 	bl	800a004 <sbrk_aligned>
 800a0b8:	3001      	adds	r0, #1
 800a0ba:	d03a      	beq.n	800a132 <_malloc_r+0xea>
 800a0bc:	6823      	ldr	r3, [r4, #0]
 800a0be:	442b      	add	r3, r5
 800a0c0:	6023      	str	r3, [r4, #0]
 800a0c2:	f8d8 3000 	ldr.w	r3, [r8]
 800a0c6:	685a      	ldr	r2, [r3, #4]
 800a0c8:	bb62      	cbnz	r2, 800a124 <_malloc_r+0xdc>
 800a0ca:	f8c8 7000 	str.w	r7, [r8]
 800a0ce:	e00f      	b.n	800a0f0 <_malloc_r+0xa8>
 800a0d0:	6822      	ldr	r2, [r4, #0]
 800a0d2:	1b52      	subs	r2, r2, r5
 800a0d4:	d420      	bmi.n	800a118 <_malloc_r+0xd0>
 800a0d6:	2a0b      	cmp	r2, #11
 800a0d8:	d917      	bls.n	800a10a <_malloc_r+0xc2>
 800a0da:	1961      	adds	r1, r4, r5
 800a0dc:	42a3      	cmp	r3, r4
 800a0de:	6025      	str	r5, [r4, #0]
 800a0e0:	bf18      	it	ne
 800a0e2:	6059      	strne	r1, [r3, #4]
 800a0e4:	6863      	ldr	r3, [r4, #4]
 800a0e6:	bf08      	it	eq
 800a0e8:	f8c8 1000 	streq.w	r1, [r8]
 800a0ec:	5162      	str	r2, [r4, r5]
 800a0ee:	604b      	str	r3, [r1, #4]
 800a0f0:	4630      	mov	r0, r6
 800a0f2:	f000 f82f 	bl	800a154 <__malloc_unlock>
 800a0f6:	f104 000b 	add.w	r0, r4, #11
 800a0fa:	1d23      	adds	r3, r4, #4
 800a0fc:	f020 0007 	bic.w	r0, r0, #7
 800a100:	1ac2      	subs	r2, r0, r3
 800a102:	bf1c      	itt	ne
 800a104:	1a1b      	subne	r3, r3, r0
 800a106:	50a3      	strne	r3, [r4, r2]
 800a108:	e7af      	b.n	800a06a <_malloc_r+0x22>
 800a10a:	6862      	ldr	r2, [r4, #4]
 800a10c:	42a3      	cmp	r3, r4
 800a10e:	bf0c      	ite	eq
 800a110:	f8c8 2000 	streq.w	r2, [r8]
 800a114:	605a      	strne	r2, [r3, #4]
 800a116:	e7eb      	b.n	800a0f0 <_malloc_r+0xa8>
 800a118:	4623      	mov	r3, r4
 800a11a:	6864      	ldr	r4, [r4, #4]
 800a11c:	e7ae      	b.n	800a07c <_malloc_r+0x34>
 800a11e:	463c      	mov	r4, r7
 800a120:	687f      	ldr	r7, [r7, #4]
 800a122:	e7b6      	b.n	800a092 <_malloc_r+0x4a>
 800a124:	461a      	mov	r2, r3
 800a126:	685b      	ldr	r3, [r3, #4]
 800a128:	42a3      	cmp	r3, r4
 800a12a:	d1fb      	bne.n	800a124 <_malloc_r+0xdc>
 800a12c:	2300      	movs	r3, #0
 800a12e:	6053      	str	r3, [r2, #4]
 800a130:	e7de      	b.n	800a0f0 <_malloc_r+0xa8>
 800a132:	230c      	movs	r3, #12
 800a134:	6033      	str	r3, [r6, #0]
 800a136:	4630      	mov	r0, r6
 800a138:	f000 f80c 	bl	800a154 <__malloc_unlock>
 800a13c:	e794      	b.n	800a068 <_malloc_r+0x20>
 800a13e:	6005      	str	r5, [r0, #0]
 800a140:	e7d6      	b.n	800a0f0 <_malloc_r+0xa8>
 800a142:	bf00      	nop
 800a144:	200070fc 	.word	0x200070fc

0800a148 <__malloc_lock>:
 800a148:	4801      	ldr	r0, [pc, #4]	@ (800a150 <__malloc_lock+0x8>)
 800a14a:	f000 b9b2 	b.w	800a4b2 <__retarget_lock_acquire_recursive>
 800a14e:	bf00      	nop
 800a150:	20007240 	.word	0x20007240

0800a154 <__malloc_unlock>:
 800a154:	4801      	ldr	r0, [pc, #4]	@ (800a15c <__malloc_unlock+0x8>)
 800a156:	f000 b9ad 	b.w	800a4b4 <__retarget_lock_release_recursive>
 800a15a:	bf00      	nop
 800a15c:	20007240 	.word	0x20007240

0800a160 <std>:
 800a160:	2300      	movs	r3, #0
 800a162:	b510      	push	{r4, lr}
 800a164:	4604      	mov	r4, r0
 800a166:	e9c0 3300 	strd	r3, r3, [r0]
 800a16a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a16e:	6083      	str	r3, [r0, #8]
 800a170:	8181      	strh	r1, [r0, #12]
 800a172:	6643      	str	r3, [r0, #100]	@ 0x64
 800a174:	81c2      	strh	r2, [r0, #14]
 800a176:	6183      	str	r3, [r0, #24]
 800a178:	4619      	mov	r1, r3
 800a17a:	2208      	movs	r2, #8
 800a17c:	305c      	adds	r0, #92	@ 0x5c
 800a17e:	f000 f90e 	bl	800a39e <memset>
 800a182:	4b0d      	ldr	r3, [pc, #52]	@ (800a1b8 <std+0x58>)
 800a184:	6263      	str	r3, [r4, #36]	@ 0x24
 800a186:	4b0d      	ldr	r3, [pc, #52]	@ (800a1bc <std+0x5c>)
 800a188:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a18a:	4b0d      	ldr	r3, [pc, #52]	@ (800a1c0 <std+0x60>)
 800a18c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a18e:	4b0d      	ldr	r3, [pc, #52]	@ (800a1c4 <std+0x64>)
 800a190:	6323      	str	r3, [r4, #48]	@ 0x30
 800a192:	4b0d      	ldr	r3, [pc, #52]	@ (800a1c8 <std+0x68>)
 800a194:	6224      	str	r4, [r4, #32]
 800a196:	429c      	cmp	r4, r3
 800a198:	d006      	beq.n	800a1a8 <std+0x48>
 800a19a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a19e:	4294      	cmp	r4, r2
 800a1a0:	d002      	beq.n	800a1a8 <std+0x48>
 800a1a2:	33d0      	adds	r3, #208	@ 0xd0
 800a1a4:	429c      	cmp	r4, r3
 800a1a6:	d105      	bne.n	800a1b4 <std+0x54>
 800a1a8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a1ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a1b0:	f000 b97e 	b.w	800a4b0 <__retarget_lock_init_recursive>
 800a1b4:	bd10      	pop	{r4, pc}
 800a1b6:	bf00      	nop
 800a1b8:	0800a319 	.word	0x0800a319
 800a1bc:	0800a33b 	.word	0x0800a33b
 800a1c0:	0800a373 	.word	0x0800a373
 800a1c4:	0800a397 	.word	0x0800a397
 800a1c8:	20007100 	.word	0x20007100

0800a1cc <stdio_exit_handler>:
 800a1cc:	4a02      	ldr	r2, [pc, #8]	@ (800a1d8 <stdio_exit_handler+0xc>)
 800a1ce:	4903      	ldr	r1, [pc, #12]	@ (800a1dc <stdio_exit_handler+0x10>)
 800a1d0:	4803      	ldr	r0, [pc, #12]	@ (800a1e0 <stdio_exit_handler+0x14>)
 800a1d2:	f000 b869 	b.w	800a2a8 <_fwalk_sglue>
 800a1d6:	bf00      	nop
 800a1d8:	2000017c 	.word	0x2000017c
 800a1dc:	0800abf5 	.word	0x0800abf5
 800a1e0:	2000018c 	.word	0x2000018c

0800a1e4 <cleanup_stdio>:
 800a1e4:	6841      	ldr	r1, [r0, #4]
 800a1e6:	4b0c      	ldr	r3, [pc, #48]	@ (800a218 <cleanup_stdio+0x34>)
 800a1e8:	4299      	cmp	r1, r3
 800a1ea:	b510      	push	{r4, lr}
 800a1ec:	4604      	mov	r4, r0
 800a1ee:	d001      	beq.n	800a1f4 <cleanup_stdio+0x10>
 800a1f0:	f000 fd00 	bl	800abf4 <_fflush_r>
 800a1f4:	68a1      	ldr	r1, [r4, #8]
 800a1f6:	4b09      	ldr	r3, [pc, #36]	@ (800a21c <cleanup_stdio+0x38>)
 800a1f8:	4299      	cmp	r1, r3
 800a1fa:	d002      	beq.n	800a202 <cleanup_stdio+0x1e>
 800a1fc:	4620      	mov	r0, r4
 800a1fe:	f000 fcf9 	bl	800abf4 <_fflush_r>
 800a202:	68e1      	ldr	r1, [r4, #12]
 800a204:	4b06      	ldr	r3, [pc, #24]	@ (800a220 <cleanup_stdio+0x3c>)
 800a206:	4299      	cmp	r1, r3
 800a208:	d004      	beq.n	800a214 <cleanup_stdio+0x30>
 800a20a:	4620      	mov	r0, r4
 800a20c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a210:	f000 bcf0 	b.w	800abf4 <_fflush_r>
 800a214:	bd10      	pop	{r4, pc}
 800a216:	bf00      	nop
 800a218:	20007100 	.word	0x20007100
 800a21c:	20007168 	.word	0x20007168
 800a220:	200071d0 	.word	0x200071d0

0800a224 <global_stdio_init.part.0>:
 800a224:	b510      	push	{r4, lr}
 800a226:	4b0b      	ldr	r3, [pc, #44]	@ (800a254 <global_stdio_init.part.0+0x30>)
 800a228:	4c0b      	ldr	r4, [pc, #44]	@ (800a258 <global_stdio_init.part.0+0x34>)
 800a22a:	4a0c      	ldr	r2, [pc, #48]	@ (800a25c <global_stdio_init.part.0+0x38>)
 800a22c:	601a      	str	r2, [r3, #0]
 800a22e:	4620      	mov	r0, r4
 800a230:	2200      	movs	r2, #0
 800a232:	2104      	movs	r1, #4
 800a234:	f7ff ff94 	bl	800a160 <std>
 800a238:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a23c:	2201      	movs	r2, #1
 800a23e:	2109      	movs	r1, #9
 800a240:	f7ff ff8e 	bl	800a160 <std>
 800a244:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a248:	2202      	movs	r2, #2
 800a24a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a24e:	2112      	movs	r1, #18
 800a250:	f7ff bf86 	b.w	800a160 <std>
 800a254:	20007238 	.word	0x20007238
 800a258:	20007100 	.word	0x20007100
 800a25c:	0800a1cd 	.word	0x0800a1cd

0800a260 <__sfp_lock_acquire>:
 800a260:	4801      	ldr	r0, [pc, #4]	@ (800a268 <__sfp_lock_acquire+0x8>)
 800a262:	f000 b926 	b.w	800a4b2 <__retarget_lock_acquire_recursive>
 800a266:	bf00      	nop
 800a268:	20007241 	.word	0x20007241

0800a26c <__sfp_lock_release>:
 800a26c:	4801      	ldr	r0, [pc, #4]	@ (800a274 <__sfp_lock_release+0x8>)
 800a26e:	f000 b921 	b.w	800a4b4 <__retarget_lock_release_recursive>
 800a272:	bf00      	nop
 800a274:	20007241 	.word	0x20007241

0800a278 <__sinit>:
 800a278:	b510      	push	{r4, lr}
 800a27a:	4604      	mov	r4, r0
 800a27c:	f7ff fff0 	bl	800a260 <__sfp_lock_acquire>
 800a280:	6a23      	ldr	r3, [r4, #32]
 800a282:	b11b      	cbz	r3, 800a28c <__sinit+0x14>
 800a284:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a288:	f7ff bff0 	b.w	800a26c <__sfp_lock_release>
 800a28c:	4b04      	ldr	r3, [pc, #16]	@ (800a2a0 <__sinit+0x28>)
 800a28e:	6223      	str	r3, [r4, #32]
 800a290:	4b04      	ldr	r3, [pc, #16]	@ (800a2a4 <__sinit+0x2c>)
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d1f5      	bne.n	800a284 <__sinit+0xc>
 800a298:	f7ff ffc4 	bl	800a224 <global_stdio_init.part.0>
 800a29c:	e7f2      	b.n	800a284 <__sinit+0xc>
 800a29e:	bf00      	nop
 800a2a0:	0800a1e5 	.word	0x0800a1e5
 800a2a4:	20007238 	.word	0x20007238

0800a2a8 <_fwalk_sglue>:
 800a2a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a2ac:	4607      	mov	r7, r0
 800a2ae:	4688      	mov	r8, r1
 800a2b0:	4614      	mov	r4, r2
 800a2b2:	2600      	movs	r6, #0
 800a2b4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a2b8:	f1b9 0901 	subs.w	r9, r9, #1
 800a2bc:	d505      	bpl.n	800a2ca <_fwalk_sglue+0x22>
 800a2be:	6824      	ldr	r4, [r4, #0]
 800a2c0:	2c00      	cmp	r4, #0
 800a2c2:	d1f7      	bne.n	800a2b4 <_fwalk_sglue+0xc>
 800a2c4:	4630      	mov	r0, r6
 800a2c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a2ca:	89ab      	ldrh	r3, [r5, #12]
 800a2cc:	2b01      	cmp	r3, #1
 800a2ce:	d907      	bls.n	800a2e0 <_fwalk_sglue+0x38>
 800a2d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a2d4:	3301      	adds	r3, #1
 800a2d6:	d003      	beq.n	800a2e0 <_fwalk_sglue+0x38>
 800a2d8:	4629      	mov	r1, r5
 800a2da:	4638      	mov	r0, r7
 800a2dc:	47c0      	blx	r8
 800a2de:	4306      	orrs	r6, r0
 800a2e0:	3568      	adds	r5, #104	@ 0x68
 800a2e2:	e7e9      	b.n	800a2b8 <_fwalk_sglue+0x10>

0800a2e4 <iprintf>:
 800a2e4:	b40f      	push	{r0, r1, r2, r3}
 800a2e6:	b507      	push	{r0, r1, r2, lr}
 800a2e8:	4906      	ldr	r1, [pc, #24]	@ (800a304 <iprintf+0x20>)
 800a2ea:	ab04      	add	r3, sp, #16
 800a2ec:	6808      	ldr	r0, [r1, #0]
 800a2ee:	f853 2b04 	ldr.w	r2, [r3], #4
 800a2f2:	6881      	ldr	r1, [r0, #8]
 800a2f4:	9301      	str	r3, [sp, #4]
 800a2f6:	f000 f953 	bl	800a5a0 <_vfiprintf_r>
 800a2fa:	b003      	add	sp, #12
 800a2fc:	f85d eb04 	ldr.w	lr, [sp], #4
 800a300:	b004      	add	sp, #16
 800a302:	4770      	bx	lr
 800a304:	20000188 	.word	0x20000188

0800a308 <putchar>:
 800a308:	4b02      	ldr	r3, [pc, #8]	@ (800a314 <putchar+0xc>)
 800a30a:	4601      	mov	r1, r0
 800a30c:	6818      	ldr	r0, [r3, #0]
 800a30e:	6882      	ldr	r2, [r0, #8]
 800a310:	f000 bc98 	b.w	800ac44 <_putc_r>
 800a314:	20000188 	.word	0x20000188

0800a318 <__sread>:
 800a318:	b510      	push	{r4, lr}
 800a31a:	460c      	mov	r4, r1
 800a31c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a320:	f000 f868 	bl	800a3f4 <_read_r>
 800a324:	2800      	cmp	r0, #0
 800a326:	bfab      	itete	ge
 800a328:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a32a:	89a3      	ldrhlt	r3, [r4, #12]
 800a32c:	181b      	addge	r3, r3, r0
 800a32e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a332:	bfac      	ite	ge
 800a334:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a336:	81a3      	strhlt	r3, [r4, #12]
 800a338:	bd10      	pop	{r4, pc}

0800a33a <__swrite>:
 800a33a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a33e:	461f      	mov	r7, r3
 800a340:	898b      	ldrh	r3, [r1, #12]
 800a342:	05db      	lsls	r3, r3, #23
 800a344:	4605      	mov	r5, r0
 800a346:	460c      	mov	r4, r1
 800a348:	4616      	mov	r6, r2
 800a34a:	d505      	bpl.n	800a358 <__swrite+0x1e>
 800a34c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a350:	2302      	movs	r3, #2
 800a352:	2200      	movs	r2, #0
 800a354:	f000 f83c 	bl	800a3d0 <_lseek_r>
 800a358:	89a3      	ldrh	r3, [r4, #12]
 800a35a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a35e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a362:	81a3      	strh	r3, [r4, #12]
 800a364:	4632      	mov	r2, r6
 800a366:	463b      	mov	r3, r7
 800a368:	4628      	mov	r0, r5
 800a36a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a36e:	f000 b863 	b.w	800a438 <_write_r>

0800a372 <__sseek>:
 800a372:	b510      	push	{r4, lr}
 800a374:	460c      	mov	r4, r1
 800a376:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a37a:	f000 f829 	bl	800a3d0 <_lseek_r>
 800a37e:	1c43      	adds	r3, r0, #1
 800a380:	89a3      	ldrh	r3, [r4, #12]
 800a382:	bf15      	itete	ne
 800a384:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a386:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a38a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a38e:	81a3      	strheq	r3, [r4, #12]
 800a390:	bf18      	it	ne
 800a392:	81a3      	strhne	r3, [r4, #12]
 800a394:	bd10      	pop	{r4, pc}

0800a396 <__sclose>:
 800a396:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a39a:	f000 b809 	b.w	800a3b0 <_close_r>

0800a39e <memset>:
 800a39e:	4402      	add	r2, r0
 800a3a0:	4603      	mov	r3, r0
 800a3a2:	4293      	cmp	r3, r2
 800a3a4:	d100      	bne.n	800a3a8 <memset+0xa>
 800a3a6:	4770      	bx	lr
 800a3a8:	f803 1b01 	strb.w	r1, [r3], #1
 800a3ac:	e7f9      	b.n	800a3a2 <memset+0x4>
	...

0800a3b0 <_close_r>:
 800a3b0:	b538      	push	{r3, r4, r5, lr}
 800a3b2:	4d06      	ldr	r5, [pc, #24]	@ (800a3cc <_close_r+0x1c>)
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	4604      	mov	r4, r0
 800a3b8:	4608      	mov	r0, r1
 800a3ba:	602b      	str	r3, [r5, #0]
 800a3bc:	f7f7 f8ff 	bl	80015be <_close>
 800a3c0:	1c43      	adds	r3, r0, #1
 800a3c2:	d102      	bne.n	800a3ca <_close_r+0x1a>
 800a3c4:	682b      	ldr	r3, [r5, #0]
 800a3c6:	b103      	cbz	r3, 800a3ca <_close_r+0x1a>
 800a3c8:	6023      	str	r3, [r4, #0]
 800a3ca:	bd38      	pop	{r3, r4, r5, pc}
 800a3cc:	2000723c 	.word	0x2000723c

0800a3d0 <_lseek_r>:
 800a3d0:	b538      	push	{r3, r4, r5, lr}
 800a3d2:	4d07      	ldr	r5, [pc, #28]	@ (800a3f0 <_lseek_r+0x20>)
 800a3d4:	4604      	mov	r4, r0
 800a3d6:	4608      	mov	r0, r1
 800a3d8:	4611      	mov	r1, r2
 800a3da:	2200      	movs	r2, #0
 800a3dc:	602a      	str	r2, [r5, #0]
 800a3de:	461a      	mov	r2, r3
 800a3e0:	f7f7 f914 	bl	800160c <_lseek>
 800a3e4:	1c43      	adds	r3, r0, #1
 800a3e6:	d102      	bne.n	800a3ee <_lseek_r+0x1e>
 800a3e8:	682b      	ldr	r3, [r5, #0]
 800a3ea:	b103      	cbz	r3, 800a3ee <_lseek_r+0x1e>
 800a3ec:	6023      	str	r3, [r4, #0]
 800a3ee:	bd38      	pop	{r3, r4, r5, pc}
 800a3f0:	2000723c 	.word	0x2000723c

0800a3f4 <_read_r>:
 800a3f4:	b538      	push	{r3, r4, r5, lr}
 800a3f6:	4d07      	ldr	r5, [pc, #28]	@ (800a414 <_read_r+0x20>)
 800a3f8:	4604      	mov	r4, r0
 800a3fa:	4608      	mov	r0, r1
 800a3fc:	4611      	mov	r1, r2
 800a3fe:	2200      	movs	r2, #0
 800a400:	602a      	str	r2, [r5, #0]
 800a402:	461a      	mov	r2, r3
 800a404:	f7f7 f8a2 	bl	800154c <_read>
 800a408:	1c43      	adds	r3, r0, #1
 800a40a:	d102      	bne.n	800a412 <_read_r+0x1e>
 800a40c:	682b      	ldr	r3, [r5, #0]
 800a40e:	b103      	cbz	r3, 800a412 <_read_r+0x1e>
 800a410:	6023      	str	r3, [r4, #0]
 800a412:	bd38      	pop	{r3, r4, r5, pc}
 800a414:	2000723c 	.word	0x2000723c

0800a418 <_sbrk_r>:
 800a418:	b538      	push	{r3, r4, r5, lr}
 800a41a:	4d06      	ldr	r5, [pc, #24]	@ (800a434 <_sbrk_r+0x1c>)
 800a41c:	2300      	movs	r3, #0
 800a41e:	4604      	mov	r4, r0
 800a420:	4608      	mov	r0, r1
 800a422:	602b      	str	r3, [r5, #0]
 800a424:	f7f7 f900 	bl	8001628 <_sbrk>
 800a428:	1c43      	adds	r3, r0, #1
 800a42a:	d102      	bne.n	800a432 <_sbrk_r+0x1a>
 800a42c:	682b      	ldr	r3, [r5, #0]
 800a42e:	b103      	cbz	r3, 800a432 <_sbrk_r+0x1a>
 800a430:	6023      	str	r3, [r4, #0]
 800a432:	bd38      	pop	{r3, r4, r5, pc}
 800a434:	2000723c 	.word	0x2000723c

0800a438 <_write_r>:
 800a438:	b538      	push	{r3, r4, r5, lr}
 800a43a:	4d07      	ldr	r5, [pc, #28]	@ (800a458 <_write_r+0x20>)
 800a43c:	4604      	mov	r4, r0
 800a43e:	4608      	mov	r0, r1
 800a440:	4611      	mov	r1, r2
 800a442:	2200      	movs	r2, #0
 800a444:	602a      	str	r2, [r5, #0]
 800a446:	461a      	mov	r2, r3
 800a448:	f7f7 f89d 	bl	8001586 <_write>
 800a44c:	1c43      	adds	r3, r0, #1
 800a44e:	d102      	bne.n	800a456 <_write_r+0x1e>
 800a450:	682b      	ldr	r3, [r5, #0]
 800a452:	b103      	cbz	r3, 800a456 <_write_r+0x1e>
 800a454:	6023      	str	r3, [r4, #0]
 800a456:	bd38      	pop	{r3, r4, r5, pc}
 800a458:	2000723c 	.word	0x2000723c

0800a45c <__errno>:
 800a45c:	4b01      	ldr	r3, [pc, #4]	@ (800a464 <__errno+0x8>)
 800a45e:	6818      	ldr	r0, [r3, #0]
 800a460:	4770      	bx	lr
 800a462:	bf00      	nop
 800a464:	20000188 	.word	0x20000188

0800a468 <__libc_init_array>:
 800a468:	b570      	push	{r4, r5, r6, lr}
 800a46a:	4d0d      	ldr	r5, [pc, #52]	@ (800a4a0 <__libc_init_array+0x38>)
 800a46c:	4c0d      	ldr	r4, [pc, #52]	@ (800a4a4 <__libc_init_array+0x3c>)
 800a46e:	1b64      	subs	r4, r4, r5
 800a470:	10a4      	asrs	r4, r4, #2
 800a472:	2600      	movs	r6, #0
 800a474:	42a6      	cmp	r6, r4
 800a476:	d109      	bne.n	800a48c <__libc_init_array+0x24>
 800a478:	4d0b      	ldr	r5, [pc, #44]	@ (800a4a8 <__libc_init_array+0x40>)
 800a47a:	4c0c      	ldr	r4, [pc, #48]	@ (800a4ac <__libc_init_array+0x44>)
 800a47c:	f000 fd2e 	bl	800aedc <_init>
 800a480:	1b64      	subs	r4, r4, r5
 800a482:	10a4      	asrs	r4, r4, #2
 800a484:	2600      	movs	r6, #0
 800a486:	42a6      	cmp	r6, r4
 800a488:	d105      	bne.n	800a496 <__libc_init_array+0x2e>
 800a48a:	bd70      	pop	{r4, r5, r6, pc}
 800a48c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a490:	4798      	blx	r3
 800a492:	3601      	adds	r6, #1
 800a494:	e7ee      	b.n	800a474 <__libc_init_array+0xc>
 800a496:	f855 3b04 	ldr.w	r3, [r5], #4
 800a49a:	4798      	blx	r3
 800a49c:	3601      	adds	r6, #1
 800a49e:	e7f2      	b.n	800a486 <__libc_init_array+0x1e>
 800a4a0:	0800afc8 	.word	0x0800afc8
 800a4a4:	0800afc8 	.word	0x0800afc8
 800a4a8:	0800afc8 	.word	0x0800afc8
 800a4ac:	0800afcc 	.word	0x0800afcc

0800a4b0 <__retarget_lock_init_recursive>:
 800a4b0:	4770      	bx	lr

0800a4b2 <__retarget_lock_acquire_recursive>:
 800a4b2:	4770      	bx	lr

0800a4b4 <__retarget_lock_release_recursive>:
 800a4b4:	4770      	bx	lr
	...

0800a4b8 <_free_r>:
 800a4b8:	b538      	push	{r3, r4, r5, lr}
 800a4ba:	4605      	mov	r5, r0
 800a4bc:	2900      	cmp	r1, #0
 800a4be:	d041      	beq.n	800a544 <_free_r+0x8c>
 800a4c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a4c4:	1f0c      	subs	r4, r1, #4
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	bfb8      	it	lt
 800a4ca:	18e4      	addlt	r4, r4, r3
 800a4cc:	f7ff fe3c 	bl	800a148 <__malloc_lock>
 800a4d0:	4a1d      	ldr	r2, [pc, #116]	@ (800a548 <_free_r+0x90>)
 800a4d2:	6813      	ldr	r3, [r2, #0]
 800a4d4:	b933      	cbnz	r3, 800a4e4 <_free_r+0x2c>
 800a4d6:	6063      	str	r3, [r4, #4]
 800a4d8:	6014      	str	r4, [r2, #0]
 800a4da:	4628      	mov	r0, r5
 800a4dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a4e0:	f7ff be38 	b.w	800a154 <__malloc_unlock>
 800a4e4:	42a3      	cmp	r3, r4
 800a4e6:	d908      	bls.n	800a4fa <_free_r+0x42>
 800a4e8:	6820      	ldr	r0, [r4, #0]
 800a4ea:	1821      	adds	r1, r4, r0
 800a4ec:	428b      	cmp	r3, r1
 800a4ee:	bf01      	itttt	eq
 800a4f0:	6819      	ldreq	r1, [r3, #0]
 800a4f2:	685b      	ldreq	r3, [r3, #4]
 800a4f4:	1809      	addeq	r1, r1, r0
 800a4f6:	6021      	streq	r1, [r4, #0]
 800a4f8:	e7ed      	b.n	800a4d6 <_free_r+0x1e>
 800a4fa:	461a      	mov	r2, r3
 800a4fc:	685b      	ldr	r3, [r3, #4]
 800a4fe:	b10b      	cbz	r3, 800a504 <_free_r+0x4c>
 800a500:	42a3      	cmp	r3, r4
 800a502:	d9fa      	bls.n	800a4fa <_free_r+0x42>
 800a504:	6811      	ldr	r1, [r2, #0]
 800a506:	1850      	adds	r0, r2, r1
 800a508:	42a0      	cmp	r0, r4
 800a50a:	d10b      	bne.n	800a524 <_free_r+0x6c>
 800a50c:	6820      	ldr	r0, [r4, #0]
 800a50e:	4401      	add	r1, r0
 800a510:	1850      	adds	r0, r2, r1
 800a512:	4283      	cmp	r3, r0
 800a514:	6011      	str	r1, [r2, #0]
 800a516:	d1e0      	bne.n	800a4da <_free_r+0x22>
 800a518:	6818      	ldr	r0, [r3, #0]
 800a51a:	685b      	ldr	r3, [r3, #4]
 800a51c:	6053      	str	r3, [r2, #4]
 800a51e:	4408      	add	r0, r1
 800a520:	6010      	str	r0, [r2, #0]
 800a522:	e7da      	b.n	800a4da <_free_r+0x22>
 800a524:	d902      	bls.n	800a52c <_free_r+0x74>
 800a526:	230c      	movs	r3, #12
 800a528:	602b      	str	r3, [r5, #0]
 800a52a:	e7d6      	b.n	800a4da <_free_r+0x22>
 800a52c:	6820      	ldr	r0, [r4, #0]
 800a52e:	1821      	adds	r1, r4, r0
 800a530:	428b      	cmp	r3, r1
 800a532:	bf04      	itt	eq
 800a534:	6819      	ldreq	r1, [r3, #0]
 800a536:	685b      	ldreq	r3, [r3, #4]
 800a538:	6063      	str	r3, [r4, #4]
 800a53a:	bf04      	itt	eq
 800a53c:	1809      	addeq	r1, r1, r0
 800a53e:	6021      	streq	r1, [r4, #0]
 800a540:	6054      	str	r4, [r2, #4]
 800a542:	e7ca      	b.n	800a4da <_free_r+0x22>
 800a544:	bd38      	pop	{r3, r4, r5, pc}
 800a546:	bf00      	nop
 800a548:	200070fc 	.word	0x200070fc

0800a54c <__sfputc_r>:
 800a54c:	6893      	ldr	r3, [r2, #8]
 800a54e:	3b01      	subs	r3, #1
 800a550:	2b00      	cmp	r3, #0
 800a552:	b410      	push	{r4}
 800a554:	6093      	str	r3, [r2, #8]
 800a556:	da08      	bge.n	800a56a <__sfputc_r+0x1e>
 800a558:	6994      	ldr	r4, [r2, #24]
 800a55a:	42a3      	cmp	r3, r4
 800a55c:	db01      	blt.n	800a562 <__sfputc_r+0x16>
 800a55e:	290a      	cmp	r1, #10
 800a560:	d103      	bne.n	800a56a <__sfputc_r+0x1e>
 800a562:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a566:	f000 bba1 	b.w	800acac <__swbuf_r>
 800a56a:	6813      	ldr	r3, [r2, #0]
 800a56c:	1c58      	adds	r0, r3, #1
 800a56e:	6010      	str	r0, [r2, #0]
 800a570:	7019      	strb	r1, [r3, #0]
 800a572:	4608      	mov	r0, r1
 800a574:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a578:	4770      	bx	lr

0800a57a <__sfputs_r>:
 800a57a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a57c:	4606      	mov	r6, r0
 800a57e:	460f      	mov	r7, r1
 800a580:	4614      	mov	r4, r2
 800a582:	18d5      	adds	r5, r2, r3
 800a584:	42ac      	cmp	r4, r5
 800a586:	d101      	bne.n	800a58c <__sfputs_r+0x12>
 800a588:	2000      	movs	r0, #0
 800a58a:	e007      	b.n	800a59c <__sfputs_r+0x22>
 800a58c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a590:	463a      	mov	r2, r7
 800a592:	4630      	mov	r0, r6
 800a594:	f7ff ffda 	bl	800a54c <__sfputc_r>
 800a598:	1c43      	adds	r3, r0, #1
 800a59a:	d1f3      	bne.n	800a584 <__sfputs_r+0xa>
 800a59c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a5a0 <_vfiprintf_r>:
 800a5a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5a4:	460d      	mov	r5, r1
 800a5a6:	b09d      	sub	sp, #116	@ 0x74
 800a5a8:	4614      	mov	r4, r2
 800a5aa:	4698      	mov	r8, r3
 800a5ac:	4606      	mov	r6, r0
 800a5ae:	b118      	cbz	r0, 800a5b8 <_vfiprintf_r+0x18>
 800a5b0:	6a03      	ldr	r3, [r0, #32]
 800a5b2:	b90b      	cbnz	r3, 800a5b8 <_vfiprintf_r+0x18>
 800a5b4:	f7ff fe60 	bl	800a278 <__sinit>
 800a5b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a5ba:	07d9      	lsls	r1, r3, #31
 800a5bc:	d405      	bmi.n	800a5ca <_vfiprintf_r+0x2a>
 800a5be:	89ab      	ldrh	r3, [r5, #12]
 800a5c0:	059a      	lsls	r2, r3, #22
 800a5c2:	d402      	bmi.n	800a5ca <_vfiprintf_r+0x2a>
 800a5c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a5c6:	f7ff ff74 	bl	800a4b2 <__retarget_lock_acquire_recursive>
 800a5ca:	89ab      	ldrh	r3, [r5, #12]
 800a5cc:	071b      	lsls	r3, r3, #28
 800a5ce:	d501      	bpl.n	800a5d4 <_vfiprintf_r+0x34>
 800a5d0:	692b      	ldr	r3, [r5, #16]
 800a5d2:	b99b      	cbnz	r3, 800a5fc <_vfiprintf_r+0x5c>
 800a5d4:	4629      	mov	r1, r5
 800a5d6:	4630      	mov	r0, r6
 800a5d8:	f000 fba6 	bl	800ad28 <__swsetup_r>
 800a5dc:	b170      	cbz	r0, 800a5fc <_vfiprintf_r+0x5c>
 800a5de:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a5e0:	07dc      	lsls	r4, r3, #31
 800a5e2:	d504      	bpl.n	800a5ee <_vfiprintf_r+0x4e>
 800a5e4:	f04f 30ff 	mov.w	r0, #4294967295
 800a5e8:	b01d      	add	sp, #116	@ 0x74
 800a5ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5ee:	89ab      	ldrh	r3, [r5, #12]
 800a5f0:	0598      	lsls	r0, r3, #22
 800a5f2:	d4f7      	bmi.n	800a5e4 <_vfiprintf_r+0x44>
 800a5f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a5f6:	f7ff ff5d 	bl	800a4b4 <__retarget_lock_release_recursive>
 800a5fa:	e7f3      	b.n	800a5e4 <_vfiprintf_r+0x44>
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	9309      	str	r3, [sp, #36]	@ 0x24
 800a600:	2320      	movs	r3, #32
 800a602:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a606:	f8cd 800c 	str.w	r8, [sp, #12]
 800a60a:	2330      	movs	r3, #48	@ 0x30
 800a60c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a7bc <_vfiprintf_r+0x21c>
 800a610:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a614:	f04f 0901 	mov.w	r9, #1
 800a618:	4623      	mov	r3, r4
 800a61a:	469a      	mov	sl, r3
 800a61c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a620:	b10a      	cbz	r2, 800a626 <_vfiprintf_r+0x86>
 800a622:	2a25      	cmp	r2, #37	@ 0x25
 800a624:	d1f9      	bne.n	800a61a <_vfiprintf_r+0x7a>
 800a626:	ebba 0b04 	subs.w	fp, sl, r4
 800a62a:	d00b      	beq.n	800a644 <_vfiprintf_r+0xa4>
 800a62c:	465b      	mov	r3, fp
 800a62e:	4622      	mov	r2, r4
 800a630:	4629      	mov	r1, r5
 800a632:	4630      	mov	r0, r6
 800a634:	f7ff ffa1 	bl	800a57a <__sfputs_r>
 800a638:	3001      	adds	r0, #1
 800a63a:	f000 80a7 	beq.w	800a78c <_vfiprintf_r+0x1ec>
 800a63e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a640:	445a      	add	r2, fp
 800a642:	9209      	str	r2, [sp, #36]	@ 0x24
 800a644:	f89a 3000 	ldrb.w	r3, [sl]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	f000 809f 	beq.w	800a78c <_vfiprintf_r+0x1ec>
 800a64e:	2300      	movs	r3, #0
 800a650:	f04f 32ff 	mov.w	r2, #4294967295
 800a654:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a658:	f10a 0a01 	add.w	sl, sl, #1
 800a65c:	9304      	str	r3, [sp, #16]
 800a65e:	9307      	str	r3, [sp, #28]
 800a660:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a664:	931a      	str	r3, [sp, #104]	@ 0x68
 800a666:	4654      	mov	r4, sl
 800a668:	2205      	movs	r2, #5
 800a66a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a66e:	4853      	ldr	r0, [pc, #332]	@ (800a7bc <_vfiprintf_r+0x21c>)
 800a670:	f7f5 fdb6 	bl	80001e0 <memchr>
 800a674:	9a04      	ldr	r2, [sp, #16]
 800a676:	b9d8      	cbnz	r0, 800a6b0 <_vfiprintf_r+0x110>
 800a678:	06d1      	lsls	r1, r2, #27
 800a67a:	bf44      	itt	mi
 800a67c:	2320      	movmi	r3, #32
 800a67e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a682:	0713      	lsls	r3, r2, #28
 800a684:	bf44      	itt	mi
 800a686:	232b      	movmi	r3, #43	@ 0x2b
 800a688:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a68c:	f89a 3000 	ldrb.w	r3, [sl]
 800a690:	2b2a      	cmp	r3, #42	@ 0x2a
 800a692:	d015      	beq.n	800a6c0 <_vfiprintf_r+0x120>
 800a694:	9a07      	ldr	r2, [sp, #28]
 800a696:	4654      	mov	r4, sl
 800a698:	2000      	movs	r0, #0
 800a69a:	f04f 0c0a 	mov.w	ip, #10
 800a69e:	4621      	mov	r1, r4
 800a6a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a6a4:	3b30      	subs	r3, #48	@ 0x30
 800a6a6:	2b09      	cmp	r3, #9
 800a6a8:	d94b      	bls.n	800a742 <_vfiprintf_r+0x1a2>
 800a6aa:	b1b0      	cbz	r0, 800a6da <_vfiprintf_r+0x13a>
 800a6ac:	9207      	str	r2, [sp, #28]
 800a6ae:	e014      	b.n	800a6da <_vfiprintf_r+0x13a>
 800a6b0:	eba0 0308 	sub.w	r3, r0, r8
 800a6b4:	fa09 f303 	lsl.w	r3, r9, r3
 800a6b8:	4313      	orrs	r3, r2
 800a6ba:	9304      	str	r3, [sp, #16]
 800a6bc:	46a2      	mov	sl, r4
 800a6be:	e7d2      	b.n	800a666 <_vfiprintf_r+0xc6>
 800a6c0:	9b03      	ldr	r3, [sp, #12]
 800a6c2:	1d19      	adds	r1, r3, #4
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	9103      	str	r1, [sp, #12]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	bfbb      	ittet	lt
 800a6cc:	425b      	neglt	r3, r3
 800a6ce:	f042 0202 	orrlt.w	r2, r2, #2
 800a6d2:	9307      	strge	r3, [sp, #28]
 800a6d4:	9307      	strlt	r3, [sp, #28]
 800a6d6:	bfb8      	it	lt
 800a6d8:	9204      	strlt	r2, [sp, #16]
 800a6da:	7823      	ldrb	r3, [r4, #0]
 800a6dc:	2b2e      	cmp	r3, #46	@ 0x2e
 800a6de:	d10a      	bne.n	800a6f6 <_vfiprintf_r+0x156>
 800a6e0:	7863      	ldrb	r3, [r4, #1]
 800a6e2:	2b2a      	cmp	r3, #42	@ 0x2a
 800a6e4:	d132      	bne.n	800a74c <_vfiprintf_r+0x1ac>
 800a6e6:	9b03      	ldr	r3, [sp, #12]
 800a6e8:	1d1a      	adds	r2, r3, #4
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	9203      	str	r2, [sp, #12]
 800a6ee:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a6f2:	3402      	adds	r4, #2
 800a6f4:	9305      	str	r3, [sp, #20]
 800a6f6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a7cc <_vfiprintf_r+0x22c>
 800a6fa:	7821      	ldrb	r1, [r4, #0]
 800a6fc:	2203      	movs	r2, #3
 800a6fe:	4650      	mov	r0, sl
 800a700:	f7f5 fd6e 	bl	80001e0 <memchr>
 800a704:	b138      	cbz	r0, 800a716 <_vfiprintf_r+0x176>
 800a706:	9b04      	ldr	r3, [sp, #16]
 800a708:	eba0 000a 	sub.w	r0, r0, sl
 800a70c:	2240      	movs	r2, #64	@ 0x40
 800a70e:	4082      	lsls	r2, r0
 800a710:	4313      	orrs	r3, r2
 800a712:	3401      	adds	r4, #1
 800a714:	9304      	str	r3, [sp, #16]
 800a716:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a71a:	4829      	ldr	r0, [pc, #164]	@ (800a7c0 <_vfiprintf_r+0x220>)
 800a71c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a720:	2206      	movs	r2, #6
 800a722:	f7f5 fd5d 	bl	80001e0 <memchr>
 800a726:	2800      	cmp	r0, #0
 800a728:	d03f      	beq.n	800a7aa <_vfiprintf_r+0x20a>
 800a72a:	4b26      	ldr	r3, [pc, #152]	@ (800a7c4 <_vfiprintf_r+0x224>)
 800a72c:	bb1b      	cbnz	r3, 800a776 <_vfiprintf_r+0x1d6>
 800a72e:	9b03      	ldr	r3, [sp, #12]
 800a730:	3307      	adds	r3, #7
 800a732:	f023 0307 	bic.w	r3, r3, #7
 800a736:	3308      	adds	r3, #8
 800a738:	9303      	str	r3, [sp, #12]
 800a73a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a73c:	443b      	add	r3, r7
 800a73e:	9309      	str	r3, [sp, #36]	@ 0x24
 800a740:	e76a      	b.n	800a618 <_vfiprintf_r+0x78>
 800a742:	fb0c 3202 	mla	r2, ip, r2, r3
 800a746:	460c      	mov	r4, r1
 800a748:	2001      	movs	r0, #1
 800a74a:	e7a8      	b.n	800a69e <_vfiprintf_r+0xfe>
 800a74c:	2300      	movs	r3, #0
 800a74e:	3401      	adds	r4, #1
 800a750:	9305      	str	r3, [sp, #20]
 800a752:	4619      	mov	r1, r3
 800a754:	f04f 0c0a 	mov.w	ip, #10
 800a758:	4620      	mov	r0, r4
 800a75a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a75e:	3a30      	subs	r2, #48	@ 0x30
 800a760:	2a09      	cmp	r2, #9
 800a762:	d903      	bls.n	800a76c <_vfiprintf_r+0x1cc>
 800a764:	2b00      	cmp	r3, #0
 800a766:	d0c6      	beq.n	800a6f6 <_vfiprintf_r+0x156>
 800a768:	9105      	str	r1, [sp, #20]
 800a76a:	e7c4      	b.n	800a6f6 <_vfiprintf_r+0x156>
 800a76c:	fb0c 2101 	mla	r1, ip, r1, r2
 800a770:	4604      	mov	r4, r0
 800a772:	2301      	movs	r3, #1
 800a774:	e7f0      	b.n	800a758 <_vfiprintf_r+0x1b8>
 800a776:	ab03      	add	r3, sp, #12
 800a778:	9300      	str	r3, [sp, #0]
 800a77a:	462a      	mov	r2, r5
 800a77c:	4b12      	ldr	r3, [pc, #72]	@ (800a7c8 <_vfiprintf_r+0x228>)
 800a77e:	a904      	add	r1, sp, #16
 800a780:	4630      	mov	r0, r6
 800a782:	f3af 8000 	nop.w
 800a786:	4607      	mov	r7, r0
 800a788:	1c78      	adds	r0, r7, #1
 800a78a:	d1d6      	bne.n	800a73a <_vfiprintf_r+0x19a>
 800a78c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a78e:	07d9      	lsls	r1, r3, #31
 800a790:	d405      	bmi.n	800a79e <_vfiprintf_r+0x1fe>
 800a792:	89ab      	ldrh	r3, [r5, #12]
 800a794:	059a      	lsls	r2, r3, #22
 800a796:	d402      	bmi.n	800a79e <_vfiprintf_r+0x1fe>
 800a798:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a79a:	f7ff fe8b 	bl	800a4b4 <__retarget_lock_release_recursive>
 800a79e:	89ab      	ldrh	r3, [r5, #12]
 800a7a0:	065b      	lsls	r3, r3, #25
 800a7a2:	f53f af1f 	bmi.w	800a5e4 <_vfiprintf_r+0x44>
 800a7a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a7a8:	e71e      	b.n	800a5e8 <_vfiprintf_r+0x48>
 800a7aa:	ab03      	add	r3, sp, #12
 800a7ac:	9300      	str	r3, [sp, #0]
 800a7ae:	462a      	mov	r2, r5
 800a7b0:	4b05      	ldr	r3, [pc, #20]	@ (800a7c8 <_vfiprintf_r+0x228>)
 800a7b2:	a904      	add	r1, sp, #16
 800a7b4:	4630      	mov	r0, r6
 800a7b6:	f000 f879 	bl	800a8ac <_printf_i>
 800a7ba:	e7e4      	b.n	800a786 <_vfiprintf_r+0x1e6>
 800a7bc:	0800af8c 	.word	0x0800af8c
 800a7c0:	0800af96 	.word	0x0800af96
 800a7c4:	00000000 	.word	0x00000000
 800a7c8:	0800a57b 	.word	0x0800a57b
 800a7cc:	0800af92 	.word	0x0800af92

0800a7d0 <_printf_common>:
 800a7d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7d4:	4616      	mov	r6, r2
 800a7d6:	4698      	mov	r8, r3
 800a7d8:	688a      	ldr	r2, [r1, #8]
 800a7da:	690b      	ldr	r3, [r1, #16]
 800a7dc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a7e0:	4293      	cmp	r3, r2
 800a7e2:	bfb8      	it	lt
 800a7e4:	4613      	movlt	r3, r2
 800a7e6:	6033      	str	r3, [r6, #0]
 800a7e8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a7ec:	4607      	mov	r7, r0
 800a7ee:	460c      	mov	r4, r1
 800a7f0:	b10a      	cbz	r2, 800a7f6 <_printf_common+0x26>
 800a7f2:	3301      	adds	r3, #1
 800a7f4:	6033      	str	r3, [r6, #0]
 800a7f6:	6823      	ldr	r3, [r4, #0]
 800a7f8:	0699      	lsls	r1, r3, #26
 800a7fa:	bf42      	ittt	mi
 800a7fc:	6833      	ldrmi	r3, [r6, #0]
 800a7fe:	3302      	addmi	r3, #2
 800a800:	6033      	strmi	r3, [r6, #0]
 800a802:	6825      	ldr	r5, [r4, #0]
 800a804:	f015 0506 	ands.w	r5, r5, #6
 800a808:	d106      	bne.n	800a818 <_printf_common+0x48>
 800a80a:	f104 0a19 	add.w	sl, r4, #25
 800a80e:	68e3      	ldr	r3, [r4, #12]
 800a810:	6832      	ldr	r2, [r6, #0]
 800a812:	1a9b      	subs	r3, r3, r2
 800a814:	42ab      	cmp	r3, r5
 800a816:	dc26      	bgt.n	800a866 <_printf_common+0x96>
 800a818:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a81c:	6822      	ldr	r2, [r4, #0]
 800a81e:	3b00      	subs	r3, #0
 800a820:	bf18      	it	ne
 800a822:	2301      	movne	r3, #1
 800a824:	0692      	lsls	r2, r2, #26
 800a826:	d42b      	bmi.n	800a880 <_printf_common+0xb0>
 800a828:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a82c:	4641      	mov	r1, r8
 800a82e:	4638      	mov	r0, r7
 800a830:	47c8      	blx	r9
 800a832:	3001      	adds	r0, #1
 800a834:	d01e      	beq.n	800a874 <_printf_common+0xa4>
 800a836:	6823      	ldr	r3, [r4, #0]
 800a838:	6922      	ldr	r2, [r4, #16]
 800a83a:	f003 0306 	and.w	r3, r3, #6
 800a83e:	2b04      	cmp	r3, #4
 800a840:	bf02      	ittt	eq
 800a842:	68e5      	ldreq	r5, [r4, #12]
 800a844:	6833      	ldreq	r3, [r6, #0]
 800a846:	1aed      	subeq	r5, r5, r3
 800a848:	68a3      	ldr	r3, [r4, #8]
 800a84a:	bf0c      	ite	eq
 800a84c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a850:	2500      	movne	r5, #0
 800a852:	4293      	cmp	r3, r2
 800a854:	bfc4      	itt	gt
 800a856:	1a9b      	subgt	r3, r3, r2
 800a858:	18ed      	addgt	r5, r5, r3
 800a85a:	2600      	movs	r6, #0
 800a85c:	341a      	adds	r4, #26
 800a85e:	42b5      	cmp	r5, r6
 800a860:	d11a      	bne.n	800a898 <_printf_common+0xc8>
 800a862:	2000      	movs	r0, #0
 800a864:	e008      	b.n	800a878 <_printf_common+0xa8>
 800a866:	2301      	movs	r3, #1
 800a868:	4652      	mov	r2, sl
 800a86a:	4641      	mov	r1, r8
 800a86c:	4638      	mov	r0, r7
 800a86e:	47c8      	blx	r9
 800a870:	3001      	adds	r0, #1
 800a872:	d103      	bne.n	800a87c <_printf_common+0xac>
 800a874:	f04f 30ff 	mov.w	r0, #4294967295
 800a878:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a87c:	3501      	adds	r5, #1
 800a87e:	e7c6      	b.n	800a80e <_printf_common+0x3e>
 800a880:	18e1      	adds	r1, r4, r3
 800a882:	1c5a      	adds	r2, r3, #1
 800a884:	2030      	movs	r0, #48	@ 0x30
 800a886:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a88a:	4422      	add	r2, r4
 800a88c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a890:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a894:	3302      	adds	r3, #2
 800a896:	e7c7      	b.n	800a828 <_printf_common+0x58>
 800a898:	2301      	movs	r3, #1
 800a89a:	4622      	mov	r2, r4
 800a89c:	4641      	mov	r1, r8
 800a89e:	4638      	mov	r0, r7
 800a8a0:	47c8      	blx	r9
 800a8a2:	3001      	adds	r0, #1
 800a8a4:	d0e6      	beq.n	800a874 <_printf_common+0xa4>
 800a8a6:	3601      	adds	r6, #1
 800a8a8:	e7d9      	b.n	800a85e <_printf_common+0x8e>
	...

0800a8ac <_printf_i>:
 800a8ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a8b0:	7e0f      	ldrb	r7, [r1, #24]
 800a8b2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a8b4:	2f78      	cmp	r7, #120	@ 0x78
 800a8b6:	4691      	mov	r9, r2
 800a8b8:	4680      	mov	r8, r0
 800a8ba:	460c      	mov	r4, r1
 800a8bc:	469a      	mov	sl, r3
 800a8be:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a8c2:	d807      	bhi.n	800a8d4 <_printf_i+0x28>
 800a8c4:	2f62      	cmp	r7, #98	@ 0x62
 800a8c6:	d80a      	bhi.n	800a8de <_printf_i+0x32>
 800a8c8:	2f00      	cmp	r7, #0
 800a8ca:	f000 80d2 	beq.w	800aa72 <_printf_i+0x1c6>
 800a8ce:	2f58      	cmp	r7, #88	@ 0x58
 800a8d0:	f000 80b9 	beq.w	800aa46 <_printf_i+0x19a>
 800a8d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a8d8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a8dc:	e03a      	b.n	800a954 <_printf_i+0xa8>
 800a8de:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a8e2:	2b15      	cmp	r3, #21
 800a8e4:	d8f6      	bhi.n	800a8d4 <_printf_i+0x28>
 800a8e6:	a101      	add	r1, pc, #4	@ (adr r1, 800a8ec <_printf_i+0x40>)
 800a8e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a8ec:	0800a945 	.word	0x0800a945
 800a8f0:	0800a959 	.word	0x0800a959
 800a8f4:	0800a8d5 	.word	0x0800a8d5
 800a8f8:	0800a8d5 	.word	0x0800a8d5
 800a8fc:	0800a8d5 	.word	0x0800a8d5
 800a900:	0800a8d5 	.word	0x0800a8d5
 800a904:	0800a959 	.word	0x0800a959
 800a908:	0800a8d5 	.word	0x0800a8d5
 800a90c:	0800a8d5 	.word	0x0800a8d5
 800a910:	0800a8d5 	.word	0x0800a8d5
 800a914:	0800a8d5 	.word	0x0800a8d5
 800a918:	0800aa59 	.word	0x0800aa59
 800a91c:	0800a983 	.word	0x0800a983
 800a920:	0800aa13 	.word	0x0800aa13
 800a924:	0800a8d5 	.word	0x0800a8d5
 800a928:	0800a8d5 	.word	0x0800a8d5
 800a92c:	0800aa7b 	.word	0x0800aa7b
 800a930:	0800a8d5 	.word	0x0800a8d5
 800a934:	0800a983 	.word	0x0800a983
 800a938:	0800a8d5 	.word	0x0800a8d5
 800a93c:	0800a8d5 	.word	0x0800a8d5
 800a940:	0800aa1b 	.word	0x0800aa1b
 800a944:	6833      	ldr	r3, [r6, #0]
 800a946:	1d1a      	adds	r2, r3, #4
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	6032      	str	r2, [r6, #0]
 800a94c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a950:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a954:	2301      	movs	r3, #1
 800a956:	e09d      	b.n	800aa94 <_printf_i+0x1e8>
 800a958:	6833      	ldr	r3, [r6, #0]
 800a95a:	6820      	ldr	r0, [r4, #0]
 800a95c:	1d19      	adds	r1, r3, #4
 800a95e:	6031      	str	r1, [r6, #0]
 800a960:	0606      	lsls	r6, r0, #24
 800a962:	d501      	bpl.n	800a968 <_printf_i+0xbc>
 800a964:	681d      	ldr	r5, [r3, #0]
 800a966:	e003      	b.n	800a970 <_printf_i+0xc4>
 800a968:	0645      	lsls	r5, r0, #25
 800a96a:	d5fb      	bpl.n	800a964 <_printf_i+0xb8>
 800a96c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a970:	2d00      	cmp	r5, #0
 800a972:	da03      	bge.n	800a97c <_printf_i+0xd0>
 800a974:	232d      	movs	r3, #45	@ 0x2d
 800a976:	426d      	negs	r5, r5
 800a978:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a97c:	4859      	ldr	r0, [pc, #356]	@ (800aae4 <_printf_i+0x238>)
 800a97e:	230a      	movs	r3, #10
 800a980:	e011      	b.n	800a9a6 <_printf_i+0xfa>
 800a982:	6821      	ldr	r1, [r4, #0]
 800a984:	6833      	ldr	r3, [r6, #0]
 800a986:	0608      	lsls	r0, r1, #24
 800a988:	f853 5b04 	ldr.w	r5, [r3], #4
 800a98c:	d402      	bmi.n	800a994 <_printf_i+0xe8>
 800a98e:	0649      	lsls	r1, r1, #25
 800a990:	bf48      	it	mi
 800a992:	b2ad      	uxthmi	r5, r5
 800a994:	2f6f      	cmp	r7, #111	@ 0x6f
 800a996:	4853      	ldr	r0, [pc, #332]	@ (800aae4 <_printf_i+0x238>)
 800a998:	6033      	str	r3, [r6, #0]
 800a99a:	bf14      	ite	ne
 800a99c:	230a      	movne	r3, #10
 800a99e:	2308      	moveq	r3, #8
 800a9a0:	2100      	movs	r1, #0
 800a9a2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a9a6:	6866      	ldr	r6, [r4, #4]
 800a9a8:	60a6      	str	r6, [r4, #8]
 800a9aa:	2e00      	cmp	r6, #0
 800a9ac:	bfa2      	ittt	ge
 800a9ae:	6821      	ldrge	r1, [r4, #0]
 800a9b0:	f021 0104 	bicge.w	r1, r1, #4
 800a9b4:	6021      	strge	r1, [r4, #0]
 800a9b6:	b90d      	cbnz	r5, 800a9bc <_printf_i+0x110>
 800a9b8:	2e00      	cmp	r6, #0
 800a9ba:	d04b      	beq.n	800aa54 <_printf_i+0x1a8>
 800a9bc:	4616      	mov	r6, r2
 800a9be:	fbb5 f1f3 	udiv	r1, r5, r3
 800a9c2:	fb03 5711 	mls	r7, r3, r1, r5
 800a9c6:	5dc7      	ldrb	r7, [r0, r7]
 800a9c8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a9cc:	462f      	mov	r7, r5
 800a9ce:	42bb      	cmp	r3, r7
 800a9d0:	460d      	mov	r5, r1
 800a9d2:	d9f4      	bls.n	800a9be <_printf_i+0x112>
 800a9d4:	2b08      	cmp	r3, #8
 800a9d6:	d10b      	bne.n	800a9f0 <_printf_i+0x144>
 800a9d8:	6823      	ldr	r3, [r4, #0]
 800a9da:	07df      	lsls	r7, r3, #31
 800a9dc:	d508      	bpl.n	800a9f0 <_printf_i+0x144>
 800a9de:	6923      	ldr	r3, [r4, #16]
 800a9e0:	6861      	ldr	r1, [r4, #4]
 800a9e2:	4299      	cmp	r1, r3
 800a9e4:	bfde      	ittt	le
 800a9e6:	2330      	movle	r3, #48	@ 0x30
 800a9e8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a9ec:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a9f0:	1b92      	subs	r2, r2, r6
 800a9f2:	6122      	str	r2, [r4, #16]
 800a9f4:	f8cd a000 	str.w	sl, [sp]
 800a9f8:	464b      	mov	r3, r9
 800a9fa:	aa03      	add	r2, sp, #12
 800a9fc:	4621      	mov	r1, r4
 800a9fe:	4640      	mov	r0, r8
 800aa00:	f7ff fee6 	bl	800a7d0 <_printf_common>
 800aa04:	3001      	adds	r0, #1
 800aa06:	d14a      	bne.n	800aa9e <_printf_i+0x1f2>
 800aa08:	f04f 30ff 	mov.w	r0, #4294967295
 800aa0c:	b004      	add	sp, #16
 800aa0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa12:	6823      	ldr	r3, [r4, #0]
 800aa14:	f043 0320 	orr.w	r3, r3, #32
 800aa18:	6023      	str	r3, [r4, #0]
 800aa1a:	4833      	ldr	r0, [pc, #204]	@ (800aae8 <_printf_i+0x23c>)
 800aa1c:	2778      	movs	r7, #120	@ 0x78
 800aa1e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800aa22:	6823      	ldr	r3, [r4, #0]
 800aa24:	6831      	ldr	r1, [r6, #0]
 800aa26:	061f      	lsls	r7, r3, #24
 800aa28:	f851 5b04 	ldr.w	r5, [r1], #4
 800aa2c:	d402      	bmi.n	800aa34 <_printf_i+0x188>
 800aa2e:	065f      	lsls	r7, r3, #25
 800aa30:	bf48      	it	mi
 800aa32:	b2ad      	uxthmi	r5, r5
 800aa34:	6031      	str	r1, [r6, #0]
 800aa36:	07d9      	lsls	r1, r3, #31
 800aa38:	bf44      	itt	mi
 800aa3a:	f043 0320 	orrmi.w	r3, r3, #32
 800aa3e:	6023      	strmi	r3, [r4, #0]
 800aa40:	b11d      	cbz	r5, 800aa4a <_printf_i+0x19e>
 800aa42:	2310      	movs	r3, #16
 800aa44:	e7ac      	b.n	800a9a0 <_printf_i+0xf4>
 800aa46:	4827      	ldr	r0, [pc, #156]	@ (800aae4 <_printf_i+0x238>)
 800aa48:	e7e9      	b.n	800aa1e <_printf_i+0x172>
 800aa4a:	6823      	ldr	r3, [r4, #0]
 800aa4c:	f023 0320 	bic.w	r3, r3, #32
 800aa50:	6023      	str	r3, [r4, #0]
 800aa52:	e7f6      	b.n	800aa42 <_printf_i+0x196>
 800aa54:	4616      	mov	r6, r2
 800aa56:	e7bd      	b.n	800a9d4 <_printf_i+0x128>
 800aa58:	6833      	ldr	r3, [r6, #0]
 800aa5a:	6825      	ldr	r5, [r4, #0]
 800aa5c:	6961      	ldr	r1, [r4, #20]
 800aa5e:	1d18      	adds	r0, r3, #4
 800aa60:	6030      	str	r0, [r6, #0]
 800aa62:	062e      	lsls	r6, r5, #24
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	d501      	bpl.n	800aa6c <_printf_i+0x1c0>
 800aa68:	6019      	str	r1, [r3, #0]
 800aa6a:	e002      	b.n	800aa72 <_printf_i+0x1c6>
 800aa6c:	0668      	lsls	r0, r5, #25
 800aa6e:	d5fb      	bpl.n	800aa68 <_printf_i+0x1bc>
 800aa70:	8019      	strh	r1, [r3, #0]
 800aa72:	2300      	movs	r3, #0
 800aa74:	6123      	str	r3, [r4, #16]
 800aa76:	4616      	mov	r6, r2
 800aa78:	e7bc      	b.n	800a9f4 <_printf_i+0x148>
 800aa7a:	6833      	ldr	r3, [r6, #0]
 800aa7c:	1d1a      	adds	r2, r3, #4
 800aa7e:	6032      	str	r2, [r6, #0]
 800aa80:	681e      	ldr	r6, [r3, #0]
 800aa82:	6862      	ldr	r2, [r4, #4]
 800aa84:	2100      	movs	r1, #0
 800aa86:	4630      	mov	r0, r6
 800aa88:	f7f5 fbaa 	bl	80001e0 <memchr>
 800aa8c:	b108      	cbz	r0, 800aa92 <_printf_i+0x1e6>
 800aa8e:	1b80      	subs	r0, r0, r6
 800aa90:	6060      	str	r0, [r4, #4]
 800aa92:	6863      	ldr	r3, [r4, #4]
 800aa94:	6123      	str	r3, [r4, #16]
 800aa96:	2300      	movs	r3, #0
 800aa98:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aa9c:	e7aa      	b.n	800a9f4 <_printf_i+0x148>
 800aa9e:	6923      	ldr	r3, [r4, #16]
 800aaa0:	4632      	mov	r2, r6
 800aaa2:	4649      	mov	r1, r9
 800aaa4:	4640      	mov	r0, r8
 800aaa6:	47d0      	blx	sl
 800aaa8:	3001      	adds	r0, #1
 800aaaa:	d0ad      	beq.n	800aa08 <_printf_i+0x15c>
 800aaac:	6823      	ldr	r3, [r4, #0]
 800aaae:	079b      	lsls	r3, r3, #30
 800aab0:	d413      	bmi.n	800aada <_printf_i+0x22e>
 800aab2:	68e0      	ldr	r0, [r4, #12]
 800aab4:	9b03      	ldr	r3, [sp, #12]
 800aab6:	4298      	cmp	r0, r3
 800aab8:	bfb8      	it	lt
 800aaba:	4618      	movlt	r0, r3
 800aabc:	e7a6      	b.n	800aa0c <_printf_i+0x160>
 800aabe:	2301      	movs	r3, #1
 800aac0:	4632      	mov	r2, r6
 800aac2:	4649      	mov	r1, r9
 800aac4:	4640      	mov	r0, r8
 800aac6:	47d0      	blx	sl
 800aac8:	3001      	adds	r0, #1
 800aaca:	d09d      	beq.n	800aa08 <_printf_i+0x15c>
 800aacc:	3501      	adds	r5, #1
 800aace:	68e3      	ldr	r3, [r4, #12]
 800aad0:	9903      	ldr	r1, [sp, #12]
 800aad2:	1a5b      	subs	r3, r3, r1
 800aad4:	42ab      	cmp	r3, r5
 800aad6:	dcf2      	bgt.n	800aabe <_printf_i+0x212>
 800aad8:	e7eb      	b.n	800aab2 <_printf_i+0x206>
 800aada:	2500      	movs	r5, #0
 800aadc:	f104 0619 	add.w	r6, r4, #25
 800aae0:	e7f5      	b.n	800aace <_printf_i+0x222>
 800aae2:	bf00      	nop
 800aae4:	0800af9d 	.word	0x0800af9d
 800aae8:	0800afae 	.word	0x0800afae

0800aaec <__sflush_r>:
 800aaec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800aaf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aaf4:	0716      	lsls	r6, r2, #28
 800aaf6:	4605      	mov	r5, r0
 800aaf8:	460c      	mov	r4, r1
 800aafa:	d454      	bmi.n	800aba6 <__sflush_r+0xba>
 800aafc:	684b      	ldr	r3, [r1, #4]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	dc02      	bgt.n	800ab08 <__sflush_r+0x1c>
 800ab02:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	dd48      	ble.n	800ab9a <__sflush_r+0xae>
 800ab08:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ab0a:	2e00      	cmp	r6, #0
 800ab0c:	d045      	beq.n	800ab9a <__sflush_r+0xae>
 800ab0e:	2300      	movs	r3, #0
 800ab10:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ab14:	682f      	ldr	r7, [r5, #0]
 800ab16:	6a21      	ldr	r1, [r4, #32]
 800ab18:	602b      	str	r3, [r5, #0]
 800ab1a:	d030      	beq.n	800ab7e <__sflush_r+0x92>
 800ab1c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ab1e:	89a3      	ldrh	r3, [r4, #12]
 800ab20:	0759      	lsls	r1, r3, #29
 800ab22:	d505      	bpl.n	800ab30 <__sflush_r+0x44>
 800ab24:	6863      	ldr	r3, [r4, #4]
 800ab26:	1ad2      	subs	r2, r2, r3
 800ab28:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ab2a:	b10b      	cbz	r3, 800ab30 <__sflush_r+0x44>
 800ab2c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ab2e:	1ad2      	subs	r2, r2, r3
 800ab30:	2300      	movs	r3, #0
 800ab32:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ab34:	6a21      	ldr	r1, [r4, #32]
 800ab36:	4628      	mov	r0, r5
 800ab38:	47b0      	blx	r6
 800ab3a:	1c43      	adds	r3, r0, #1
 800ab3c:	89a3      	ldrh	r3, [r4, #12]
 800ab3e:	d106      	bne.n	800ab4e <__sflush_r+0x62>
 800ab40:	6829      	ldr	r1, [r5, #0]
 800ab42:	291d      	cmp	r1, #29
 800ab44:	d82b      	bhi.n	800ab9e <__sflush_r+0xb2>
 800ab46:	4a2a      	ldr	r2, [pc, #168]	@ (800abf0 <__sflush_r+0x104>)
 800ab48:	410a      	asrs	r2, r1
 800ab4a:	07d6      	lsls	r6, r2, #31
 800ab4c:	d427      	bmi.n	800ab9e <__sflush_r+0xb2>
 800ab4e:	2200      	movs	r2, #0
 800ab50:	6062      	str	r2, [r4, #4]
 800ab52:	04d9      	lsls	r1, r3, #19
 800ab54:	6922      	ldr	r2, [r4, #16]
 800ab56:	6022      	str	r2, [r4, #0]
 800ab58:	d504      	bpl.n	800ab64 <__sflush_r+0x78>
 800ab5a:	1c42      	adds	r2, r0, #1
 800ab5c:	d101      	bne.n	800ab62 <__sflush_r+0x76>
 800ab5e:	682b      	ldr	r3, [r5, #0]
 800ab60:	b903      	cbnz	r3, 800ab64 <__sflush_r+0x78>
 800ab62:	6560      	str	r0, [r4, #84]	@ 0x54
 800ab64:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ab66:	602f      	str	r7, [r5, #0]
 800ab68:	b1b9      	cbz	r1, 800ab9a <__sflush_r+0xae>
 800ab6a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ab6e:	4299      	cmp	r1, r3
 800ab70:	d002      	beq.n	800ab78 <__sflush_r+0x8c>
 800ab72:	4628      	mov	r0, r5
 800ab74:	f7ff fca0 	bl	800a4b8 <_free_r>
 800ab78:	2300      	movs	r3, #0
 800ab7a:	6363      	str	r3, [r4, #52]	@ 0x34
 800ab7c:	e00d      	b.n	800ab9a <__sflush_r+0xae>
 800ab7e:	2301      	movs	r3, #1
 800ab80:	4628      	mov	r0, r5
 800ab82:	47b0      	blx	r6
 800ab84:	4602      	mov	r2, r0
 800ab86:	1c50      	adds	r0, r2, #1
 800ab88:	d1c9      	bne.n	800ab1e <__sflush_r+0x32>
 800ab8a:	682b      	ldr	r3, [r5, #0]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d0c6      	beq.n	800ab1e <__sflush_r+0x32>
 800ab90:	2b1d      	cmp	r3, #29
 800ab92:	d001      	beq.n	800ab98 <__sflush_r+0xac>
 800ab94:	2b16      	cmp	r3, #22
 800ab96:	d11e      	bne.n	800abd6 <__sflush_r+0xea>
 800ab98:	602f      	str	r7, [r5, #0]
 800ab9a:	2000      	movs	r0, #0
 800ab9c:	e022      	b.n	800abe4 <__sflush_r+0xf8>
 800ab9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aba2:	b21b      	sxth	r3, r3
 800aba4:	e01b      	b.n	800abde <__sflush_r+0xf2>
 800aba6:	690f      	ldr	r7, [r1, #16]
 800aba8:	2f00      	cmp	r7, #0
 800abaa:	d0f6      	beq.n	800ab9a <__sflush_r+0xae>
 800abac:	0793      	lsls	r3, r2, #30
 800abae:	680e      	ldr	r6, [r1, #0]
 800abb0:	bf08      	it	eq
 800abb2:	694b      	ldreq	r3, [r1, #20]
 800abb4:	600f      	str	r7, [r1, #0]
 800abb6:	bf18      	it	ne
 800abb8:	2300      	movne	r3, #0
 800abba:	eba6 0807 	sub.w	r8, r6, r7
 800abbe:	608b      	str	r3, [r1, #8]
 800abc0:	f1b8 0f00 	cmp.w	r8, #0
 800abc4:	dde9      	ble.n	800ab9a <__sflush_r+0xae>
 800abc6:	6a21      	ldr	r1, [r4, #32]
 800abc8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800abca:	4643      	mov	r3, r8
 800abcc:	463a      	mov	r2, r7
 800abce:	4628      	mov	r0, r5
 800abd0:	47b0      	blx	r6
 800abd2:	2800      	cmp	r0, #0
 800abd4:	dc08      	bgt.n	800abe8 <__sflush_r+0xfc>
 800abd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800abda:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800abde:	81a3      	strh	r3, [r4, #12]
 800abe0:	f04f 30ff 	mov.w	r0, #4294967295
 800abe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abe8:	4407      	add	r7, r0
 800abea:	eba8 0800 	sub.w	r8, r8, r0
 800abee:	e7e7      	b.n	800abc0 <__sflush_r+0xd4>
 800abf0:	dfbffffe 	.word	0xdfbffffe

0800abf4 <_fflush_r>:
 800abf4:	b538      	push	{r3, r4, r5, lr}
 800abf6:	690b      	ldr	r3, [r1, #16]
 800abf8:	4605      	mov	r5, r0
 800abfa:	460c      	mov	r4, r1
 800abfc:	b913      	cbnz	r3, 800ac04 <_fflush_r+0x10>
 800abfe:	2500      	movs	r5, #0
 800ac00:	4628      	mov	r0, r5
 800ac02:	bd38      	pop	{r3, r4, r5, pc}
 800ac04:	b118      	cbz	r0, 800ac0e <_fflush_r+0x1a>
 800ac06:	6a03      	ldr	r3, [r0, #32]
 800ac08:	b90b      	cbnz	r3, 800ac0e <_fflush_r+0x1a>
 800ac0a:	f7ff fb35 	bl	800a278 <__sinit>
 800ac0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d0f3      	beq.n	800abfe <_fflush_r+0xa>
 800ac16:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ac18:	07d0      	lsls	r0, r2, #31
 800ac1a:	d404      	bmi.n	800ac26 <_fflush_r+0x32>
 800ac1c:	0599      	lsls	r1, r3, #22
 800ac1e:	d402      	bmi.n	800ac26 <_fflush_r+0x32>
 800ac20:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ac22:	f7ff fc46 	bl	800a4b2 <__retarget_lock_acquire_recursive>
 800ac26:	4628      	mov	r0, r5
 800ac28:	4621      	mov	r1, r4
 800ac2a:	f7ff ff5f 	bl	800aaec <__sflush_r>
 800ac2e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ac30:	07da      	lsls	r2, r3, #31
 800ac32:	4605      	mov	r5, r0
 800ac34:	d4e4      	bmi.n	800ac00 <_fflush_r+0xc>
 800ac36:	89a3      	ldrh	r3, [r4, #12]
 800ac38:	059b      	lsls	r3, r3, #22
 800ac3a:	d4e1      	bmi.n	800ac00 <_fflush_r+0xc>
 800ac3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ac3e:	f7ff fc39 	bl	800a4b4 <__retarget_lock_release_recursive>
 800ac42:	e7dd      	b.n	800ac00 <_fflush_r+0xc>

0800ac44 <_putc_r>:
 800ac44:	b570      	push	{r4, r5, r6, lr}
 800ac46:	460d      	mov	r5, r1
 800ac48:	4614      	mov	r4, r2
 800ac4a:	4606      	mov	r6, r0
 800ac4c:	b118      	cbz	r0, 800ac56 <_putc_r+0x12>
 800ac4e:	6a03      	ldr	r3, [r0, #32]
 800ac50:	b90b      	cbnz	r3, 800ac56 <_putc_r+0x12>
 800ac52:	f7ff fb11 	bl	800a278 <__sinit>
 800ac56:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ac58:	07d8      	lsls	r0, r3, #31
 800ac5a:	d405      	bmi.n	800ac68 <_putc_r+0x24>
 800ac5c:	89a3      	ldrh	r3, [r4, #12]
 800ac5e:	0599      	lsls	r1, r3, #22
 800ac60:	d402      	bmi.n	800ac68 <_putc_r+0x24>
 800ac62:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ac64:	f7ff fc25 	bl	800a4b2 <__retarget_lock_acquire_recursive>
 800ac68:	68a3      	ldr	r3, [r4, #8]
 800ac6a:	3b01      	subs	r3, #1
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	60a3      	str	r3, [r4, #8]
 800ac70:	da05      	bge.n	800ac7e <_putc_r+0x3a>
 800ac72:	69a2      	ldr	r2, [r4, #24]
 800ac74:	4293      	cmp	r3, r2
 800ac76:	db12      	blt.n	800ac9e <_putc_r+0x5a>
 800ac78:	b2eb      	uxtb	r3, r5
 800ac7a:	2b0a      	cmp	r3, #10
 800ac7c:	d00f      	beq.n	800ac9e <_putc_r+0x5a>
 800ac7e:	6823      	ldr	r3, [r4, #0]
 800ac80:	1c5a      	adds	r2, r3, #1
 800ac82:	6022      	str	r2, [r4, #0]
 800ac84:	701d      	strb	r5, [r3, #0]
 800ac86:	b2ed      	uxtb	r5, r5
 800ac88:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ac8a:	07da      	lsls	r2, r3, #31
 800ac8c:	d405      	bmi.n	800ac9a <_putc_r+0x56>
 800ac8e:	89a3      	ldrh	r3, [r4, #12]
 800ac90:	059b      	lsls	r3, r3, #22
 800ac92:	d402      	bmi.n	800ac9a <_putc_r+0x56>
 800ac94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ac96:	f7ff fc0d 	bl	800a4b4 <__retarget_lock_release_recursive>
 800ac9a:	4628      	mov	r0, r5
 800ac9c:	bd70      	pop	{r4, r5, r6, pc}
 800ac9e:	4629      	mov	r1, r5
 800aca0:	4622      	mov	r2, r4
 800aca2:	4630      	mov	r0, r6
 800aca4:	f000 f802 	bl	800acac <__swbuf_r>
 800aca8:	4605      	mov	r5, r0
 800acaa:	e7ed      	b.n	800ac88 <_putc_r+0x44>

0800acac <__swbuf_r>:
 800acac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acae:	460e      	mov	r6, r1
 800acb0:	4614      	mov	r4, r2
 800acb2:	4605      	mov	r5, r0
 800acb4:	b118      	cbz	r0, 800acbe <__swbuf_r+0x12>
 800acb6:	6a03      	ldr	r3, [r0, #32]
 800acb8:	b90b      	cbnz	r3, 800acbe <__swbuf_r+0x12>
 800acba:	f7ff fadd 	bl	800a278 <__sinit>
 800acbe:	69a3      	ldr	r3, [r4, #24]
 800acc0:	60a3      	str	r3, [r4, #8]
 800acc2:	89a3      	ldrh	r3, [r4, #12]
 800acc4:	071a      	lsls	r2, r3, #28
 800acc6:	d501      	bpl.n	800accc <__swbuf_r+0x20>
 800acc8:	6923      	ldr	r3, [r4, #16]
 800acca:	b943      	cbnz	r3, 800acde <__swbuf_r+0x32>
 800accc:	4621      	mov	r1, r4
 800acce:	4628      	mov	r0, r5
 800acd0:	f000 f82a 	bl	800ad28 <__swsetup_r>
 800acd4:	b118      	cbz	r0, 800acde <__swbuf_r+0x32>
 800acd6:	f04f 37ff 	mov.w	r7, #4294967295
 800acda:	4638      	mov	r0, r7
 800acdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800acde:	6823      	ldr	r3, [r4, #0]
 800ace0:	6922      	ldr	r2, [r4, #16]
 800ace2:	1a98      	subs	r0, r3, r2
 800ace4:	6963      	ldr	r3, [r4, #20]
 800ace6:	b2f6      	uxtb	r6, r6
 800ace8:	4283      	cmp	r3, r0
 800acea:	4637      	mov	r7, r6
 800acec:	dc05      	bgt.n	800acfa <__swbuf_r+0x4e>
 800acee:	4621      	mov	r1, r4
 800acf0:	4628      	mov	r0, r5
 800acf2:	f7ff ff7f 	bl	800abf4 <_fflush_r>
 800acf6:	2800      	cmp	r0, #0
 800acf8:	d1ed      	bne.n	800acd6 <__swbuf_r+0x2a>
 800acfa:	68a3      	ldr	r3, [r4, #8]
 800acfc:	3b01      	subs	r3, #1
 800acfe:	60a3      	str	r3, [r4, #8]
 800ad00:	6823      	ldr	r3, [r4, #0]
 800ad02:	1c5a      	adds	r2, r3, #1
 800ad04:	6022      	str	r2, [r4, #0]
 800ad06:	701e      	strb	r6, [r3, #0]
 800ad08:	6962      	ldr	r2, [r4, #20]
 800ad0a:	1c43      	adds	r3, r0, #1
 800ad0c:	429a      	cmp	r2, r3
 800ad0e:	d004      	beq.n	800ad1a <__swbuf_r+0x6e>
 800ad10:	89a3      	ldrh	r3, [r4, #12]
 800ad12:	07db      	lsls	r3, r3, #31
 800ad14:	d5e1      	bpl.n	800acda <__swbuf_r+0x2e>
 800ad16:	2e0a      	cmp	r6, #10
 800ad18:	d1df      	bne.n	800acda <__swbuf_r+0x2e>
 800ad1a:	4621      	mov	r1, r4
 800ad1c:	4628      	mov	r0, r5
 800ad1e:	f7ff ff69 	bl	800abf4 <_fflush_r>
 800ad22:	2800      	cmp	r0, #0
 800ad24:	d0d9      	beq.n	800acda <__swbuf_r+0x2e>
 800ad26:	e7d6      	b.n	800acd6 <__swbuf_r+0x2a>

0800ad28 <__swsetup_r>:
 800ad28:	b538      	push	{r3, r4, r5, lr}
 800ad2a:	4b29      	ldr	r3, [pc, #164]	@ (800add0 <__swsetup_r+0xa8>)
 800ad2c:	4605      	mov	r5, r0
 800ad2e:	6818      	ldr	r0, [r3, #0]
 800ad30:	460c      	mov	r4, r1
 800ad32:	b118      	cbz	r0, 800ad3c <__swsetup_r+0x14>
 800ad34:	6a03      	ldr	r3, [r0, #32]
 800ad36:	b90b      	cbnz	r3, 800ad3c <__swsetup_r+0x14>
 800ad38:	f7ff fa9e 	bl	800a278 <__sinit>
 800ad3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad40:	0719      	lsls	r1, r3, #28
 800ad42:	d422      	bmi.n	800ad8a <__swsetup_r+0x62>
 800ad44:	06da      	lsls	r2, r3, #27
 800ad46:	d407      	bmi.n	800ad58 <__swsetup_r+0x30>
 800ad48:	2209      	movs	r2, #9
 800ad4a:	602a      	str	r2, [r5, #0]
 800ad4c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ad50:	81a3      	strh	r3, [r4, #12]
 800ad52:	f04f 30ff 	mov.w	r0, #4294967295
 800ad56:	e033      	b.n	800adc0 <__swsetup_r+0x98>
 800ad58:	0758      	lsls	r0, r3, #29
 800ad5a:	d512      	bpl.n	800ad82 <__swsetup_r+0x5a>
 800ad5c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ad5e:	b141      	cbz	r1, 800ad72 <__swsetup_r+0x4a>
 800ad60:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ad64:	4299      	cmp	r1, r3
 800ad66:	d002      	beq.n	800ad6e <__swsetup_r+0x46>
 800ad68:	4628      	mov	r0, r5
 800ad6a:	f7ff fba5 	bl	800a4b8 <_free_r>
 800ad6e:	2300      	movs	r3, #0
 800ad70:	6363      	str	r3, [r4, #52]	@ 0x34
 800ad72:	89a3      	ldrh	r3, [r4, #12]
 800ad74:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ad78:	81a3      	strh	r3, [r4, #12]
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	6063      	str	r3, [r4, #4]
 800ad7e:	6923      	ldr	r3, [r4, #16]
 800ad80:	6023      	str	r3, [r4, #0]
 800ad82:	89a3      	ldrh	r3, [r4, #12]
 800ad84:	f043 0308 	orr.w	r3, r3, #8
 800ad88:	81a3      	strh	r3, [r4, #12]
 800ad8a:	6923      	ldr	r3, [r4, #16]
 800ad8c:	b94b      	cbnz	r3, 800ada2 <__swsetup_r+0x7a>
 800ad8e:	89a3      	ldrh	r3, [r4, #12]
 800ad90:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ad94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ad98:	d003      	beq.n	800ada2 <__swsetup_r+0x7a>
 800ad9a:	4621      	mov	r1, r4
 800ad9c:	4628      	mov	r0, r5
 800ad9e:	f000 f83f 	bl	800ae20 <__smakebuf_r>
 800ada2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ada6:	f013 0201 	ands.w	r2, r3, #1
 800adaa:	d00a      	beq.n	800adc2 <__swsetup_r+0x9a>
 800adac:	2200      	movs	r2, #0
 800adae:	60a2      	str	r2, [r4, #8]
 800adb0:	6962      	ldr	r2, [r4, #20]
 800adb2:	4252      	negs	r2, r2
 800adb4:	61a2      	str	r2, [r4, #24]
 800adb6:	6922      	ldr	r2, [r4, #16]
 800adb8:	b942      	cbnz	r2, 800adcc <__swsetup_r+0xa4>
 800adba:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800adbe:	d1c5      	bne.n	800ad4c <__swsetup_r+0x24>
 800adc0:	bd38      	pop	{r3, r4, r5, pc}
 800adc2:	0799      	lsls	r1, r3, #30
 800adc4:	bf58      	it	pl
 800adc6:	6962      	ldrpl	r2, [r4, #20]
 800adc8:	60a2      	str	r2, [r4, #8]
 800adca:	e7f4      	b.n	800adb6 <__swsetup_r+0x8e>
 800adcc:	2000      	movs	r0, #0
 800adce:	e7f7      	b.n	800adc0 <__swsetup_r+0x98>
 800add0:	20000188 	.word	0x20000188

0800add4 <__swhatbuf_r>:
 800add4:	b570      	push	{r4, r5, r6, lr}
 800add6:	460c      	mov	r4, r1
 800add8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800addc:	2900      	cmp	r1, #0
 800adde:	b096      	sub	sp, #88	@ 0x58
 800ade0:	4615      	mov	r5, r2
 800ade2:	461e      	mov	r6, r3
 800ade4:	da0d      	bge.n	800ae02 <__swhatbuf_r+0x2e>
 800ade6:	89a3      	ldrh	r3, [r4, #12]
 800ade8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800adec:	f04f 0100 	mov.w	r1, #0
 800adf0:	bf14      	ite	ne
 800adf2:	2340      	movne	r3, #64	@ 0x40
 800adf4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800adf8:	2000      	movs	r0, #0
 800adfa:	6031      	str	r1, [r6, #0]
 800adfc:	602b      	str	r3, [r5, #0]
 800adfe:	b016      	add	sp, #88	@ 0x58
 800ae00:	bd70      	pop	{r4, r5, r6, pc}
 800ae02:	466a      	mov	r2, sp
 800ae04:	f000 f848 	bl	800ae98 <_fstat_r>
 800ae08:	2800      	cmp	r0, #0
 800ae0a:	dbec      	blt.n	800ade6 <__swhatbuf_r+0x12>
 800ae0c:	9901      	ldr	r1, [sp, #4]
 800ae0e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ae12:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ae16:	4259      	negs	r1, r3
 800ae18:	4159      	adcs	r1, r3
 800ae1a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ae1e:	e7eb      	b.n	800adf8 <__swhatbuf_r+0x24>

0800ae20 <__smakebuf_r>:
 800ae20:	898b      	ldrh	r3, [r1, #12]
 800ae22:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ae24:	079d      	lsls	r5, r3, #30
 800ae26:	4606      	mov	r6, r0
 800ae28:	460c      	mov	r4, r1
 800ae2a:	d507      	bpl.n	800ae3c <__smakebuf_r+0x1c>
 800ae2c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ae30:	6023      	str	r3, [r4, #0]
 800ae32:	6123      	str	r3, [r4, #16]
 800ae34:	2301      	movs	r3, #1
 800ae36:	6163      	str	r3, [r4, #20]
 800ae38:	b003      	add	sp, #12
 800ae3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae3c:	ab01      	add	r3, sp, #4
 800ae3e:	466a      	mov	r2, sp
 800ae40:	f7ff ffc8 	bl	800add4 <__swhatbuf_r>
 800ae44:	9f00      	ldr	r7, [sp, #0]
 800ae46:	4605      	mov	r5, r0
 800ae48:	4639      	mov	r1, r7
 800ae4a:	4630      	mov	r0, r6
 800ae4c:	f7ff f8fc 	bl	800a048 <_malloc_r>
 800ae50:	b948      	cbnz	r0, 800ae66 <__smakebuf_r+0x46>
 800ae52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae56:	059a      	lsls	r2, r3, #22
 800ae58:	d4ee      	bmi.n	800ae38 <__smakebuf_r+0x18>
 800ae5a:	f023 0303 	bic.w	r3, r3, #3
 800ae5e:	f043 0302 	orr.w	r3, r3, #2
 800ae62:	81a3      	strh	r3, [r4, #12]
 800ae64:	e7e2      	b.n	800ae2c <__smakebuf_r+0xc>
 800ae66:	89a3      	ldrh	r3, [r4, #12]
 800ae68:	6020      	str	r0, [r4, #0]
 800ae6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ae6e:	81a3      	strh	r3, [r4, #12]
 800ae70:	9b01      	ldr	r3, [sp, #4]
 800ae72:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ae76:	b15b      	cbz	r3, 800ae90 <__smakebuf_r+0x70>
 800ae78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ae7c:	4630      	mov	r0, r6
 800ae7e:	f000 f81d 	bl	800aebc <_isatty_r>
 800ae82:	b128      	cbz	r0, 800ae90 <__smakebuf_r+0x70>
 800ae84:	89a3      	ldrh	r3, [r4, #12]
 800ae86:	f023 0303 	bic.w	r3, r3, #3
 800ae8a:	f043 0301 	orr.w	r3, r3, #1
 800ae8e:	81a3      	strh	r3, [r4, #12]
 800ae90:	89a3      	ldrh	r3, [r4, #12]
 800ae92:	431d      	orrs	r5, r3
 800ae94:	81a5      	strh	r5, [r4, #12]
 800ae96:	e7cf      	b.n	800ae38 <__smakebuf_r+0x18>

0800ae98 <_fstat_r>:
 800ae98:	b538      	push	{r3, r4, r5, lr}
 800ae9a:	4d07      	ldr	r5, [pc, #28]	@ (800aeb8 <_fstat_r+0x20>)
 800ae9c:	2300      	movs	r3, #0
 800ae9e:	4604      	mov	r4, r0
 800aea0:	4608      	mov	r0, r1
 800aea2:	4611      	mov	r1, r2
 800aea4:	602b      	str	r3, [r5, #0]
 800aea6:	f7f6 fb96 	bl	80015d6 <_fstat>
 800aeaa:	1c43      	adds	r3, r0, #1
 800aeac:	d102      	bne.n	800aeb4 <_fstat_r+0x1c>
 800aeae:	682b      	ldr	r3, [r5, #0]
 800aeb0:	b103      	cbz	r3, 800aeb4 <_fstat_r+0x1c>
 800aeb2:	6023      	str	r3, [r4, #0]
 800aeb4:	bd38      	pop	{r3, r4, r5, pc}
 800aeb6:	bf00      	nop
 800aeb8:	2000723c 	.word	0x2000723c

0800aebc <_isatty_r>:
 800aebc:	b538      	push	{r3, r4, r5, lr}
 800aebe:	4d06      	ldr	r5, [pc, #24]	@ (800aed8 <_isatty_r+0x1c>)
 800aec0:	2300      	movs	r3, #0
 800aec2:	4604      	mov	r4, r0
 800aec4:	4608      	mov	r0, r1
 800aec6:	602b      	str	r3, [r5, #0]
 800aec8:	f7f6 fb95 	bl	80015f6 <_isatty>
 800aecc:	1c43      	adds	r3, r0, #1
 800aece:	d102      	bne.n	800aed6 <_isatty_r+0x1a>
 800aed0:	682b      	ldr	r3, [r5, #0]
 800aed2:	b103      	cbz	r3, 800aed6 <_isatty_r+0x1a>
 800aed4:	6023      	str	r3, [r4, #0]
 800aed6:	bd38      	pop	{r3, r4, r5, pc}
 800aed8:	2000723c 	.word	0x2000723c

0800aedc <_init>:
 800aedc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aede:	bf00      	nop
 800aee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aee2:	bc08      	pop	{r3}
 800aee4:	469e      	mov	lr, r3
 800aee6:	4770      	bx	lr

0800aee8 <_fini>:
 800aee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aeea:	bf00      	nop
 800aeec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aeee:	bc08      	pop	{r3}
 800aef0:	469e      	mov	lr, r3
 800aef2:	4770      	bx	lr
